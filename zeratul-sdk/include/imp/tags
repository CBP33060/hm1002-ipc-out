!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ADEC_MODE_PACK	imp_audio.h	/^	ADEC_MODE_PACK   = 0,	\/**< Pack 方式解码 *\/$/;"	e	enum:__anon138
ADEC_MODE_STREAM	imp_audio.h	/^	ADEC_MODE_STREAM = 1,	\/**< Stream 方式解码 *\/$/;"	e	enum:__anon138
ARRAY_SIZE	imp_utils.h	42;"	d
AUDIO_AEC_CHANNEL_FIRST_LEFT	imp_audio.h	/^	AUDIO_AEC_CHANNEL_FIRST_LEFT = 0,	\/**< 选择左声道或者通道1做回音消除*\/$/;"	e	enum:__anon136
AUDIO_AEC_CHANNEL_FOURTH	imp_audio.h	/^	AUDIO_AEC_CHANNEL_FOURTH = 3,	\/**< 选择通道4回音消除*\/$/;"	e	enum:__anon136
AUDIO_AEC_CHANNEL_SECOND_RIGHT	imp_audio.h	/^	AUDIO_AEC_CHANNEL_SECOND_RIGHT = 1,	\/**< 选择右声道或者通道2做回音消除*\/$/;"	e	enum:__anon136
AUDIO_AEC_CHANNEL_THIRD	imp_audio.h	/^	AUDIO_AEC_CHANNEL_THIRD = 2,	\/**< 选择通道3做回音消除*\/$/;"	e	enum:__anon136
AUDIO_BIT_WIDTH_16	imp_audio.h	/^	AUDIO_BIT_WIDTH_16 = 16,		\/**< 16bit采样精度 *\/$/;"	e	enum:__anon134
AUDIO_SAMPLE_RATE_12000	imp_audio.h	/^	AUDIO_SAMPLE_RATE_12000	= 12000,	\/**< 12KHz采样率 *\/$/;"	e	enum:__anon133
AUDIO_SAMPLE_RATE_16000	imp_audio.h	/^	AUDIO_SAMPLE_RATE_16000 = 16000,	\/**< 16KHz采样率 *\/$/;"	e	enum:__anon133
AUDIO_SAMPLE_RATE_24000	imp_audio.h	/^	AUDIO_SAMPLE_RATE_24000 = 24000,	\/**< 24KHz采样率 *\/$/;"	e	enum:__anon133
AUDIO_SAMPLE_RATE_32000	imp_audio.h	/^	AUDIO_SAMPLE_RATE_32000 = 32000,	\/**< 32KHz采样率 *\/$/;"	e	enum:__anon133
AUDIO_SAMPLE_RATE_44100	imp_audio.h	/^	AUDIO_SAMPLE_RATE_44100 = 44100,	\/**< 44.1KHz采样率 *\/$/;"	e	enum:__anon133
AUDIO_SAMPLE_RATE_48000	imp_audio.h	/^	AUDIO_SAMPLE_RATE_48000 = 48000,	\/**< 48KHz采样率 *\/$/;"	e	enum:__anon133
AUDIO_SAMPLE_RATE_8000	imp_audio.h	/^	AUDIO_SAMPLE_RATE_8000	= 8000,		\/**< 8KHz采样率 *\/$/;"	e	enum:__anon133
AUDIO_SAMPLE_RATE_96000	imp_audio.h	/^	AUDIO_SAMPLE_RATE_96000 = 96000,	\/**< 96KHz采样率 *\/$/;"	e	enum:__anon133
AUDIO_SOUND_MODE_MONO	imp_audio.h	/^	AUDIO_SOUND_MODE_MONO	= 1,	\/**< 单声道 *\/$/;"	e	enum:__anon135
AUDIO_SOUND_MODE_STEREO	imp_audio.h	/^	AUDIO_SOUND_MODE_STEREO = 2,	\/**< 双声道 *\/$/;"	e	enum:__anon135
AeAGain	imp_isp.h	/^	uint32_t AeAGain;                                   \/**< AE Sensor 模拟增益值，单位是倍数 x 1024 *\/$/;"	m	struct:__anon44	access:public
AeAGain	imp_isp.h	/^	uint32_t AeAGain;                                   \/**< AE Sensor 模拟增益值，单位是倍数 x 1024 *\/$/;"	m	struct:__anon69	access:public
AeAGain	imp_isp.h	/^	uint32_t AeAGain;                                   \/**< AE Sensor 模拟增益值，单位是倍数 x 1024 *\/$/;"	m	struct:__anon70	access:public
AeAGain	imp_isp.h	/^	uint32_t AeAGain;                                   \/**< AE Sensor模拟增益值，单位是倍数 x 1024 *\/$/;"	m	struct:__anon68	access:public
AeAGainManualMode	imp_isp.h	/^	IMPISPTuningOpsType AeAGainManualMode;              \/**< AE Sensor 模拟增益手动模式使能 *\/$/;"	m	struct:__anon44	access:public
AeBLCEn	imp_isp.h	/^	IMPISPAEScenceMode AeBLCEn;            \/**< AE 背光补偿功能使能 *\/$/;"	m	struct:__anon46	access:public
AeBLCStrength	imp_isp.h	/^	unsigned char AeBLCStrength;           \/**< AE 背光补偿强度（0 ~ 10） *\/$/;"	m	struct:__anon46	access:public
AeDGain	imp_isp.h	/^	uint32_t AeDGain;                                   \/**< AE Sensor数字增益值，单位是倍数 x 1024 *\/$/;"	m	struct:__anon44	access:public
AeDGain	imp_isp.h	/^	uint32_t AeDGain;                                   \/**< AE Sensor数字增益值，单位是倍数 x 1024 *\/$/;"	m	struct:__anon68	access:public
AeDGain	imp_isp.h	/^	uint32_t AeDGain;                                   \/**< AE Sensor数字增益值，单位是倍数 x 1024 *\/$/;"	m	struct:__anon69	access:public
AeDGain	imp_isp.h	/^	uint32_t AeDGain;                                   \/**< AE Sensor数字增益值，单位是倍数 x 1024 *\/$/;"	m	struct:__anon70	access:public
AeDGainManualMode	imp_isp.h	/^	IMPISPTuningOpsType AeDGainManualMode;              \/**< AE Sensor数字增益手动模式使能 *\/$/;"	m	struct:__anon44	access:public
AeHLCEn	imp_isp.h	/^	IMPISPAEScenceMode AeHLCEn;            \/**< AE 强光抑制功能使能 *\/$/;"	m	struct:__anon46	access:public
AeHLCStrength	imp_isp.h	/^	unsigned char AeHLCStrength;           \/**< AE 强光抑制强度（0 ~ 10）*\/$/;"	m	struct:__anon46	access:public
AeIntegrationTime	imp_isp.h	/^	uint32_t AeIntegrationTime;                         \/**< AE手动模式下的曝光值 *\/$/;"	m	struct:__anon44	access:public
AeIntegrationTime	imp_isp.h	/^	uint32_t AeIntegrationTime;                         \/**< AE的曝光值 *\/$/;"	m	struct:__anon68	access:public
AeIntegrationTime	imp_isp.h	/^	uint32_t AeIntegrationTime;                         \/**< AE的曝光值 *\/$/;"	m	struct:__anon69	access:public
AeIntegrationTime	imp_isp.h	/^	uint32_t AeIntegrationTime;                         \/**< AE的曝光值 *\/$/;"	m	struct:__anon70	access:public
AeIntegrationTimeMode	imp_isp.h	/^	IMPISPTuningOpsType AeIntegrationTimeMode;          \/**< AE曝光手动模式使能 *\/$/;"	m	struct:__anon44	access:public
AeIntegrationTimeUnit	imp_isp.h	/^	IMPISPAEIntegrationTimeUnit AeIntegrationTimeUnit;  \/**< AE曝光时间单位 *\/$/;"	m	struct:__anon44	access:public
AeIntegrationTimeUnit	imp_isp.h	/^	IMPISPAEIntegrationTimeUnit AeIntegrationTimeUnit;  \/**< AE曝光时间单位 *\/$/;"	m	struct:__anon68	access:public
AeIntegrationTimeUnit	imp_isp.h	/^	IMPISPAEIntegrationTimeUnit AeIntegrationTimeUnit;  \/**< AE曝光时间单位 *\/$/;"	m	struct:__anon69	access:public
AeIntegrationTimeUnit	imp_isp.h	/^	IMPISPAEIntegrationTimeUnit AeIntegrationTimeUnit;  \/**< AE曝光时间单位 *\/$/;"	m	struct:__anon70	access:public
AeIspDGain	imp_isp.h	/^	uint32_t AeIspDGain;                                \/**< AE ISP 数字增益值，单位倍数 x 1024*\/$/;"	m	struct:__anon44	access:public
AeIspDGain	imp_isp.h	/^	uint32_t AeIspDGain;                                \/**< AE ISP 数字增益值，单位倍数 x 1024*\/$/;"	m	struct:__anon68	access:public
AeIspDGain	imp_isp.h	/^	uint32_t AeIspDGain;                                \/**< AE ISP 数字增益值，单位倍数 x 1024*\/$/;"	m	struct:__anon69	access:public
AeIspDGain	imp_isp.h	/^	uint32_t AeIspDGain;                                \/**< AE ISP 数字增益值，单位倍数 x 1024*\/$/;"	m	struct:__anon70	access:public
AeIspDGainManualMode	imp_isp.h	/^	IMPISPTuningOpsType AeIspDGainManualMode;	    \/**< AE ISP 数字增益手动模式使能 *\/$/;"	m	struct:__anon44	access:public
AeMaxAGain	imp_isp.h	/^	uint32_t AeMaxAGain;                                \/**< AE最大sensor模拟增益 *\/$/;"	m	struct:__anon68	access:public
AeMaxAGain	imp_isp.h	/^	uint32_t AeMaxAGain;                                \/**< AE最大sensor模拟增益，单位是倍数 x 1024 *\/$/;"	m	struct:__anon44	access:public
AeMaxAGainMode	imp_isp.h	/^	IMPISPTuningOpsType AeMaxAGainMode;                 \/**< AE最大sensor模拟增益使能位 *\/$/;"	m	struct:__anon44	access:public
AeMaxDgain	imp_isp.h	/^	uint32_t AeMaxDgain;                                \/**< AE最大sensor数字增益 *\/$/;"	m	struct:__anon68	access:public
AeMaxDgain	imp_isp.h	/^	uint32_t AeMaxDgain;                                \/**< AE最大sensor数字增益，单位是倍数 x 1024 *\/$/;"	m	struct:__anon44	access:public
AeMaxDgainMode	imp_isp.h	/^	IMPISPTuningOpsType AeMaxDgainMode;                 \/**< AE最大sensor数字增益使能位 *\/$/;"	m	struct:__anon44	access:public
AeMaxIntegrationTime	imp_isp.h	/^	uint32_t AeMaxIntegrationTime;                      \/**< AE最大曝光时间 *\/$/;"	m	struct:__anon44	access:public
AeMaxIntegrationTime	imp_isp.h	/^	uint32_t AeMaxIntegrationTime;                      \/**< AE最大曝光时间 *\/$/;"	m	struct:__anon68	access:public
AeMaxIntegrationTimeMode	imp_isp.h	/^	IMPISPTuningOpsType AeMaxIntegrationTimeMode;       \/**< AE最大曝光使能位 *\/$/;"	m	struct:__anon44	access:public
AeMaxIspDGain	imp_isp.h	/^	uint32_t AeMaxIspDGain;                             \/**< AE最大ISP数字增益 *\/$/;"	m	struct:__anon68	access:public
AeMaxIspDGain	imp_isp.h	/^	uint32_t AeMaxIspDGain;                             \/**< AE最大ISP数字增益，单位是倍数 x 1024 *\/$/;"	m	struct:__anon44	access:public
AeMaxIspDGainMode	imp_isp.h	/^	IMPISPTuningOpsType AeMaxIspDGainMode;              \/**< AE最大ISP数字增益使能位 *\/$/;"	m	struct:__anon44	access:public
AeMinAGain	imp_isp.h	/^	uint32_t AeMinAGain;                                \/**< AE最小sensor模拟增益 *\/$/;"	m	struct:__anon68	access:public
AeMinAGain	imp_isp.h	/^	uint32_t AeMinAGain;                                \/**< AE最小sensor模拟增益，单位是倍数 x 1024 *\/$/;"	m	struct:__anon44	access:public
AeMinAGainMode	imp_isp.h	/^	IMPISPTuningOpsType AeMinAGainMode;                 \/**< AE最小模拟增益使能位 *\/$/;"	m	struct:__anon44	access:public
AeMinDgain	imp_isp.h	/^	uint32_t AeMinDgain;                                \/**< AE最小sensor数字增益 *\/$/;"	m	struct:__anon68	access:public
AeMinDgain	imp_isp.h	/^	uint32_t AeMinDgain;                                \/**< AE最小sensor数字增益，单位是倍数 x 1024 *\/$/;"	m	struct:__anon44	access:public
AeMinDgainMode	imp_isp.h	/^	IMPISPTuningOpsType AeMinDgainMode;                 \/**< AE最小数字增益使能位(预留) *\/$/;"	m	struct:__anon44	access:public
AeMinIntegrationTime	imp_isp.h	/^	uint32_t AeMinIntegrationTime;                      \/**< AE最小曝光时间 *\/$/;"	m	struct:__anon44	access:public
AeMinIntegrationTime	imp_isp.h	/^	uint32_t AeMinIntegrationTime;                      \/**< AE最小曝光时间 *\/$/;"	m	struct:__anon68	access:public
AeMinIntegrationTimeMode	imp_isp.h	/^	IMPISPTuningOpsType AeMinIntegrationTimeMode;       \/**< AE最小曝光使能位(预留) *\/$/;"	m	struct:__anon44	access:public
AeMinIspDGain	imp_isp.h	/^	uint32_t AeMinIspDGain;                             \/**< AE最小ISP数字增益 *\/$/;"	m	struct:__anon68	access:public
AeMinIspDGain	imp_isp.h	/^	uint32_t AeMinIspDGain;                             \/**< AE最小ISP数字增益，单位是倍数 x 1024 *\/$/;"	m	struct:__anon44	access:public
AeMinIspDGainMode	imp_isp.h	/^	IMPISPTuningOpsType AeMinIspDGainMode;              \/**< AE最小ISP数字增益使能位(预留) *\/$/;"	m	struct:__anon44	access:public
AeMode	imp_isp.h	/^	IMPISPTuningOpsType AeMode;                         \/**< AE Freezen使能 *\/$/;"	m	struct:__anon44	access:public
AeShortAGain	imp_isp.h	/^	uint32_t AeShortAGain;                              \/**< AE Sensor 模拟增益值，单位是倍数 x 1024 *\/$/;"	m	struct:__anon44	access:public
AeShortAGain	imp_isp.h	/^	uint32_t AeShortAGain;                              \/**< AE Sensor 模拟增益值，单位是倍数 x 1024 *\/$/;"	m	struct:__anon69	access:public
AeShortAGain	imp_isp.h	/^	uint32_t AeShortAGain;                              \/**< AE Sensor 模拟增益值，单位是倍数 x 1024 *\/$/;"	m	struct:__anon70	access:public
AeShortAGain	imp_isp.h	/^	uint32_t AeShortAGain;                              \/**< AE Sensor模拟增益值，单位是倍数 x 1024 *\/$/;"	m	struct:__anon68	access:public
AeShortAGainManualMode	imp_isp.h	/^	IMPISPTuningOpsType AeShortAGainManualMode;         \/**< AE Sensor 模拟增益手动模式使能 *\/$/;"	m	struct:__anon44	access:public
AeShortDGain	imp_isp.h	/^	uint32_t AeShortDGain;                              \/**< AE Sensor数字增益值，单位是倍数 x 1024 *\/$/;"	m	struct:__anon44	access:public
AeShortDGain	imp_isp.h	/^	uint32_t AeShortDGain;                              \/**< AE Sensor数字增益值，单位是倍数 x 1024 *\/$/;"	m	struct:__anon68	access:public
AeShortDGain	imp_isp.h	/^	uint32_t AeShortDGain;                              \/**< AE Sensor数字增益值，单位是倍数 x 1024 *\/$/;"	m	struct:__anon69	access:public
AeShortDGain	imp_isp.h	/^	uint32_t AeShortDGain;                              \/**< AE Sensor数字增益值，单位是倍数 x 1024 *\/$/;"	m	struct:__anon70	access:public
AeShortDGainManualMode	imp_isp.h	/^	IMPISPTuningOpsType AeShortDGainManualMode;         \/**< AE Sensor数字增益手动模式使能 *\/$/;"	m	struct:__anon44	access:public
AeShortIntegrationTime	imp_isp.h	/^	uint32_t AeShortIntegrationTime;                    \/**< AE手动模式下的曝光值 *\/$/;"	m	struct:__anon44	access:public
AeShortIntegrationTime	imp_isp.h	/^	uint32_t AeShortIntegrationTime;                    \/**< AE手动模式下的曝光值 *\/$/;"	m	struct:__anon70	access:public
AeShortIntegrationTime	imp_isp.h	/^	uint32_t AeShortIntegrationTime;                    \/**< AE的曝光值 *\/$/;"	m	struct:__anon68	access:public
AeShortIntegrationTime	imp_isp.h	/^	uint32_t AeShortIntegrationTime;                    \/**< AE的曝光值 *\/$/;"	m	struct:__anon69	access:public
AeShortIntegrationTimeMode	imp_isp.h	/^	IMPISPTuningOpsType AeShortIntegrationTimeMode;     \/**< AE曝光手动模式使能 *\/$/;"	m	struct:__anon44	access:public
AeShortIspDGain	imp_isp.h	/^	uint32_t AeShortIspDGain;                           \/**< AE ISP 数字增益值，单位倍数 x 1024*\/$/;"	m	struct:__anon44	access:public
AeShortIspDGain	imp_isp.h	/^	uint32_t AeShortIspDGain;                           \/**< AE ISP 数字增益值，单位倍数 x 1024*\/$/;"	m	struct:__anon68	access:public
AeShortIspDGain	imp_isp.h	/^	uint32_t AeShortIspDGain;                           \/**< AE ISP 数字增益值，单位倍数 x 1024*\/$/;"	m	struct:__anon69	access:public
AeShortIspDGain	imp_isp.h	/^	uint32_t AeShortIspDGain;                           \/**< AE ISP 数字增益值，单位倍数 x 1024*\/$/;"	m	struct:__anon70	access:public
AeShortIspDGainManualMode	imp_isp.h	/^	IMPISPTuningOpsType AeShortIspDGainManualMode;      \/**< AE ISP 数字增益手动模式使能 *\/$/;"	m	struct:__anon44	access:public
AeShortMaxAGain	imp_isp.h	/^	uint32_t AeShortMaxAGain;                           \/**< AE最大sensor模拟增益 *\/$/;"	m	struct:__anon44	access:public
AeShortMaxAGain	imp_isp.h	/^	uint32_t AeShortMaxAGain;                           \/**< AE最大sensor模拟增益 *\/$/;"	m	struct:__anon68	access:public
AeShortMaxAGainMode	imp_isp.h	/^	IMPISPTuningOpsType AeShortMaxAGainMode;            \/**< AE最大sensor模拟增益使能位 *\/$/;"	m	struct:__anon44	access:public
AeShortMaxDgain	imp_isp.h	/^	uint32_t AeShortMaxDgain;                           \/**< AE最大sensor数字增益 *\/$/;"	m	struct:__anon44	access:public
AeShortMaxDgain	imp_isp.h	/^	uint32_t AeShortMaxDgain;                           \/**< AE最大sensor数字增益 *\/$/;"	m	struct:__anon68	access:public
AeShortMaxDgainMode	imp_isp.h	/^	IMPISPTuningOpsType AeShortMaxDgainMode;            \/**< AE最大sensor数字增益使能位 *\/$/;"	m	struct:__anon44	access:public
AeShortMaxIntegrationTime	imp_isp.h	/^	uint32_t AeShortMaxIntegrationTime;                 \/**< AE最大曝光时间 *\/$/;"	m	struct:__anon44	access:public
AeShortMaxIntegrationTime	imp_isp.h	/^	uint32_t AeShortMaxIntegrationTime;                 \/**< AE最大曝光时间 *\/$/;"	m	struct:__anon68	access:public
AeShortMaxIntegrationTimeMode	imp_isp.h	/^	IMPISPTuningOpsType AeShortMaxIntegrationTimeMode;  \/**< AE最大曝光使能位 *\/$/;"	m	struct:__anon44	access:public
AeShortMaxIspDGain	imp_isp.h	/^	uint32_t AeShortMaxIspDGain;                        \/**< AE最大ISP数字增益 *\/$/;"	m	struct:__anon44	access:public
AeShortMaxIspDGain	imp_isp.h	/^	uint32_t AeShortMaxIspDGain;                        \/**< AE最大ISP数字增益 *\/$/;"	m	struct:__anon68	access:public
AeShortMaxIspDGainMode	imp_isp.h	/^	IMPISPTuningOpsType AeShortMaxIspDGainMode;         \/**< AE最大ISP数字增益使能位 *\/$/;"	m	struct:__anon44	access:public
AeShortMinAGain	imp_isp.h	/^	uint32_t AeShortMinAGain;                           \/**< AE最小sensor模拟增益 *\/$/;"	m	struct:__anon44	access:public
AeShortMinAGain	imp_isp.h	/^	uint32_t AeShortMinAGain;                           \/**< AE最小sensor模拟增益 *\/$/;"	m	struct:__anon68	access:public
AeShortMinAGainMode	imp_isp.h	/^	IMPISPTuningOpsType AeShortMinAGainMode;            \/**< AE最小模拟增益使能位 *\/$/;"	m	struct:__anon44	access:public
AeShortMinDgain	imp_isp.h	/^	uint32_t AeShortMinDgain;                           \/**< AE最小sensor数字增益 *\/$/;"	m	struct:__anon44	access:public
AeShortMinDgain	imp_isp.h	/^	uint32_t AeShortMinDgain;                           \/**< AE最小sensor数字增益 *\/$/;"	m	struct:__anon68	access:public
AeShortMinDgainMode	imp_isp.h	/^	IMPISPTuningOpsType AeShortMinDgainMode;            \/**< AE最小数字增益使能位(预留) *\/$/;"	m	struct:__anon44	access:public
AeShortMinIntegrationTime	imp_isp.h	/^	uint32_t AeShortMinIntegrationTime;                 \/**< AE最小曝光时间 *\/$/;"	m	struct:__anon44	access:public
AeShortMinIntegrationTime	imp_isp.h	/^	uint32_t AeShortMinIntegrationTime;                 \/**< AE最小曝光时间 *\/$/;"	m	struct:__anon68	access:public
AeShortMinIntegrationTimeMode	imp_isp.h	/^	IMPISPTuningOpsType AeShortMinIntegrationTimeMode;  \/**< AE最小曝光使能位(预留) *\/$/;"	m	struct:__anon44	access:public
AeShortMinIspDGain	imp_isp.h	/^	uint32_t AeShortMinIspDGain;                        \/**< AE最小ISP数字增益 *\/$/;"	m	struct:__anon44	access:public
AeShortMinIspDGain	imp_isp.h	/^	uint32_t AeShortMinIspDGain;                        \/**< AE最小ISP数字增益 *\/$/;"	m	struct:__anon68	access:public
AeShortMinIspDGainMode	imp_isp.h	/^	IMPISPTuningOpsType AeShortMinIspDGainMode;         \/**< AE最小ISP数字增益使能位(预留) *\/$/;"	m	struct:__anon44	access:public
AeShortMode	imp_isp.h	/^	IMPISPTuningOpsType AeShortMode;                    \/**< AE Freezen使能 *\/$/;"	m	struct:__anon44	access:public
AeStartEn	imp_isp.h	/^	IMPISPAEScenceMode AeStartEn;          \/**< AE 起始点功能使能 *\/$/;"	m	struct:__anon46	access:public
AeStartEv	imp_isp.h	/^	uint32_t AeStartEv;                    \/**< AE 起始点EV值 *\/$/;"	m	struct:__anon46	access:public
AeStatis	imp_isp.h	/^	IMPISPAEStatisAttr AeStatis;						\/**< AE统计属性 *\/$/;"	m	struct:__anon68	access:public
AeTargetComp	imp_isp.h	/^	uint32_t AeTargetComp;                 \/**< AE 目标亮度调节强度（0 ~ 255，小于128变暗，大于128变亮） *\/$/;"	m	struct:__anon46	access:public
AeTargetCompEn	imp_isp.h	/^	IMPISPAEScenceMode AeTargetCompEn;     \/**< AE 目标亮度补偿使能 *\/$/;"	m	struct:__anon46	access:public
Af_Fir0	imp_isp.h	/^	IMPISPStatisZone Af_Fir0;$/;"	m	struct:__anon52	access:public
Af_Fir1	imp_isp.h	/^	IMPISPStatisZone Af_Fir1;$/;"	m	struct:__anon52	access:public
Af_HighLumaCnt	imp_isp.h	/^	IMPISPStatisZone Af_HighLumaCnt;$/;"	m	struct:__anon52	access:public
Af_Iir0	imp_isp.h	/^	IMPISPStatisZone Af_Iir0;$/;"	m	struct:__anon52	access:public
Af_Iir1	imp_isp.h	/^	IMPISPStatisZone Af_Iir1;$/;"	m	struct:__anon52	access:public
Af_YSum	imp_isp.h	/^	IMPISPStatisZone Af_YSum;$/;"	m	struct:__anon52	access:public
AwbStatis	imp_isp.h	/^	IMPISPAWBStatisAttr AwbStatis;							\/**< AWB的初始统计属性 *\/$/;"	m	struct:__anon73	access:public
BLOCK	imp_audio.h	/^	BLOCK = 0,				\/**< 阻塞 *\/$/;"	e	enum:__anon132
BPP	imp_common.h	184;"	d
BPP	imp_common.h	200;"	d
ColorGamut	imp_isp.h	/^	IMPISPCSCColorGamut ColorGamut;     \/**< RGB转YUV的标准矩阵 *\/$/;"	m	struct:__anon28	access:public
ColorMatrix	imp_isp.h	/^	float ColorMatrix[9];               \/**< 颜色矩阵 *\/$/;"	m	struct:__anon29	access:public
CompressionGaindB	imp_audio.h	/^	int CompressionGaindB;	\/**< 设置最大的增益值,[0, 90],0代表无增益,值越大,增益越高. *\/$/;"	m	struct:__anon148	access:public
CscClip	imp_isp.h	/^	unsigned char CscClip[4];       \/**< 分别为Y最大值，Y最大值，UV最大值，UV最小值 *\/$/;"	m	struct:__anon27	access:public
CscCoef	imp_isp.h	/^	float CscCoef[9];               \/**< 3x3矩阵 *\/$/;"	m	struct:__anon27	access:public
CscOffset	imp_isp.h	/^	unsigned char CscOffset[2];     \/**< [0] UV偏移值 [1] Y偏移值*\/$/;"	m	struct:__anon27	access:public
Curve_type	imp_isp.h	/^	IMPISPGammaCurveType Curve_type; \/**< gamma模式 *\/$/;"	m	struct:__anon31	access:public
DEV_ID_DEC	imp_common.h	/^	DEV_ID_DEC,			\/**< 解码器 *\/$/;"	e	enum:__anon165
DEV_ID_ENC	imp_common.h	/^	DEV_ID_ENC,			\/**< 编码器 *\/$/;"	e	enum:__anon165
DEV_ID_FG1DIRECT	imp_common.h	/^	DEV_ID_FG1DIRECT,		\/**< FB FG1Direct *\/$/;"	e	enum:__anon165
DEV_ID_FS	imp_common.h	/^	DEV_ID_FS,			\/**< 视频源 *\/$/;"	e	enum:__anon165
DEV_ID_IVS	imp_common.h	/^	DEV_ID_IVS,			\/**< 算法 *\/$/;"	e	enum:__anon165
DEV_ID_OSD	imp_common.h	/^	DEV_ID_OSD,			\/**< 图像叠加 *\/$/;"	e	enum:__anon165
DEV_ID_RESERVED_END	imp_common.h	/^	DEV_ID_RESERVED_END = 23,$/;"	e	enum:__anon165
DEV_ID_RESERVED_START	imp_common.h	/^	DEV_ID_RESERVED_START,$/;"	e	enum:__anon165
DMIC_BIT_WIDTH_16	imp_dmic.h	/^	DMIC_BIT_WIDTH_16 = 16, \/**<16 bit 采样精度*\/$/;"	e	enum:__anon153
DMIC_SAMPLE_RATE_16000	imp_dmic.h	/^	DMIC_SAMPLE_RATE_16000 = 16000, \/*16KHz 采样率*\/$/;"	e	enum:__anon152
DMIC_SAMPLE_RATE_48000	imp_dmic.h	/^	DMIC_SAMPLE_RATE_48000 = 48000, \/*48KHz 采样率*\/$/;"	e	enum:__anon152
DMIC_SAMPLE_RATE_8000	imp_dmic.h	/^	DMIC_SAMPLE_RATE_8000 = 8000, \/**8KHz 采样率*\/$/;"	e	enum:__anon152
DMIC_SOUND_MODE_MONO	imp_dmic.h	/^	DMIC_SOUND_MODE_MONO = 1,       \/*单声道*\/$/;"	e	enum:__anon154
DMIC_SOUND_MODE_STEREO	imp_dmic.h	/^	DMIC_SOUND_MODE_STEREO = 2,		\/*立体音*\/$/;"	e	enum:__anon154
DmicXInfo	imp_dmic.h	/^} DmicXInfo;$/;"	t	typeref:struct:__anon159
EVLog2	imp_isp.h	/^	uint32_t EVLog2;                                    \/**< AE 曝光值，此值经过log运算 *\/$/;"	m	struct:__anon44	access:public
ExposureValue	imp_isp.h	/^	uint64_t ExposureValue;                             \/**< AE 曝光值，为integration time x again x dgain *\/$/;"	m	struct:__anon44	access:public
FIFO_CACHE_PRIORITY	imp_framesource.h	/^	FIFO_CACHE_PRIORITY = 0,	\/**< FIFO 优先缓存，然后输出数据 *\/$/;"	e	enum:__anon177
FIFO_DATA_PRIORITY	imp_framesource.h	/^	FIFO_DATA_PRIORITY,			\/**< FIFO 优先输出数据，然后缓存 *\/$/;"	e	enum:__anon177
FS_EXT_CHANNEL	imp_framesource.h	/^	FS_EXT_CHANNEL,			\/**< 拓展通道 *\/$/;"	e	enum:__anon176
FS_PHY_CHANNEL	imp_framesource.h	/^	FS_PHY_CHANNEL,			\/**< 物理通道 *\/$/;"	e	enum:__anon176
GPIO_PA	imp_isp.h	107;"	d
GPIO_PB	imp_isp.h	108;"	d
GPIO_PC	imp_isp.h	109;"	d
GPIO_PD	imp_isp.h	110;"	d
IMPAudioAecChn	imp_audio.h	/^} IMPAudioAecChn;$/;"	t	typeref:enum:__anon136
IMPAudioAgcConfig	imp_audio.h	/^} IMPAudioAgcConfig;$/;"	t	typeref:struct:__anon148
IMPAudioBitWidth	imp_audio.h	/^} IMPAudioBitWidth;$/;"	t	typeref:enum:__anon134
IMPAudioDecChnAttr	imp_audio.h	/^} IMPAudioDecChnAttr;$/;"	t	typeref:struct:__anon146
IMPAudioDecDecoder	imp_audio.h	/^} IMPAudioDecDecoder;$/;"	t	typeref:struct:__anon147
IMPAudioDecMode	imp_audio.h	/^} IMPAudioDecMode;$/;"	t	typeref:enum:__anon138
IMPAudioEncChnAttr	imp_audio.h	/^} IMPAudioEncChnAttr;$/;"	t	typeref:struct:__anon144
IMPAudioEncEncoder	imp_audio.h	/^} IMPAudioEncEncoder;$/;"	t	typeref:struct:__anon145
IMPAudioFrame	imp_audio.h	/^} IMPAudioFrame;$/;"	t	typeref:struct:__anon140
IMPAudioIChnParam	imp_audio.h	/^} IMPAudioIChnParam;$/;"	t	typeref:struct:__anon141
IMPAudioIOAttr	imp_audio.h	/^} IMPAudioIOAttr;$/;"	t	typeref:struct:__anon139
IMPAudioOChnState	imp_audio.h	/^} IMPAudioOChnState;$/;"	t	typeref:struct:__anon142
IMPAudioPalyloadType	imp_audio.h	/^} IMPAudioPalyloadType;$/;"	t	typeref:enum:__anon137
IMPAudioSampleRate	imp_audio.h	/^} IMPAudioSampleRate;$/;"	t	typeref:enum:__anon133
IMPAudioSoundMode	imp_audio.h	/^} IMPAudioSoundMode;$/;"	t	typeref:enum:__anon135
IMPAudioStream	imp_audio.h	/^} IMPAudioStream;$/;"	t	typeref:struct:__anon143
IMPBlock	imp_audio.h	/^} IMPBlock;$/;"	t	typeref:enum:__anon132
IMPCell	imp_common.h	/^} IMPCell;$/;"	t	typeref:struct:__anon166
IMPDecoderAttr	imp_decoder.h	/^} IMPDecoderAttr;$/;"	t	typeref:struct:__anon161
IMPDecoderCHNAttr	imp_decoder.h	/^} IMPDecoderCHNAttr;$/;"	t	typeref:struct:__anon162
IMPDecoderNal	imp_decoder.h	/^} IMPDecoderNal;$/;"	t	typeref:struct:__anon163
IMPDecoderStream	imp_decoder.h	/^} IMPDecoderStream;$/;"	t	typeref:struct:__anon164
IMPDeviceID	imp_common.h	/^} IMPDeviceID;$/;"	t	typeref:enum:__anon165
IMPDmicAttr	imp_dmic.h	/^} IMPDmicAttr;$/;"	t	typeref:struct:__anon155
IMPDmicBitWidth	imp_dmic.h	/^} IMPDmicBitWidth;$/;"	t	typeref:enum:__anon153
IMPDmicChnFrame	imp_dmic.h	/^} IMPDmicChnFrame;$/;"	t	typeref:struct:__anon157
IMPDmicChnParam	imp_dmic.h	/^} IMPDmicChnParam;$/;"	t	typeref:struct:__anon158
IMPDmicFrame	imp_dmic.h	/^} IMPDmicFrame;$/;"	t	typeref:struct:__anon156
IMPDmicSampleRate	imp_dmic.h	/^} IMPDmicSampleRate;$/;"	t	typeref:enum:__anon152
IMPDmicSoundMode	imp_dmic.h	/^} IMPDmicSoundMode;$/;"	t	typeref:enum:__anon154
IMPEncoderAttrCappedQuality	imp_encoder.h	/^typedef IMPEncoderAttrCappedVbr IMPEncoderAttrCappedQuality;$/;"	t
IMPEncoderAttrCappedVbr	imp_encoder.h	/^} IMPEncoderAttrCappedVbr;$/;"	t	typeref:struct:__anon124
IMPEncoderAttrCbr	imp_encoder.h	/^} IMPEncoderAttrCbr;$/;"	t	typeref:struct:__anon122
IMPEncoderAttrFixQP	imp_encoder.h	/^} IMPEncoderAttrFixQP;$/;"	t	typeref:struct:__anon121
IMPEncoderAttrRcMode	imp_encoder.h	/^} IMPEncoderAttrRcMode;$/;"	t	typeref:struct:__anon125
IMPEncoderAttrVbr	imp_encoder.h	/^} IMPEncoderAttrVbr;$/;"	t	typeref:struct:__anon123
IMPEncoderChnAttr	imp_encoder.h	/^} IMPEncoderChnAttr;$/;"	t	typeref:struct:__anon129
IMPEncoderChnStat	imp_encoder.h	/^} IMPEncoderChnStat;$/;"	t	typeref:struct:__anon130
IMPEncoderCropCfg	imp_encoder.h	/^} IMPEncoderCropCfg;$/;"	t	typeref:struct:__anon115
IMPEncoderEncAttr	imp_encoder.h	/^} IMPEncoderEncAttr;$/;"	t	typeref:struct:__anon117
IMPEncoderEncOptions	imp_encoder.h	/^} IMPEncoderEncOptions;$/;"	t	typeref:enum:__anon113
IMPEncoderEncTools	imp_encoder.h	/^} IMPEncoderEncTools;$/;"	t	typeref:enum:__anon114
IMPEncoderEncType	imp_encoder.h	/^} IMPEncoderEncType;$/;"	t	typeref:enum:__anon110
IMPEncoderFrmRate	imp_encoder.h	/^} IMPEncoderFrmRate;$/;"	t	typeref:struct:__anon127
IMPEncoderGopAttr	imp_encoder.h	/^} IMPEncoderGopAttr;$/;"	t	typeref:struct:__anon119
IMPEncoderGopCtrlMode	imp_encoder.h	/^} IMPEncoderGopCtrlMode;$/;"	t	typeref:enum:__anon118
IMPEncoderH264NaluType	imp_encoder.h	/^} IMPEncoderH264NaluType;$/;"	t	typeref:enum:__anon104
IMPEncoderH265NaluType	imp_encoder.h	/^} IMPEncoderH265NaluType;$/;"	t	typeref:enum:__anon105
IMPEncoderJpegeQl	imp_encoder.h	/^} IMPEncoderJpegeQl;$/;"	t	typeref:struct:__anon131
IMPEncoderNalType	imp_encoder.h	/^} IMPEncoderNalType;$/;"	t	typeref:union:__anon106
IMPEncoderPack	imp_encoder.h	/^} IMPEncoderPack;$/;"	t	typeref:struct:__anon108
IMPEncoderPicFormat	imp_encoder.h	/^} IMPEncoderPicFormat;$/;"	t	typeref:enum:__anon112
IMPEncoderProfile	imp_encoder.h	/^} IMPEncoderProfile;$/;"	t	typeref:enum:__anon111
IMPEncoderRcAttr	imp_encoder.h	/^} IMPEncoderRcAttr;$/;"	t	typeref:struct:__anon128
IMPEncoderRcMode	imp_encoder.h	/^} IMPEncoderRcMode;$/;"	t	typeref:enum:__anon120
IMPEncoderRcOptions	imp_encoder.h	/^typedef enum IMPEncoderRcOptions {$/;"	g
IMPEncoderRcOptions	imp_encoder.h	/^} IMPEncoderRcOptions;$/;"	t	typeref:enum:IMPEncoderRcOptions
IMPEncoderSliceType	imp_encoder.h	/^} IMPEncoderSliceType;$/;"	t	typeref:enum:__anon107
IMPEncoderStream	imp_encoder.h	/^} IMPEncoderStream;$/;"	t	typeref:struct:__anon109
IMPEncoderVpuType	imp_encoder.h	/^}IMPEncoderVpuType;$/;"	t	typeref:enum:__anon116
IMPFSChnAttr	imp_framesource.h	/^} IMPFSChnAttr;$/;"	t	typeref:struct:__anon179
IMPFSChnCrop	imp_framesource.h	/^} IMPFSChnCrop;$/;"	t	typeref:struct:__anon174
IMPFSChnFifoAttr	imp_framesource.h	/^} IMPFSChnFifoAttr;$/;"	t	typeref:struct:__anon178
IMPFSChnFifoType	imp_framesource.h	/^} IMPFSChnFifoType;$/;"	t	typeref:enum:__anon177
IMPFSChnScaler	imp_framesource.h	/^} IMPFSChnScaler;$/;"	t	typeref:struct:__anon175
IMPFSChnType	imp_framesource.h	/^} IMPFSChnType;$/;"	t	typeref:enum:__anon176
IMPFSI2DAttr	imp_framesource.h	/^}IMPFSI2DAttr;$/;"	t	typeref:struct:i2dattr
IMPFrameInfo	imp_common.h	/^} IMPFrameInfo;$/;"	t	typeref:struct:__anon167
IMPFrameTimestamp	imp_common.h	/^} IMPFrameTimestamp;$/;"	t	typeref:struct:__anon168
IMPI2CInfo	imp_isp.h	/^} IMPI2CInfo;$/;"	t	typeref:struct:__anon5
IMPISP3AStatisLocation	imp_isp.h	/^} IMPISP3AStatisLocation;$/;"	t	typeref:struct:__anon33
IMPISPAEExprInfo	imp_isp.h	/^} IMPISPAEExprInfo;$/;"	t	typeref:struct:__anon44
IMPISPAEIntegrationTimeUnit	imp_isp.h	/^} IMPISPAEIntegrationTimeUnit;$/;"	t	typeref:enum:__anon43
IMPISPAEScenceAttr	imp_isp.h	/^} IMPISPAEScenceAttr;$/;"	t	typeref:struct:__anon46
IMPISPAEScenceMode	imp_isp.h	/^} IMPISPAEScenceMode;$/;"	t	typeref:enum:__anon45
IMPISPAEStatisAttr	imp_isp.h	/^} IMPISPAEStatisAttr;$/;"	t	typeref:struct:__anon34
IMPISPAEStatisInfo	imp_isp.h	/^}  __attribute__((packed, aligned(1))) IMPISPAEStatisInfo;$/;"	t	typeref:struct:__anon42
IMPISPAEWeightAttr	imp_isp.h	/^} IMPISPAEWeightAttr;$/;"	t	typeref:struct:__anon40
IMPISPAFMetricsInfo	imp_isp.h	/^ } IMPISPAFMetricsInfo;$/;"	t	typeref:struct:__anon53
IMPISPAFStatisAttr	imp_isp.h	/^} IMPISPAFStatisAttr;$/;"	t	typeref:struct:__anon37
IMPISPAFStatisInfo	imp_isp.h	/^} IMPISPAFStatisInfo;$/;"	t	typeref:struct:__anon52
IMPISPARGBType	imp_isp.h	/^} IMPISPARGBType;$/;"	t	typeref:enum:__anon59
IMPISPAWBCustomModeAttr	imp_isp.h	/^} IMPISPAWBCustomModeAttr;$/;"	t	typeref:struct:__anon51
IMPISPAWBGain	imp_isp.h	/^} IMPISPAWBGain;$/;"	t	typeref:struct:__anon48
IMPISPAWBGlobalStatisInfo	imp_isp.h	/^} IMPISPAWBGlobalStatisInfo;$/;"	t	typeref:struct:__anon49
IMPISPAWBMode	imp_isp.h	/^} IMPISPAWBMode;$/;"	t	typeref:enum:__anon50
IMPISPAWBStatisAttr	imp_isp.h	/^} IMPISPAWBStatisAttr;$/;"	t	typeref:struct:__anon36
IMPISPAWBStatisInfo	imp_isp.h	/^} IMPISPAWBStatisInfo;$/;"	t	typeref:struct:__anon47
IMPISPAWBStatisMode	imp_isp.h	/^} IMPISPAWBStatisMode;$/;"	t	typeref:enum:__anon35
IMPISPAeAlgoFunc	imp_isp.h	/^} IMPISPAeAlgoFunc;$/;"	t	typeref:struct:__anon72
IMPISPAeAttr	imp_isp.h	/^} IMPISPAeAttr;$/;"	t	typeref:struct:__anon70
IMPISPAeInfo	imp_isp.h	/^}  __attribute__((packed, aligned(1))) IMPISPAeInfo;$/;"	t	typeref:struct:__anon69
IMPISPAeInitAttr	imp_isp.h	/^} IMPISPAeInitAttr;$/;"	t	typeref:struct:__anon68
IMPISPAeNotify	imp_isp.h	/^} IMPISPAeNotify;$/;"	t	typeref:enum:__anon71
IMPISPAntiflickerAttr	imp_isp.h	/^} IMPISPAntiflickerAttr;$/;"	t	typeref:struct:__anon17
IMPISPAntiflickerMode	imp_isp.h	/^} IMPISPAntiflickerMode;$/;"	t	typeref:enum:__anon16
IMPISPAutoZoom	imp_isp.h	/^} IMPISPAutoZoom;$/;"	t	typeref:struct:__anon54
IMPISPAwbAlgoFunc	imp_isp.h	/^} IMPISPAwbAlgoFunc;$/;"	t	typeref:struct:__anon77
IMPISPAwbAttr	imp_isp.h	/^} IMPISPAwbAttr;$/;"	t	typeref:struct:__anon75
IMPISPAwbInfo	imp_isp.h	/^}__attribute__((packed, aligned(1))) IMPISPAwbInfo;$/;"	t	typeref:struct:__anon74
IMPISPAwbInitAttr	imp_isp.h	/^} IMPISPAwbInitAttr;$/;"	t	typeref:struct:__anon73
IMPISPAwbNotify	imp_isp.h	/^} IMPISPAwbNotify;$/;"	t	typeref:enum:__anon76
IMPISPBinAttr	imp_isp.h	/^} IMPISPBinAttr;$/;"	t	typeref:struct:__anon78
IMPISPCCMAttr	imp_isp.h	/^} IMPISPCCMAttr;$/;"	t	typeref:struct:__anon29
IMPISPCSCAttr	imp_isp.h	/^} IMPISPCSCAttr;$/;"	t	typeref:struct:__anon28
IMPISPCSCColorGamut	imp_isp.h	/^} IMPISPCSCColorGamut;$/;"	t	typeref:enum:__anon26
IMPISPCscMatrix	imp_isp.h	/^} IMPISPCscMatrix;$/;"	t	typeref:struct:__anon27
IMPISPDrawBlockAttr	imp_isp.h	/^} IMPISPDrawBlockAttr;$/;"	t	typeref:struct:__anon66
IMPISPDrawLineAttr	imp_isp.h	/^} IMPISPDrawLineAttr;$/;"	t	typeref:struct:__anon64
IMPISPDrawRangAttr	imp_isp.h	/^} IMPISPDrawRangAttr;$/;"	t	typeref:struct:__anon63
IMPISPDrawType	imp_isp.h	/^} IMPISPDrawType;$/;"	t	typeref:enum:__anon65
IMPISPDrawWindAttr	imp_isp.h	/^}IMPISPDrawWindAttr;$/;"	t	typeref:struct:__anon62
IMPISPFrameDrop	imp_isp.h	/^} IMPISPFrameDrop;$/;"	t	typeref:struct:__anon80
IMPISPFrameDropAttr	imp_isp.h	/^} IMPISPFrameDropAttr;$/;"	t	typeref:struct:__anon81
IMPISPGammaAttr	imp_isp.h	/^} IMPISPGammaAttr;$/;"	t	typeref:struct:__anon31
IMPISPGammaCurveType	imp_isp.h	/^} IMPISPGammaCurveType;$/;"	t	typeref:enum:__anon30
IMPISPHVFLIP	imp_isp.h	/^} IMPISPHVFLIP;$/;"	t	typeref:enum:__anon18
IMPISPHVFLIPAttr	imp_isp.h	/^} IMPISPHVFLIPAttr;$/;"	t	typeref:struct:__anon19
IMPISPHistDomain	imp_isp.h	/^} IMPISPHistDomain;$/;"	t	typeref:enum:__anon32
IMPISPIrqType	imp_isp.h	/^} IMPISPIrqType;$/;"	t	typeref:enum:__anon14
IMPISPMaskBlockAttr	imp_isp.h	/^} IMPISPMaskBlockAttr;$/;"	t	typeref:struct:isp_mask_block_par
IMPISPModuleCtl	imp_isp.h	/^} IMPISPModuleCtl;$/;"	t	typeref:union:__anon21
IMPISPModuleRatioArrayList	imp_isp.h	/^} IMPISPModuleRatioArrayList;$/;"	t	typeref:enum:__anon23
IMPISPModuleRatioAttr	imp_isp.h	/^} IMPISPModuleRatioAttr;$/;"	t	typeref:struct:__anon25
IMPISPOSDAttr	imp_isp.h	/^} IMPISPOSDAttr;$/;"	t	typeref:struct:__anon61
IMPISPOSDBlockAttr	imp_isp.h	/^} IMPISPOSDBlockAttr;$/;"	t	typeref:struct:__anon60
IMPISPOSDNode	imp_isp.h	/^typedef struct IMPISPOSDNode IMPISPOSDNode;$/;"	t	typeref:struct:IMPISPOSDNode
IMPISPOSDSingleAttr	imp_isp.h	/^} IMPISPOSDSingleAttr;$/;"	t	typeref:struct:__anon86
IMPISPOSDType	imp_isp.h	/^}IMPISPOSDType;$/;"	t	typeref:enum:__anon85
IMPISPPICTYPE	imp_isp.h	/^} IMPISPPICTYPE;$/;"	t	typeref:enum:__anon58
IMPISPRatioUnit	imp_isp.h	/^} IMPISPRatioUnit;$/;"	t	typeref:struct:__anon24
IMPISPRunningMode	imp_isp.h	/^} IMPISPRunningMode;$/;"	t	typeref:enum:__anon20
IMPISPSENSORAttr	imp_isp.h	/^} IMPISPSENSORAttr;$/;"	t	typeref:struct:__anon12
IMPISPScalerLvAttr	imp_isp.h	/^} IMPISPScalerLvAttr;$/;"	t	typeref:struct:__anon83
IMPISPScalerMode	imp_isp.h	/^} IMPISPScalerMode;$/;"	t	typeref:enum:__anon82
IMPISPSensorFps	imp_isp.h	/^} IMPISPSensorFps;$/;"	t	typeref:struct:__anon13
IMPISPSensorRegister	imp_isp.h	/^} IMPISPSensorRegister;$/;"	t	typeref:struct:__anon11
IMPISPStatisConfig	imp_isp.h	/^} IMPISPStatisConfig;$/;"	t	typeref:struct:__anon38
IMPISPStatisZone	imp_isp.h	/^}  __attribute__((packed, aligned(1))) IMPISPStatisZone;$/;"	t	typeref:struct:__anon41
IMPISPTuningOpsMode	imp_isp.h	/^} IMPISPTuningOpsMode;$/;"	t	typeref:enum:__anon1
IMPISPTuningOpsType	imp_isp.h	/^} IMPISPTuningOpsType;$/;"	t	typeref:enum:__anon2
IMPISPWBAttr	imp_isp.h	/^} IMPISPWBAttr;$/;"	t	typeref:struct:isp_core_wb_attr
IMPISPWaitFrameAttr	imp_isp.h	/^} IMPISPWaitFrameAttr;$/;"	t	typeref:struct:__anon15
IMPISPWdrOutputMode	imp_isp.h	/^} IMPISPWdrOutputMode;$/;"	t	typeref:enum:__anon79
IMPISPWeight	imp_isp.h	/^} IMPISPWeight;$/;"	t	typeref:struct:__anon39
IMPISP_AE_NOTIFY_FPS_CHANGE	imp_isp.h	/^	IMPISP_AE_NOTIFY_FPS_CHANGE,						\/**< 帧率变更 *\/$/;"	e	enum:__anon71
IMPISP_ANTIFLICKER_AUTO_MODE	imp_isp.h	/^	IMPISP_ANTIFLICKER_AUTO_MODE,           \/**< 使能ISP抗闪频功能的自动模式，最小曝光可以达到sensor曝光的最小值 *\/$/;"	e	enum:__anon16
IMPISP_ANTIFLICKER_BUTT	imp_isp.h	/^	IMPISP_ANTIFLICKER_BUTT,                \/**< 用于判断参数的有效性，参数大小必须小于这个值 *\/$/;"	e	enum:__anon16
IMPISP_ANTIFLICKER_DISABLE_MODE	imp_isp.h	/^	IMPISP_ANTIFLICKER_DISABLE_MODE,	\/**< 不使能ISP抗闪频功能 *\/$/;"	e	enum:__anon16
IMPISP_ANTIFLICKER_NORMAL_MODE	imp_isp.h	/^	IMPISP_ANTIFLICKER_NORMAL_MODE,         \/**< 使能ISP抗闪频功能的正常模式，即曝光最小值为第一个step，不能达到sensor的最小值 *\/$/;"	e	enum:__anon16
IMPISP_AWB_NOTIFY_MODE_CHANGE	imp_isp.h	/^	IMPISP_AWB_NOTIFY_MODE_CHANGE,           \/**< 当前AWB模式变化 *\/$/;"	e	enum:__anon76
IMPISP_FLIP_HV_MODE	imp_isp.h	/^	IMPISP_FLIP_HV_MODE,			\/**< 镜像翻转模式 *\/$/;"	e	enum:__anon18
IMPISP_FLIP_H_MODE	imp_isp.h	/^	IMPISP_FLIP_H_MODE,				\/**< 镜像模式 *\/$/;"	e	enum:__anon18
IMPISP_FLIP_MODE_BUTT	imp_isp.h	/^	IMPISP_FLIP_MODE_BUTT,          \/**< 用于判断参数的有效性，参数大小必须小于这个值 *\/$/;"	e	enum:__anon18
IMPISP_FLIP_NORMAL_MODE	imp_isp.h	/^	IMPISP_FLIP_NORMAL_MODE = 0,	\/**< 正常模式 *\/$/;"	e	enum:__anon18
IMPISP_FLIP_V_MODE	imp_isp.h	/^	IMPISP_FLIP_V_MODE,				\/**< 翻转模式 *\/$/;"	e	enum:__anon18
IMPISP_IRQ_FD	imp_isp.h	/^	IMPISP_IRQ_FD = 0,	\/**< 帧结束 *\/$/;"	e	enum:__anon14
IMPISP_IRQ_FS	imp_isp.h	/^	IMPISP_IRQ_FS = 1,	\/**< 帧开始 *\/$/;"	e	enum:__anon14
IMPISP_MASK_TYPE	imp_isp.h	/^} IMPISP_MASK_TYPE;$/;"	t	typeref:enum:__anon55
IMPISP_MASK_TYPE_RGB	imp_isp.h	/^        IMPISP_MASK_TYPE_RGB = 0, \/**< RGB *\/$/;"	e	enum:__anon55
IMPISP_MASK_TYPE_YUV	imp_isp.h	/^        IMPISP_MASK_TYPE_YUV = 1, \/**< YUV *\/$/;"	e	enum:__anon55
IMPISP_RUNNING_MODE_BUTT	imp_isp.h	/^	IMPISP_RUNNING_MODE_BUTT,           \/**< 用于判断参数的有效性，参数大小必须小于这个值 *\/$/;"	e	enum:__anon20
IMPISP_RUNNING_MODE_CUSTOM	imp_isp.h	/^	IMPISP_RUNNING_MODE_CUSTOM = 2,     \/**< 定制模式 *\/$/;"	e	enum:__anon20
IMPISP_RUNNING_MODE_DAY	imp_isp.h	/^	IMPISP_RUNNING_MODE_DAY = 0,        \/**< 正常模式 *\/$/;"	e	enum:__anon20
IMPISP_RUNNING_MODE_NIGHT	imp_isp.h	/^	IMPISP_RUNNING_MODE_NIGHT = 1,      \/**< 夜视模式 *\/$/;"	e	enum:__anon20
IMPISP_SCALER_BUTT	imp_isp.h	/^        IMPISP_SCALER_BUTT,$/;"	e	enum:__anon82
IMPISP_SCALER_FITTING_CRUVE	imp_isp.h	/^        IMPISP_SCALER_FITTING_CRUVE,$/;"	e	enum:__anon82
IMPISP_SCALER_FIXED_WEIGHT	imp_isp.h	/^        IMPISP_SCALER_FIXED_WEIGHT,$/;"	e	enum:__anon82
IMPISP_SENSOR_MCLK0	imp_isp.h	/^	IMPISP_SENSOR_MCLK0 = 0,	\/**< MCLK0时钟源 *\/$/;"	e	enum:__anon8
IMPISP_SENSOR_MCLK1	imp_isp.h	/^	IMPISP_SENSOR_MCLK1 = 1,	\/**< MCLK1时钟源 *\/$/;"	e	enum:__anon8
IMPISP_SENSOR_MCLK2	imp_isp.h	/^	IMPISP_SENSOR_MCLK2 = 2,	\/**< MCLK2时钟源 *\/$/;"	e	enum:__anon8
IMPISP_SENSOR_MCLK_BUTT	imp_isp.h	/^	IMPISP_SENSOR_MCLK_BUTT = 3,	\/**< 用于判断参数有效性的值，必须小于此值 *\/$/;"	e	enum:__anon8
IMPISP_SENSOR_VI_BUTT	imp_isp.h	/^	IMPISP_SENSOR_VI_BUTT = 3,	\/**< 用于判断参数有效性的值，必须小于此值 *\/$/;"	e	enum:__anon7
IMPISP_SENSOR_VI_DVP	imp_isp.h	/^	IMPISP_SENSOR_VI_DVP = 2,	\/**< DVP接口 *\/$/;"	e	enum:__anon7
IMPISP_SENSOR_VI_MIPI_CSI0	imp_isp.h	/^	IMPISP_SENSOR_VI_MIPI_CSI0 = 0,	\/**< MIPI CSI 接口 *\/$/;"	e	enum:__anon7
IMPISP_TUNING_OPS_MODE_BUTT	imp_isp.h	/^	IMPISP_TUNING_OPS_MODE_BUTT,			\/**< 用于判断参数的有效性，参数大小必须小于这个值 *\/$/;"	e	enum:__anon1
IMPISP_TUNING_OPS_MODE_DISABLE	imp_isp.h	/^	IMPISP_TUNING_OPS_MODE_DISABLE,			\/**< 不使能该模块功能 *\/$/;"	e	enum:__anon1
IMPISP_TUNING_OPS_MODE_ENABLE	imp_isp.h	/^	IMPISP_TUNING_OPS_MODE_ENABLE,			\/**< 使能该模块功能 *\/$/;"	e	enum:__anon1
IMPISP_TUNING_OPS_TYPE_AUTO	imp_isp.h	/^	IMPISP_TUNING_OPS_TYPE_AUTO,			\/**< 该模块的操作为自动模式 *\/$/;"	e	enum:__anon2
IMPISP_TUNING_OPS_TYPE_BUTT	imp_isp.h	/^	IMPISP_TUNING_OPS_TYPE_BUTT,			\/**< 用于判断参数的有效性，参数大小必须小于这个值 *\/$/;"	e	enum:__anon2
IMPISP_TUNING_OPS_TYPE_MANUAL	imp_isp.h	/^	IMPISP_TUNING_OPS_TYPE_MANUAL,			\/**< 该模块的操作为手动模式 *\/$/;"	e	enum:__anon2
IMPISP_WDR_OUTPUT_MODE_BUTT	imp_isp.h	/^        IMPISP_WDR_OUTPUT_MODE_BUTT,		\/**< 用于判断参数的有效性，参数大小必须小于这个值 *\/$/;"	e	enum:__anon79
IMPISP_WDR_OUTPUT_MODE_FUS_FRAME	imp_isp.h	/^        IMPISP_WDR_OUTPUT_MODE_FUS_FRAME,	\/**< 混合模式 *\/$/;"	e	enum:__anon79
IMPISP_WDR_OUTPUT_MODE_LONG_FRAME	imp_isp.h	/^        IMPISP_WDR_OUTPUT_MODE_LONG_FRAME,	\/**< 长帧模式 *\/$/;"	e	enum:__anon79
IMPISP_WDR_OUTPUT_MODE_SHORT_FRAME	imp_isp.h	/^        IMPISP_WDR_OUTPUT_MODE_SHORT_FRAME,	\/**< 短帧模式 *\/$/;"	e	enum:__anon79
IMPIVSInterface	imp_ivs.h	/^struct IMPIVSInterface {$/;"	s
IMPIVSInterface	imp_ivs.h	/^typedef struct IMPIVSInterface IMPIVSInterface;$/;"	t	typeref:struct:IMPIVSInterface
IMPIVSInterface::exit	imp_ivs.h	/^	void (*exit)(IMPIVSInterface *inf);								\/**< 注销函数 *\/$/;"	m	struct:IMPIVSInterface	access:public
IMPIVSInterface::flushFrame	imp_ivs.h	/^	int	 (*flushFrame)(IMPIVSInterface *inf);						\/**< 释放由外部通过processAsync输入给算法后被缓存的所有frame *\/$/;"	m	struct:IMPIVSInterface	access:public
IMPIVSInterface::getParam	imp_ivs.h	/^	int	 (*getParam)(IMPIVSInterface *inf, void *param);			\/**< 获得算法参数 *\/$/;"	m	struct:IMPIVSInterface	access:public
IMPIVSInterface::getResult	imp_ivs.h	/^	int  (*getResult)(IMPIVSInterface *inf, void **result);			\/**< 获取结果资源 *\/$/;"	m	struct:IMPIVSInterface	access:public
IMPIVSInterface::init	imp_ivs.h	/^	int  (*init)(IMPIVSInterface *inf);								\/**< 初始化函数 *\/$/;"	m	struct:IMPIVSInterface	access:public
IMPIVSInterface::param	imp_ivs.h	/^	void  *param;													\/**< 输入参数 *\/$/;"	m	struct:IMPIVSInterface	access:public
IMPIVSInterface::paramSize	imp_ivs.h	/^	int   paramSize;												\/**< 参数空间大小 *\/$/;"	m	struct:IMPIVSInterface	access:public
IMPIVSInterface::pixfmt	imp_ivs.h	/^	IMPPixelFormat pixfmt;											\/**< 算法需要数据格式 *\/$/;"	m	struct:IMPIVSInterface	access:public
IMPIVSInterface::preProcessSync	imp_ivs.h	/^	int  (*preProcessSync)(IMPIVSInterface *inf, IMPFrameInfo *frame);\/**< 预处理函数，不对传入此函数的frame额外加锁，故无需free frame，返回值：>=0 正确，<0：错误 *\/$/;"	m	struct:IMPIVSInterface	access:public
IMPIVSInterface::priv	imp_ivs.h	/^	void *priv;														\/**< 私有变量 *\/$/;"	m	struct:IMPIVSInterface	access:public
IMPIVSInterface::processAsync	imp_ivs.h	/^	int  (*processAsync)(IMPIVSInterface *inf, IMPFrameInfo *frame);\/**< 处理函数, SDK IVS 模块对传入此函数的frame 额外加了锁，故此函数必须在该frame使用完毕后尽快使用free_data函数解锁; 此函数是必须实现的函数,算法结果由此函数产生;返回值:0->实际检测正常返回,1->跳帧检测正常返回,-1->错误 *\/$/;"	m	struct:IMPIVSInterface	access:public
IMPIVSInterface::releaseResult	imp_ivs.h	/^	int  (*releaseResult)(IMPIVSInterface *inf, void *result);		\/**< 释放结果资源 *\/$/;"	m	struct:IMPIVSInterface	access:public
IMPIVSInterface::setParam	imp_ivs.h	/^	int	 (*setParam)(IMPIVSInterface *inf, void *param);			\/**< 设置算法参数 *\/$/;"	m	struct:IMPIVSInterface	access:public
IMPIpuColour	imp_osd.h	/^}IMPIpuColour;$/;"	t	typeref:enum:__anon92
IMPIspOsdAttrAsm	imp_isp.h	/^}IMPIspOsdAttrAsm;$/;"	t	typeref:struct:__anon87
IMPIspOsdRngStat	imp_isp.h	/^}IMPIspOsdRngStat;$/;"	t	typeref:enum:__anon84
IMPLine	imp_common.h	/^}IMPLine;$/;"	t	typeref:struct:__anon173
IMPOSDFontAttrData	imp_osd.h	/^} IMPOSDFontAttrData;$/;"	t	typeref:struct:__anon99
IMPOSDFontSizeAttrData	imp_osd.h	/^} IMPOSDFontSizeAttrData;$/;"	t	typeref:struct:__anon98
IMPOSDGrpRgnAttr	imp_osd.h	/^} IMPOSDGrpRgnAttr;$/;"	t	typeref:struct:__anon103
IMPOSDIspDraw	imp_osd.h	/^}IMPOSDIspDraw;$/;"	t	typeref:struct:__anon100
IMPOSDMosaicAttr	imp_osd.h	/^} IMPOSDMosaicAttr;$/;"	t	typeref:struct:mosaicPointAttr
IMPOSDRgnAttr	imp_osd.h	/^} IMPOSDRgnAttr;$/;"	t	typeref:struct:__anon101
IMPOSDRgnAttrData	imp_osd.h	/^} IMPOSDRgnAttrData;$/;"	t	typeref:union:__anon97
IMPOSDRgnCreateStat	imp_osd.h	/^}IMPOSDRgnCreateStat;$/;"	t	typeref:struct:stRgnCreateStat
IMPOSDRgnRegisterStat	imp_osd.h	/^}IMPOSDRgnRegisterStat;$/;"	t	typeref:struct:stRgnRigsterStat
IMPOSDRgnTimestamp	imp_osd.h	/^} IMPOSDRgnTimestamp;$/;"	t	typeref:struct:__anon102
IMPOsdColour	imp_osd.h	/^}IMPOsdColour;$/;"	t	typeref:enum:__anon91
IMPOsdRgnType	imp_osd.h	/^} IMPOsdRgnType;$/;"	t	typeref:enum:__anon93
IMPPayloadType	imp_common.h	/^} IMPPayloadType;$/;"	t	typeref:enum:__anon169
IMPPixelFormat	imp_common.h	/^} IMPPixelFormat;$/;"	t	typeref:enum:__anon170
IMPPixfmtToString	imp_utils.h	/^char *IMPPixfmtToString(IMPPixelFormat pixfmt);$/;"	p	signature:(IMPPixelFormat pixfmt)
IMPPoint	imp_common.h	/^} IMPPoint;$/;"	t	typeref:struct:__anon171
IMPRect	imp_common.h	/^} IMPRect;$/;"	t	typeref:struct:__anon172
IMPRgnHandle	imp_osd.h	/^typedef int IMPRgnHandle;$/;"	t
IMPSPIInfo	imp_isp.h	/^} IMPSPIInfo;$/;"	t	typeref:struct:__anon6
IMPSensorControlBusType	imp_isp.h	/^} IMPSensorControlBusType;$/;"	t	typeref:enum:__anon4
IMPSensorInfo	imp_isp.h	/^} IMPSensorInfo;$/;"	t	typeref:struct:__anon9
IMPSensorMclk	imp_isp.h	/^} IMPSensorMclk;$/;"	t	typeref:enum:__anon8
IMPSensorVinType	imp_isp.h	/^} IMPSensorVinType;$/;"	t	typeref:enum:__anon7
IMPVI_BUTT	imp_isp.h	/^	IMPVI_BUTT,                \/**< 用于判断参数有效性的值，必须小于此值 *\/$/;"	e	enum:__anon3
IMPVI_MAIN	imp_isp.h	/^	IMPVI_MAIN = 0,            \/**< 主摄像头 *\/$/;"	e	enum:__anon3
IMPVI_NUM	imp_isp.h	/^} IMPVI_NUM;$/;"	t	typeref:enum:__anon3
IMPVI_SEC	imp_isp.h	/^	IMPVI_SEC = 1,             \/**< 次摄像头(暂不支持) *\/$/;"	e	enum:__anon3
IMPVI_THR	imp_isp.h	/^	IMPVI_THR = 2,             \/**< 第三摄像头(暂不支持) *\/$/;"	e	enum:__anon3
IMPVersion	imp_system.h	/^} IMPVersion;$/;"	t	typeref:struct:__anon160
IMP_ADEC_ClearChnBuf	imp_audio.h	/^ int IMP_ADEC_ClearChnBuf(int adChn);$/;"	p	signature:(int adChn)
IMP_ADEC_CreateChn	imp_audio.h	/^ int IMP_ADEC_CreateChn(int adChn, IMPAudioDecChnAttr *attr);$/;"	p	signature:(int adChn, IMPAudioDecChnAttr *attr)
IMP_ADEC_DestroyChn	imp_audio.h	/^ int IMP_ADEC_DestroyChn(int adChn);$/;"	p	signature:(int adChn)
IMP_ADEC_GetStream	imp_audio.h	/^int IMP_ADEC_GetStream(int adChn, IMPAudioStream *stream ,IMPBlock block);$/;"	p	signature:(int adChn, IMPAudioStream *stream ,IMPBlock block)
IMP_ADEC_PollingStream	imp_audio.h	/^int IMP_ADEC_PollingStream(int AdChn, unsigned int timeout_ms);$/;"	p	signature:(int AdChn, unsigned int timeout_ms)
IMP_ADEC_RegisterDecoder	imp_audio.h	/^ int IMP_ADEC_RegisterDecoder(int *handle, IMPAudioDecDecoder *decoder);$/;"	p	signature:(int *handle, IMPAudioDecDecoder *decoder)
IMP_ADEC_ReleaseStream	imp_audio.h	/^int IMP_ADEC_ReleaseStream(int adChn,IMPAudioStream *stream);$/;"	p	signature:(int adChn,IMPAudioStream *stream)
IMP_ADEC_SendStream	imp_audio.h	/^ int IMP_ADEC_SendStream(int adChn, IMPAudioStream *stream, IMPBlock block);$/;"	p	signature:(int adChn, IMPAudioStream *stream, IMPBlock block)
IMP_ADEC_UnRegisterDecoder	imp_audio.h	/^ int IMP_ADEC_UnRegisterDecoder(int *handle);$/;"	p	signature:(int *handle)
IMP_AENC_CreateChn	imp_audio.h	/^ int IMP_AENC_CreateChn(int aeChn, IMPAudioEncChnAttr *attr);$/;"	p	signature:(int aeChn, IMPAudioEncChnAttr *attr)
IMP_AENC_DestroyChn	imp_audio.h	/^ int IMP_AENC_DestroyChn(int aeChn);$/;"	p	signature:(int aeChn)
IMP_AENC_GetStream	imp_audio.h	/^ int IMP_AENC_GetStream(int aeChn, IMPAudioStream *stream ,IMPBlock block);$/;"	p	signature:(int aeChn, IMPAudioStream *stream ,IMPBlock block)
IMP_AENC_PollingStream	imp_audio.h	/^int IMP_AENC_PollingStream(int AeChn, unsigned int timeout_ms);$/;"	p	signature:(int AeChn, unsigned int timeout_ms)
IMP_AENC_RegisterEncoder	imp_audio.h	/^ int IMP_AENC_RegisterEncoder(int *handle, IMPAudioEncEncoder *encoder);$/;"	p	signature:(int *handle, IMPAudioEncEncoder *encoder)
IMP_AENC_ReleaseStream	imp_audio.h	/^ int IMP_AENC_ReleaseStream(int aeChn,IMPAudioStream *stream);$/;"	p	signature:(int aeChn,IMPAudioStream *stream)
IMP_AENC_SendFrame	imp_audio.h	/^ int IMP_AENC_SendFrame(int aeChn, IMPAudioFrame *frm);$/;"	p	signature:(int aeChn, IMPAudioFrame *frm)
IMP_AENC_UnRegisterEncoder	imp_audio.h	/^ int IMP_AENC_UnRegisterEncoder(int *handle);$/;"	p	signature:(int *handle)
IMP_AI_Disable	imp_audio.h	/^int IMP_AI_Disable(int audioDevId);$/;"	p	signature:(int audioDevId)
IMP_AI_DisableAec	imp_audio.h	/^int IMP_AI_DisableAec(int aiDevId, int aiChn);$/;"	p	signature:(int aiDevId, int aiChn)
IMP_AI_DisableAecRefFrame	imp_audio.h	/^ int IMP_AI_DisableAecRefFrame(int audioDevId, int aiChn, int audioAoDevId, int aoChn);$/;"	p	signature:(int audioDevId, int aiChn, int audioAoDevId, int aoChn)
IMP_AI_DisableAgc	imp_audio.h	/^int IMP_AI_DisableAgc(void);$/;"	p	signature:(void)
IMP_AI_DisableAlgo	imp_audio.h	/^int IMP_AI_DisableAlgo(int audioDevId, int aiChn);$/;"	p	signature:(int audioDevId, int aiChn)
IMP_AI_DisableChn	imp_audio.h	/^int IMP_AI_DisableChn(int audioDevId, int aiChn);$/;"	p	signature:(int audioDevId, int aiChn)
IMP_AI_DisableHpf	imp_audio.h	/^int IMP_AI_DisableHpf(void);$/;"	p	signature:(void)
IMP_AI_DisableNs	imp_audio.h	/^int IMP_AI_DisableNs(void);$/;"	p	signature:(void)
IMP_AI_Enable	imp_audio.h	/^int IMP_AI_Enable(int audioDevId);$/;"	p	signature:(int audioDevId)
IMP_AI_EnableAec	imp_audio.h	/^int IMP_AI_EnableAec(int aiDevId, int aiChn, int aoDevId, int aoChn);$/;"	p	signature:(int aiDevId, int aiChn, int aoDevId, int aoChn)
IMP_AI_EnableAecRefFrame	imp_audio.h	/^ int IMP_AI_EnableAecRefFrame(int audioDevId, int aiChn, int audioAoDevId, int aoChn);$/;"	p	signature:(int audioDevId, int aiChn, int audioAoDevId, int aoChn)
IMP_AI_EnableAgc	imp_audio.h	/^int IMP_AI_EnableAgc(IMPAudioIOAttr *attr, IMPAudioAgcConfig agcConfig);$/;"	p	signature:(IMPAudioIOAttr *attr, IMPAudioAgcConfig agcConfig)
IMP_AI_EnableAlgo	imp_audio.h	/^int IMP_AI_EnableAlgo(int audioDevId, int aiChn);$/;"	p	signature:(int audioDevId, int aiChn)
IMP_AI_EnableChn	imp_audio.h	/^int IMP_AI_EnableChn(int audioDevId, int aiChn);$/;"	p	signature:(int audioDevId, int aiChn)
IMP_AI_EnableHpf	imp_audio.h	/^int IMP_AI_EnableHpf(IMPAudioIOAttr *attr);$/;"	p	signature:(IMPAudioIOAttr *attr)
IMP_AI_EnableNs	imp_audio.h	/^int IMP_AI_EnableNs(IMPAudioIOAttr *attr, int mode);$/;"	p	signature:(IMPAudioIOAttr *attr, int mode)
IMP_AI_GetChnParam	imp_audio.h	/^int IMP_AI_GetChnParam(int audioDevId, int aiChn, IMPAudioIChnParam *chnParam);$/;"	p	signature:(int audioDevId, int aiChn, IMPAudioIChnParam *chnParam)
IMP_AI_GetDigitalGain	imp_audio.h	/^ int IMP_AI_GetDigitalGain(int audioDevId, int aiChn,int *dgain);$/;"	p	signature:(int audioDevId, int aiChn,int *dgain)
IMP_AI_GetFrame	imp_audio.h	/^int IMP_AI_GetFrame(int audioDevId, int aiChn, IMPAudioFrame *frm, IMPBlock block);$/;"	p	signature:(int audioDevId, int aiChn, IMPAudioFrame *frm, IMPBlock block)
IMP_AI_GetFrameAndRef	imp_audio.h	/^ int IMP_AI_GetFrameAndRef(int audioDevId, int aiChn, IMPAudioFrame *frm, IMPAudioFrame *ref, IMPBlock block);$/;"	p	signature:(int audioDevId, int aiChn, IMPAudioFrame *frm, IMPAudioFrame *ref, IMPBlock block)
IMP_AI_GetGain	imp_audio.h	/^ int IMP_AI_GetGain(int audioDevId, int aiChn, int *aigain);$/;"	p	signature:(int audioDevId, int aiChn, int *aigain)
IMP_AI_GetPubAttr	imp_audio.h	/^int IMP_AI_GetPubAttr(int audioDevId, IMPAudioIOAttr *attr);$/;"	p	signature:(int audioDevId, IMPAudioIOAttr *attr)
IMP_AI_GetVol	imp_audio.h	/^ int IMP_AI_GetVol(int audioDevId, int aiChn, int *vol);$/;"	p	signature:(int audioDevId, int aiChn, int *vol)
IMP_AI_PollingFrame	imp_audio.h	/^int IMP_AI_PollingFrame(int audioDevId, int aiChn, unsigned int timeout_ms);$/;"	p	signature:(int audioDevId, int aiChn, unsigned int timeout_ms)
IMP_AI_ReleaseFrame	imp_audio.h	/^int IMP_AI_ReleaseFrame(int audioDevId, int aiChn, IMPAudioFrame *frm);$/;"	p	signature:(int audioDevId, int aiChn, IMPAudioFrame *frm)
IMP_AI_SetChnParam	imp_audio.h	/^int IMP_AI_SetChnParam(int audioDevId, int aiChn, IMPAudioIChnParam *chnParam);$/;"	p	signature:(int audioDevId, int aiChn, IMPAudioIChnParam *chnParam)
IMP_AI_SetDigitalGain	imp_audio.h	/^ int IMP_AI_SetDigitalGain(int audioDevId, int aiChn, int dgain);$/;"	p	signature:(int audioDevId, int aiChn, int dgain)
IMP_AI_SetGain	imp_audio.h	/^ int IMP_AI_SetGain(int audioDevId, int aiChn, int aigain);$/;"	p	signature:(int audioDevId, int aiChn, int aigain)
IMP_AI_SetHpfCoFrequency	imp_audio.h	/^int IMP_AI_SetHpfCoFrequency(int cofrequency);$/;"	p	signature:(int cofrequency)
IMP_AI_SetPubAttr	imp_audio.h	/^int IMP_AI_SetPubAttr(int audioDevId, IMPAudioIOAttr *attr);$/;"	p	signature:(int audioDevId, IMPAudioIOAttr *attr)
IMP_AI_SetVol	imp_audio.h	/^ int IMP_AI_SetVol(int audioDevId, int aiChn, int aiVol);$/;"	p	signature:(int audioDevId, int aiChn, int aiVol)
IMP_AI_SetVolMute	imp_audio.h	/^ int IMP_AI_SetVolMute(int audioDevId, int aiChn, int mute);$/;"	p	signature:(int audioDevId, int aiChn, int mute)
IMP_AO_CacheSwitch	imp_audio.h	/^ int IMP_AO_CacheSwitch(int audioDevId, int aoChn, int cache_en);$/;"	p	signature:(int audioDevId, int aoChn, int cache_en)
IMP_AO_ClearChnBuf	imp_audio.h	/^int IMP_AO_ClearChnBuf(int audioDevId, int aoChn);$/;"	p	signature:(int audioDevId, int aoChn)
IMP_AO_Disable	imp_audio.h	/^int IMP_AO_Disable(int audioDevId);$/;"	p	signature:(int audioDevId)
IMP_AO_DisableAgc	imp_audio.h	/^int IMP_AO_DisableAgc(void);$/;"	p	signature:(void)
IMP_AO_DisableAlgo	imp_audio.h	/^int IMP_AO_DisableAlgo(int audioDevId, int aoChn);$/;"	p	signature:(int audioDevId, int aoChn)
IMP_AO_DisableChn	imp_audio.h	/^int IMP_AO_DisableChn(int audioDevId, int aoChn);$/;"	p	signature:(int audioDevId, int aoChn)
IMP_AO_DisableHpf	imp_audio.h	/^int IMP_AO_DisableHpf(void);$/;"	p	signature:(void)
IMP_AO_Enable	imp_audio.h	/^int IMP_AO_Enable(int audioDevId);$/;"	p	signature:(int audioDevId)
IMP_AO_EnableAgc	imp_audio.h	/^int IMP_AO_EnableAgc(IMPAudioIOAttr *attr, IMPAudioAgcConfig agcConfig);$/;"	p	signature:(IMPAudioIOAttr *attr, IMPAudioAgcConfig agcConfig)
IMP_AO_EnableAlgo	imp_audio.h	/^int IMP_AO_EnableAlgo(int audioDevId, int aoChn);$/;"	p	signature:(int audioDevId, int aoChn)
IMP_AO_EnableChn	imp_audio.h	/^int IMP_AO_EnableChn(int audioDevId, int aoChn);$/;"	p	signature:(int audioDevId, int aoChn)
IMP_AO_EnableHpf	imp_audio.h	/^int IMP_AO_EnableHpf(IMPAudioIOAttr *attr);$/;"	p	signature:(IMPAudioIOAttr *attr)
IMP_AO_FlushChnBuf	imp_audio.h	/^ int IMP_AO_FlushChnBuf(int audioDevId, int aoChn);$/;"	p	signature:(int audioDevId, int aoChn)
IMP_AO_GetDigitalGain	imp_audio.h	/^ int IMP_AO_GetDigitalGain(int audioDevId, int aoChn, int *dgain);$/;"	p	signature:(int audioDevId, int aoChn, int *dgain)
IMP_AO_GetGain	imp_audio.h	/^ int IMP_AO_GetGain(int audioDevId, int aoChn, int *aoGain);$/;"	p	signature:(int audioDevId, int aoChn, int *aoGain)
IMP_AO_GetPubAttr	imp_audio.h	/^int IMP_AO_GetPubAttr(int audioDevId, IMPAudioIOAttr *attr);$/;"	p	signature:(int audioDevId, IMPAudioIOAttr *attr)
IMP_AO_GetVol	imp_audio.h	/^ int IMP_AO_GetVol(int audioDevId, int aoChn, int *vol);$/;"	p	signature:(int audioDevId, int aoChn, int *vol)
IMP_AO_PauseChn	imp_audio.h	/^int IMP_AO_PauseChn(int audioDevId, int aoChn);$/;"	p	signature:(int audioDevId, int aoChn)
IMP_AO_QueryChnStat	imp_audio.h	/^int IMP_AO_QueryChnStat(int audioDevId, int aoChn, IMPAudioOChnState *status);$/;"	p	signature:(int audioDevId, int aoChn, IMPAudioOChnState *status)
IMP_AO_ResumeChn	imp_audio.h	/^int IMP_AO_ResumeChn(int audioDevId, int aoChn);$/;"	p	signature:(int audioDevId, int aoChn)
IMP_AO_SendFrame	imp_audio.h	/^int IMP_AO_SendFrame(int audioDevId, int aoChn, IMPAudioFrame *data, IMPBlock block);$/;"	p	signature:(int audioDevId, int aoChn, IMPAudioFrame *data, IMPBlock block)
IMP_AO_SetDigitalGain	imp_audio.h	/^ int IMP_AO_SetDigitalGain(int audioDevId, int aoChn, int dgain);$/;"	p	signature:(int audioDevId, int aoChn, int dgain)
IMP_AO_SetGain	imp_audio.h	/^ int IMP_AO_SetGain(int audioDevId, int aoChn, int aoGain);$/;"	p	signature:(int audioDevId, int aoChn, int aoGain)
IMP_AO_SetHpfCoFrequency	imp_audio.h	/^int IMP_AO_SetHpfCoFrequency(int cofrequency);$/;"	p	signature:(int cofrequency)
IMP_AO_SetPubAttr	imp_audio.h	/^int IMP_AO_SetPubAttr(int audioDevId, IMPAudioIOAttr *attr);$/;"	p	signature:(int audioDevId, IMPAudioIOAttr *attr)
IMP_AO_SetVol	imp_audio.h	/^ int IMP_AO_SetVol(int audioDevId, int aoChn, int aoVol);$/;"	p	signature:(int audioDevId, int aoChn, int aoVol)
IMP_AO_SetVolMute	imp_audio.h	/^ int IMP_AO_SetVolMute(int audioDevId, int aoChn, int mute);$/;"	p	signature:(int audioDevId, int aoChn, int mute)
IMP_AO_Soft_Mute	imp_audio.h	/^ int IMP_AO_Soft_Mute(int audioDevId, int aoChn);$/;"	p	signature:(int audioDevId, int aoChn)
IMP_AO_Soft_UNMute	imp_audio.h	/^ int IMP_AO_Soft_UNMute(int audioDevId, int aoChn);$/;"	p	signature:(int audioDevId, int aoChn)
IMP_DMIC_Disable	imp_dmic.h	/^int IMP_DMIC_Disable(int dmicDevId);$/;"	p	signature:(int dmicDevId)
IMP_DMIC_DisableAec	imp_dmic.h	/^int IMP_DMIC_DisableAec(int dmicDevId, int dmicChnId);$/;"	p	signature:(int dmicDevId, int dmicChnId)
IMP_DMIC_DisableAecRefFrame	imp_dmic.h	/^int IMP_DMIC_DisableAecRefFrame(int dmicDevId, int dmicChnId, int audioAoDevId, int aoChn);$/;"	p	signature:(int dmicDevId, int dmicChnId, int audioAoDevId, int aoChn)
IMP_DMIC_DisableChn	imp_dmic.h	/^int IMP_DMIC_DisableChn(int dmicDevId, int dmicChnId);$/;"	p	signature:(int dmicDevId, int dmicChnId)
IMP_DMIC_Enable	imp_dmic.h	/^int IMP_DMIC_Enable(int dmicDevId);$/;"	p	signature:(int dmicDevId)
IMP_DMIC_EnableAec	imp_dmic.h	/^int IMP_DMIC_EnableAec(int dmicDevId, int dmicChnId, int aoDevId, int aoChId);$/;"	p	signature:(int dmicDevId, int dmicChnId, int aoDevId, int aoChId)
IMP_DMIC_EnableAecRefFrame	imp_dmic.h	/^int IMP_DMIC_EnableAecRefFrame(int dmicDevId, int dmicChnId, int audioAoDevId, int aoChn);$/;"	p	signature:(int dmicDevId, int dmicChnId, int audioAoDevId, int aoChn)
IMP_DMIC_EnableChn	imp_dmic.h	/^int IMP_DMIC_EnableChn(int dmicDevId, int dmicChnId);$/;"	p	signature:(int dmicDevId, int dmicChnId)
IMP_DMIC_GetChnParam	imp_dmic.h	/^int IMP_DMIC_GetChnParam(int dmicDevId, int dmicChnId, IMPDmicChnParam *chnParam);$/;"	p	signature:(int dmicDevId, int dmicChnId, IMPDmicChnParam *chnParam)
IMP_DMIC_GetFrame	imp_dmic.h	/^int IMP_DMIC_GetFrame(int dmicDevId, int dmicChnId, IMPDmicChnFrame *chnFrm, IMPBlock block);$/;"	p	signature:(int dmicDevId, int dmicChnId, IMPDmicChnFrame *chnFrm, IMPBlock block)
IMP_DMIC_GetFrameAndRef	imp_dmic.h	/^int IMP_DMIC_GetFrameAndRef(int dmicDevId, int dmicChnId, IMPDmicChnFrame *chnFrm, IMPDmicFrame *ref, IMPBlock block);$/;"	p	signature:(int dmicDevId, int dmicChnId, IMPDmicChnFrame *chnFrm, IMPDmicFrame *ref, IMPBlock block)
IMP_DMIC_GetGain	imp_dmic.h	/^int IMP_DMIC_GetGain(int dmicDevId, int dmicChnId, int *dmicGain);$/;"	p	signature:(int dmicDevId, int dmicChnId, int *dmicGain)
IMP_DMIC_GetPubAttr	imp_dmic.h	/^int IMP_DMIC_GetPubAttr(int dmicDevId, IMPDmicAttr *attr);$/;"	p	signature:(int dmicDevId, IMPDmicAttr *attr)
IMP_DMIC_GetVol	imp_dmic.h	/^int IMP_DMIC_GetVol(int dmicDevId, int dmicChnId, int *dmicVol);$/;"	p	signature:(int dmicDevId, int dmicChnId, int *dmicVol)
IMP_DMIC_PollingFrame	imp_dmic.h	/^int IMP_DMIC_PollingFrame(int dmicDevId, int dmicChnId, unsigned int timeout_ms);$/;"	p	signature:(int dmicDevId, int dmicChnId, unsigned int timeout_ms)
IMP_DMIC_ReleaseFrame	imp_dmic.h	/^int IMP_DMIC_ReleaseFrame(int dmicDevId, int dmicChnId, IMPDmicChnFrame *chnFrm);$/;"	p	signature:(int dmicDevId, int dmicChnId, IMPDmicChnFrame *chnFrm)
IMP_DMIC_SetChnParam	imp_dmic.h	/^int IMP_DMIC_SetChnParam(int dmicDevId, int dmicChnId, IMPDmicChnParam *chnParam);$/;"	p	signature:(int dmicDevId, int dmicChnId, IMPDmicChnParam *chnParam)
IMP_DMIC_SetGain	imp_dmic.h	/^int IMP_DMIC_SetGain(int dmicDevId, int dmicChnId, int dmicGain);$/;"	p	signature:(int dmicDevId, int dmicChnId, int dmicGain)
IMP_DMIC_SetPubAttr	imp_dmic.h	/^int IMP_DMIC_SetPubAttr(int dmicDevId, IMPDmicAttr *attr);$/;"	p	signature:(int dmicDevId, IMPDmicAttr *attr)
IMP_DMIC_SetUserInfo	imp_dmic.h	/^int IMP_DMIC_SetUserInfo(int dmicDevId, int aecDmicId, int need_aec);$/;"	p	signature:(int dmicDevId, int aecDmicId, int need_aec)
IMP_DMIC_SetVol	imp_dmic.h	/^int IMP_DMIC_SetVol(int dmicDevId, int dmicChnId, int dmicVol);$/;"	p	signature:(int dmicDevId, int dmicChnId, int dmicVol)
IMP_Decoder_CreateChn	imp_decoder.h	/^int IMP_Decoder_CreateChn(int decChn, const IMPDecoderCHNAttr *attr);$/;"	p	signature:(int decChn, const IMPDecoderCHNAttr *attr)
IMP_Decoder_DestroyChn	imp_decoder.h	/^int IMP_Decoder_DestroyChn(int decChn);$/;"	p	signature:(int decChn)
IMP_Decoder_GetFrame	imp_decoder.h	/^int IMP_Decoder_GetFrame(int decChn, IMPFrameInfo **frame);$/;"	p	signature:(int decChn, IMPFrameInfo **frame)
IMP_Decoder_PollingFrame	imp_decoder.h	/^int IMP_Decoder_PollingFrame(int decChn, uint32_t timeoutMsec);$/;"	p	signature:(int decChn, uint32_t timeoutMsec)
IMP_Decoder_ReleaseFrame	imp_decoder.h	/^int IMP_Decoder_ReleaseFrame(int decChn, IMPFrameInfo *frame);$/;"	p	signature:(int decChn, IMPFrameInfo *frame)
IMP_Decoder_SendStreamTimeout	imp_decoder.h	/^int IMP_Decoder_SendStreamTimeout(int decChn, IMPDecoderStream *stream, uint32_t timeoutMsec);$/;"	p	signature:(int decChn, IMPDecoderStream *stream, uint32_t timeoutMsec)
IMP_Decoder_StartRecvPic	imp_decoder.h	/^int IMP_Decoder_StartRecvPic(int decChn);$/;"	p	signature:(int decChn)
IMP_Decoder_StopRecvPic	imp_decoder.h	/^int IMP_Decoder_StopRecvPic(int decChn);$/;"	p	signature:(int decChn)
IMP_ENC_AVC_PROFILE_IDC_BASELINE	imp_encoder.h	149;"	d
IMP_ENC_AVC_PROFILE_IDC_HIGH	imp_encoder.h	151;"	d
IMP_ENC_AVC_PROFILE_IDC_MAIN	imp_encoder.h	150;"	d
IMP_ENC_GOP_CTRL_MAX_ENUM	imp_encoder.h	/^	IMP_ENC_GOP_CTRL_MAX_ENUM           = 0xff,$/;"	e	enum:__anon118
IMP_ENC_GOP_CTRL_MODE_DEFAULT	imp_encoder.h	/^	IMP_ENC_GOP_CTRL_MODE_DEFAULT       = 0x02,$/;"	e	enum:__anon118
IMP_ENC_GOP_CTRL_MODE_PYRAMIDAL	imp_encoder.h	/^	IMP_ENC_GOP_CTRL_MODE_PYRAMIDAL     = 0x04,$/;"	e	enum:__anon118
IMP_ENC_GOP_CTRL_MODE_SMARTP	imp_encoder.h	/^	IMP_ENC_GOP_CTRL_MODE_SMARTP        = 0xfe,$/;"	e	enum:__anon118
IMP_ENC_HEVC_PROFILE_IDC_MAIN	imp_encoder.h	152;"	d
IMP_ENC_OPT_ADAPT_AUTO_QP	imp_encoder.h	/^	IMP_ENC_OPT_ADAPT_AUTO_QP     = 0x00000010,$/;"	e	enum:__anon113
IMP_ENC_OPT_COMPRESS	imp_encoder.h	/^	IMP_ENC_OPT_COMPRESS          = 0x00000020,$/;"	e	enum:__anon113
IMP_ENC_OPT_CUSTOM_LDA	imp_encoder.h	/^	IMP_ENC_OPT_CUSTOM_LDA        = 0x00000004,$/;"	e	enum:__anon113
IMP_ENC_OPT_DYN_SRD	imp_encoder.h	/^	IMP_ENC_OPT_DYN_SRD           = 0x02000000,$/;"	e	enum:__anon113
IMP_ENC_OPT_ENABLE_AUTO_QP	imp_encoder.h	/^	IMP_ENC_OPT_ENABLE_AUTO_QP    = 0x00000008,$/;"	e	enum:__anon113
IMP_ENC_OPT_FIX_PREDICTOR	imp_encoder.h	/^	IMP_ENC_OPT_FIX_PREDICTOR     = 0x00000002,$/;"	e	enum:__anon113
IMP_ENC_OPT_FORCE_MV_CLIP	imp_encoder.h	/^	IMP_ENC_OPT_FORCE_MV_CLIP     = 0x00020000,$/;"	e	enum:__anon113
IMP_ENC_OPT_FORCE_MV_OUT	imp_encoder.h	/^	IMP_ENC_OPT_FORCE_MV_OUT      = 0x00000080,$/;"	e	enum:__anon113
IMP_ENC_OPT_FORCE_REC	imp_encoder.h	/^	IMP_ENC_OPT_FORCE_REC         = 0x00000040,$/;"	e	enum:__anon113
IMP_ENC_OPT_HIGH_FREQ	imp_encoder.h	/^	IMP_ENC_OPT_HIGH_FREQ         = 0x00002000,$/;"	e	enum:__anon113
IMP_ENC_OPT_LOWLAT_INT	imp_encoder.h	/^	IMP_ENC_OPT_LOWLAT_INT        = 0x00000200,$/;"	e	enum:__anon113
IMP_ENC_OPT_LOWLAT_SYNC	imp_encoder.h	/^	IMP_ENC_OPT_LOWLAT_SYNC       = 0x00000100,$/;"	e	enum:__anon113
IMP_ENC_OPT_MMA	imp_encoder.h	/^	IMP_ENC_OPT_MMA               = 0x01000000,$/;"	e	enum:__anon113
IMP_ENC_OPT_NONE	imp_encoder.h	/^	IMP_ENC_OPT_NONE              = 0x00000000,$/;"	e	enum:__anon113
IMP_ENC_OPT_QP_TAB_RELATIVE	imp_encoder.h	/^	IMP_ENC_OPT_QP_TAB_RELATIVE   = 0x00000001,$/;"	e	enum:__anon113
IMP_ENC_OPT_RDO_COST_MODE	imp_encoder.h	/^	IMP_ENC_OPT_RDO_COST_MODE     = 0x00040000,$/;"	e	enum:__anon113
IMP_ENC_OPT_SRD	imp_encoder.h	/^	IMP_ENC_OPT_SRD               = 0x00008000,$/;"	e	enum:__anon113
IMP_ENC_PIC_FORMAT_400_8BITS	imp_encoder.h	/^	IMP_ENC_PIC_FORMAT_400_8BITS = 0x0088,$/;"	e	enum:__anon112
IMP_ENC_PIC_FORMAT_420_8BITS	imp_encoder.h	/^	IMP_ENC_PIC_FORMAT_420_8BITS = 0x0188,$/;"	e	enum:__anon112
IMP_ENC_PIC_FORMAT_422_8BITS	imp_encoder.h	/^	IMP_ENC_PIC_FORMAT_422_8BITS = 0x0288,$/;"	e	enum:__anon112
IMP_ENC_PROFILE_AVC_BASELINE	imp_encoder.h	/^	IMP_ENC_PROFILE_AVC_BASELINE    = ((IMP_ENC_TYPE_AVC << 24) | (IMP_ENC_AVC_PROFILE_IDC_BASELINE)),$/;"	e	enum:__anon111
IMP_ENC_PROFILE_AVC_HIGH	imp_encoder.h	/^	IMP_ENC_PROFILE_AVC_HIGH        = ((IMP_ENC_TYPE_AVC << 24) | (IMP_ENC_AVC_PROFILE_IDC_HIGH)),$/;"	e	enum:__anon111
IMP_ENC_PROFILE_AVC_MAIN	imp_encoder.h	/^	IMP_ENC_PROFILE_AVC_MAIN        = ((IMP_ENC_TYPE_AVC << 24) | (IMP_ENC_AVC_PROFILE_IDC_MAIN)),$/;"	e	enum:__anon111
IMP_ENC_PROFILE_HEVC_MAIN	imp_encoder.h	/^	IMP_ENC_PROFILE_HEVC_MAIN       = ((IMP_ENC_TYPE_HEVC << 24) | (IMP_ENC_HEVC_PROFILE_IDC_MAIN)),$/;"	e	enum:__anon111
IMP_ENC_PROFILE_JPEG	imp_encoder.h	/^	IMP_ENC_PROFILE_JPEG            = (IMP_ENC_TYPE_JPEG << 24),$/;"	e	enum:__anon111
IMP_ENC_RC_DELAYED	imp_encoder.h	/^	IMP_ENC_RC_DELAYED                = 0x00000002,$/;"	e	enum:IMPEncoderRcOptions
IMP_ENC_RC_ENABLE_SKIP	imp_encoder.h	/^	IMP_ENC_RC_ENABLE_SKIP            = 0x00000008,$/;"	e	enum:IMPEncoderRcOptions
IMP_ENC_RC_MAX_ENUM	imp_encoder.h	/^	IMP_ENC_RC_MAX_ENUM,$/;"	e	enum:IMPEncoderRcOptions
IMP_ENC_RC_MODE_CAPPED_QUALITY	imp_encoder.h	/^	IMP_ENC_RC_MODE_CAPPED_QUALITY    = 0x8,$/;"	e	enum:__anon120
IMP_ENC_RC_MODE_CAPPED_VBR	imp_encoder.h	/^	IMP_ENC_RC_MODE_CAPPED_VBR        = 0x4,$/;"	e	enum:__anon120
IMP_ENC_RC_MODE_CBR	imp_encoder.h	/^	IMP_ENC_RC_MODE_CBR               = 0x1,$/;"	e	enum:__anon120
IMP_ENC_RC_MODE_FIXQP	imp_encoder.h	/^	IMP_ENC_RC_MODE_FIXQP             = 0x0,$/;"	e	enum:__anon120
IMP_ENC_RC_MODE_INVALID	imp_encoder.h	/^	IMP_ENC_RC_MODE_INVALID           = 0xff,$/;"	e	enum:__anon120
IMP_ENC_RC_MODE_VBR	imp_encoder.h	/^	IMP_ENC_RC_MODE_VBR               = 0x2,$/;"	e	enum:__anon120
IMP_ENC_RC_OPT_NONE	imp_encoder.h	/^	IMP_ENC_RC_OPT_NONE               = 0x00000000,$/;"	e	enum:IMPEncoderRcOptions
IMP_ENC_RC_OPT_SC_PREVENTION	imp_encoder.h	/^	IMP_ENC_RC_OPT_SC_PREVENTION      = 0x00000010,$/;"	e	enum:IMPEncoderRcOptions
IMP_ENC_RC_SCN_CHG_RES	imp_encoder.h	/^	IMP_ENC_RC_SCN_CHG_RES            = 0x00000001,$/;"	e	enum:IMPEncoderRcOptions
IMP_ENC_RC_STATIC_SCENE	imp_encoder.h	/^	IMP_ENC_RC_STATIC_SCENE           = 0x00000004,$/;"	e	enum:IMPEncoderRcOptions
IMP_ENC_SLICE_B	imp_encoder.h	/^	IMP_ENC_SLICE_B             = 0,            \/**< B Slice (can contain I, P and B blocks) *\/$/;"	e	enum:__anon107
IMP_ENC_SLICE_CONCEAL	imp_encoder.h	/^	IMP_ENC_SLICE_CONCEAL       = 6,            \/**< Conceal Slice (slice was concealed) *\/$/;"	e	enum:__anon107
IMP_ENC_SLICE_GOLDEN	imp_encoder.h	/^	IMP_ENC_SLICE_GOLDEN        = 3,            \/**< Golden Slice *\/$/;"	e	enum:__anon107
IMP_ENC_SLICE_I	imp_encoder.h	/^	IMP_ENC_SLICE_I             = 2,            \/**< I Slice (can contain I blocks) *\/$/;"	e	enum:__anon107
IMP_ENC_SLICE_MAX_ENUM	imp_encoder.h	/^	IMP_ENC_SLICE_MAX_ENUM,                     \/**< sentinel *\/$/;"	e	enum:__anon107
IMP_ENC_SLICE_P	imp_encoder.h	/^	IMP_ENC_SLICE_P             = 1,            \/**< P Slice (can contain I and P blocks) *\/$/;"	e	enum:__anon107
IMP_ENC_SLICE_REPEAT	imp_encoder.h	/^	IMP_ENC_SLICE_REPEAT        = 8,            \/**< Repeat Slice (repeats the content of its reference) *\/$/;"	e	enum:__anon107
IMP_ENC_SLICE_SI	imp_encoder.h	/^	IMP_ENC_SLICE_SI            = 4,            \/**< AVC SI Slice *\/$/;"	e	enum:__anon107
IMP_ENC_SLICE_SKIP	imp_encoder.h	/^	IMP_ENC_SLICE_SKIP          = 7,            \/**< Skip Slice *\/$/;"	e	enum:__anon107
IMP_ENC_SLICE_SP	imp_encoder.h	/^	IMP_ENC_SLICE_SP            = 3,            \/**< AVC SP Slice *\/$/;"	e	enum:__anon107
IMP_ENC_TOOL_CONST_INTRA_PRED	imp_encoder.h	/^	IMP_ENC_TOOL_CONST_INTRA_PRED = 0x00000040,$/;"	e	enum:__anon114
IMP_ENC_TOOL_DIRECT_SPATIAL	imp_encoder.h	/^	IMP_ENC_TOOL_DIRECT_SPATIAL   = 0x00004000,$/;"	e	enum:__anon114
IMP_ENC_TOOL_LF	imp_encoder.h	/^	IMP_ENC_TOOL_LF               = 0x00000004,$/;"	e	enum:__anon114
IMP_ENC_TOOL_LF_X_SLICE	imp_encoder.h	/^	IMP_ENC_TOOL_LF_X_SLICE       = 0x00000008,$/;"	e	enum:__anon114
IMP_ENC_TOOL_LF_X_TILE	imp_encoder.h	/^	IMP_ENC_TOOL_LF_X_TILE        = 0x00000010,$/;"	e	enum:__anon114
IMP_ENC_TOOL_PCM	imp_encoder.h	/^	IMP_ENC_TOOL_PCM              = 0x00000800,$/;"	e	enum:__anon114
IMP_ENC_TOOL_SAO	imp_encoder.h	/^	IMP_ENC_TOOL_SAO              = 0x00000200,$/;"	e	enum:__anon114
IMP_ENC_TOOL_SAO_Y	imp_encoder.h	/^	IMP_ENC_TOOL_SAO_Y            = 0x00000200,$/;"	e	enum:__anon114
IMP_ENC_TOOL_SCL_LST	imp_encoder.h	/^	IMP_ENC_TOOL_SCL_LST          = 0x00000020,$/;"	e	enum:__anon114
IMP_ENC_TOOL_TILE	imp_encoder.h	/^	IMP_ENC_TOOL_TILE             = 0x00000002,$/;"	e	enum:__anon114
IMP_ENC_TOOL_WPP	imp_encoder.h	/^	IMP_ENC_TOOL_WPP              = 0x00000001,$/;"	e	enum:__anon114
IMP_ENC_TPYE_AVPU	imp_encoder.h	/^	IMP_ENC_TPYE_AVPU       = 0x00000001,$/;"	e	enum:__anon116
IMP_ENC_TPYE_IVPU	imp_encoder.h	/^	IMP_ENC_TPYE_IVPU       = 0x00000002,$/;"	e	enum:__anon116
IMP_ENC_TYPE_AVC	imp_encoder.h	/^	IMP_ENC_TYPE_AVC        = 0,$/;"	e	enum:__anon110
IMP_ENC_TYPE_HEVC	imp_encoder.h	/^	IMP_ENC_TYPE_HEVC       = 1,$/;"	e	enum:__anon110
IMP_ENC_TYPE_JPEG	imp_encoder.h	/^	IMP_ENC_TYPE_JPEG       = 4,$/;"	e	enum:__anon110
IMP_EmuFrameSource_CreateChn	imp_emu_framesource.h	/^int IMP_EmuFrameSource_CreateChn(uint32_t chn_num, IMPFSChnAttr *chn_attr);$/;"	p	signature:(uint32_t chn_num, IMPFSChnAttr *chn_attr)
IMP_EmuFrameSource_DestroyChn	imp_emu_framesource.h	/^int IMP_EmuFrameSource_DestroyChn(uint32_t chn_num);$/;"	p	signature:(uint32_t chn_num)
IMP_EmuFrameSource_DisableChn	imp_emu_framesource.h	/^int IMP_EmuFrameSource_DisableChn(uint32_t chn_num);$/;"	p	signature:(uint32_t chn_num)
IMP_EmuFrameSource_EnableChn	imp_emu_framesource.h	/^int IMP_EmuFrameSource_EnableChn(uint32_t chn_num);$/;"	p	signature:(uint32_t chn_num)
IMP_EmuFrameSource_GetChnAttr	imp_emu_framesource.h	/^int IMP_EmuFrameSource_GetChnAttr(uint32_t chn_num, IMPFSChnAttr *chn_attr);$/;"	p	signature:(uint32_t chn_num, IMPFSChnAttr *chn_attr)
IMP_Encoder_CreateChn	imp_encoder.h	/^int IMP_Encoder_CreateChn(int encChn, const IMPEncoderChnAttr *attr);$/;"	p	signature:(int encChn, const IMPEncoderChnAttr *attr)
IMP_Encoder_CreateGroup	imp_encoder.h	/^int IMP_Encoder_CreateGroup(int encGroup);$/;"	p	signature:(int encGroup)
IMP_Encoder_DestroyChn	imp_encoder.h	/^int IMP_Encoder_DestroyChn(int encChn);$/;"	p	signature:(int encChn)
IMP_Encoder_DestroyGroup	imp_encoder.h	/^int IMP_Encoder_DestroyGroup(int encGroup);$/;"	p	signature:(int encGroup)
IMP_Encoder_FlushStream	imp_encoder.h	/^int IMP_Encoder_FlushStream(int encChn);$/;"	p	signature:(int encChn)
IMP_Encoder_GetChnAttr	imp_encoder.h	/^int IMP_Encoder_GetChnAttr(int encChn, IMPEncoderChnAttr * const attr);$/;"	p	signature:(int encChn, IMPEncoderChnAttr * const attr)
IMP_Encoder_GetChnAttrRcMode	imp_encoder.h	/^int IMP_Encoder_GetChnAttrRcMode(int encChn, IMPEncoderAttrRcMode *pstRcModeCfg);$/;"	p	signature:(int encChn, IMPEncoderAttrRcMode *pstRcModeCfg)
IMP_Encoder_GetChnEncType	imp_encoder.h	/^int IMP_Encoder_GetChnEncType(int encChn, IMPEncoderEncType *encType);$/;"	p	signature:(int encChn, IMPEncoderEncType *encType)
IMP_Encoder_GetChnFrmRate	imp_encoder.h	/^int IMP_Encoder_GetChnFrmRate(int encChn, IMPEncoderFrmRate *pstFps);$/;"	p	signature:(int encChn, IMPEncoderFrmRate *pstFps)
IMP_Encoder_GetChnGopAttr	imp_encoder.h	/^int IMP_Encoder_GetChnGopAttr(int encChn, IMPEncoderGopAttr *pGopAttr);$/;"	p	signature:(int encChn, IMPEncoderGopAttr *pGopAttr)
IMP_Encoder_GetFd	imp_encoder.h	/^int IMP_Encoder_GetFd(int encChn);$/;"	p	signature:(int encChn)
IMP_Encoder_GetFisheyeEnableStatus	imp_encoder.h	/^int IMP_Encoder_GetFisheyeEnableStatus(int encChn, int *enable);$/;"	p	signature:(int encChn, int *enable)
IMP_Encoder_GetJpegeQl	imp_encoder.h	/^int IMP_Encoder_GetJpegeQl(int encChn, IMPEncoderJpegeQl *pstJpegeQl);$/;"	p	signature:(int encChn, IMPEncoderJpegeQl *pstJpegeQl)
IMP_Encoder_GetMaxStreamCnt	imp_encoder.h	/^int IMP_Encoder_GetMaxStreamCnt(int encChn, int *nrMaxStream);$/;"	p	signature:(int encChn, int *nrMaxStream)
IMP_Encoder_GetPool	imp_encoder.h	/^int IMP_Encoder_GetPool(int chnNum);$/;"	p	signature:(int chnNum)
IMP_Encoder_GetStream	imp_encoder.h	/^int IMP_Encoder_GetStream(int encChn, IMPEncoderStream *stream, bool blockFlag);$/;"	p	signature:(int encChn, IMPEncoderStream *stream, bool blockFlag)
IMP_Encoder_GetStreamBufSize	imp_encoder.h	/^int IMP_Encoder_GetStreamBufSize(int encChn, uint32_t *nrStreamSize);$/;"	p	signature:(int encChn, uint32_t *nrStreamSize)
IMP_Encoder_PollingModuleStream	imp_encoder.h	/^int IMP_Encoder_PollingModuleStream(uint32_t *encChnBitmap, uint32_t timeoutMsec);$/;"	p	signature:(uint32_t *encChnBitmap, uint32_t timeoutMsec)
IMP_Encoder_PollingStream	imp_encoder.h	/^int IMP_Encoder_PollingStream(int encChn, uint32_t timeoutMsec);$/;"	p	signature:(int encChn, uint32_t timeoutMsec)
IMP_Encoder_Query	imp_encoder.h	/^int IMP_Encoder_Query(int encChn, IMPEncoderChnStat *stat);$/;"	p	signature:(int encChn, IMPEncoderChnStat *stat)
IMP_Encoder_RegisterChn	imp_encoder.h	/^int IMP_Encoder_RegisterChn(int encGroup, int encChn);$/;"	p	signature:(int encGroup, int encChn)
IMP_Encoder_ReleaseStream	imp_encoder.h	/^int IMP_Encoder_ReleaseStream(int encChn, IMPEncoderStream *stream);$/;"	p	signature:(int encChn, IMPEncoderStream *stream)
IMP_Encoder_RequestIDR	imp_encoder.h	/^int IMP_Encoder_RequestIDR(int encChn);$/;"	p	signature:(int encChn)
IMP_Encoder_SetAvpuBsSize	imp_encoder.h	/^int IMP_Encoder_SetAvpuBsSize(uint32_t avpuBsSize);$/;"	p	signature:(uint32_t avpuBsSize)
IMP_Encoder_SetChnBitRate	imp_encoder.h	/^int IMP_Encoder_SetChnBitRate(int encChn, int iTargetBitRate, int iMaxBitRate);$/;"	p	signature:(int encChn, int iTargetBitRate, int iMaxBitRate)
IMP_Encoder_SetChnFrmRate	imp_encoder.h	/^int IMP_Encoder_SetChnFrmRate(int encChn, const IMPEncoderFrmRate *pstFps);$/;"	p	signature:(int encChn, const IMPEncoderFrmRate *pstFps)
IMP_Encoder_SetChnGopAttr	imp_encoder.h	/^int IMP_Encoder_SetChnGopAttr(int encChn, const IMPEncoderGopAttr *pGopAttr);$/;"	p	signature:(int encChn, const IMPEncoderGopAttr *pGopAttr)
IMP_Encoder_SetChnGopLength	imp_encoder.h	/^int IMP_Encoder_SetChnGopLength(int encChn, int iGopLength);$/;"	p	signature:(int encChn, int iGopLength)
IMP_Encoder_SetChnQpBounds	imp_encoder.h	/^int IMP_Encoder_SetChnQpBounds(int encChn, int iMinQP, int iMaxQP);$/;"	p	signature:(int encChn, int iMinQP, int iMaxQP)
IMP_Encoder_SetChnResizeMode	imp_encoder.h	/^int IMP_Encoder_SetChnResizeMode(int encChn, int en);$/;"	p	signature:(int encChn, int en)
IMP_Encoder_SetDefaultParam	imp_encoder.h	/^int IMP_Encoder_SetDefaultParam(IMPEncoderChnAttr *chnAttr, IMPEncoderProfile profile, IMPEncoderRcMode rcMode, uint16_t uWidth, uint16_t uHeight, uint32_t frmRateNum, uint32_t frmRateDen, uint32_t uGopLength, int uMaxSameSenceCnt, int iInitialQP, uint32_t uTargetBitRate);$/;"	p	signature:(IMPEncoderChnAttr *chnAttr, IMPEncoderProfile profile, IMPEncoderRcMode rcMode, uint16_t uWidth, uint16_t uHeight, uint32_t frmRateNum, uint32_t frmRateDen, uint32_t uGopLength, int uMaxSameSenceCnt, int iInitialQP, uint32_t uTargetBitRate)
IMP_Encoder_SetFisheyeEnableStatus	imp_encoder.h	/^int IMP_Encoder_SetFisheyeEnableStatus(int encChn, int enable);$/;"	p	signature:(int encChn, int enable)
IMP_Encoder_SetIvpuBsSize	imp_encoder.h	/^int IMP_Encoder_SetIvpuBsSize(uint32_t ivpuBsSize);$/;"	p	signature:(uint32_t ivpuBsSize)
IMP_Encoder_SetJpegeQl	imp_encoder.h	/^int IMP_Encoder_SetJpegeQl(int encChn, const IMPEncoderJpegeQl *pstJpegeQl);$/;"	p	signature:(int encChn, const IMPEncoderJpegeQl *pstJpegeQl)
IMP_Encoder_SetMaxStreamCnt	imp_encoder.h	/^int IMP_Encoder_SetMaxStreamCnt(int encChn, int nrMaxStream);$/;"	p	signature:(int encChn, int nrMaxStream)
IMP_Encoder_SetPool	imp_encoder.h	/^int IMP_Encoder_SetPool(int chnNum, int poolID);$/;"	p	signature:(int chnNum, int poolID)
IMP_Encoder_SetStreamBufSize	imp_encoder.h	/^int IMP_Encoder_SetStreamBufSize(int encChn, uint32_t nrStreamSize);$/;"	p	signature:(int encChn, uint32_t nrStreamSize)
IMP_Encoder_SetbufshareChn	imp_encoder.h	/^int IMP_Encoder_SetbufshareChn(int encChn, int shareChn);$/;"	p	signature:(int encChn, int shareChn)
IMP_Encoder_StartRecvPic	imp_encoder.h	/^int IMP_Encoder_StartRecvPic(int encChn);$/;"	p	signature:(int encChn)
IMP_Encoder_StopRecvPic	imp_encoder.h	/^int IMP_Encoder_StopRecvPic(int encChn);$/;"	p	signature:(int encChn)
IMP_Encoder_UnRegisterChn	imp_encoder.h	/^int IMP_Encoder_UnRegisterChn(int encChn);$/;"	p	signature:(int encChn)
IMP_FrameSource_CreateChn	imp_framesource.h	/^int IMP_FrameSource_CreateChn(int chnNum, IMPFSChnAttr *chn_attr);$/;"	p	signature:(int chnNum, IMPFSChnAttr *chn_attr)
IMP_FrameSource_DestroyChn	imp_framesource.h	/^int IMP_FrameSource_DestroyChn(int chnNum);$/;"	p	signature:(int chnNum)
IMP_FrameSource_DisableChn	imp_framesource.h	/^int IMP_FrameSource_DisableChn(int chnNum);$/;"	p	signature:(int chnNum)
IMP_FrameSource_EnableChn	imp_framesource.h	/^int IMP_FrameSource_EnableChn(int chnNum);$/;"	p	signature:(int chnNum)
IMP_FrameSource_GetChnAttr	imp_framesource.h	/^int IMP_FrameSource_GetChnAttr(int chnNum, IMPFSChnAttr *chnAttr);$/;"	p	signature:(int chnNum, IMPFSChnAttr *chnAttr)
IMP_FrameSource_GetChnFifoAttr	imp_framesource.h	/^int IMP_FrameSource_GetChnFifoAttr(int chnNum, IMPFSChnFifoAttr *attr);$/;"	p	signature:(int chnNum, IMPFSChnFifoAttr *attr)
IMP_FrameSource_GetDelay	imp_framesource.h	/^int IMP_FrameSource_GetDelay(int chnNum, int *cnt);$/;"	p	signature:(int chnNum, int *cnt)
IMP_FrameSource_GetFrame	imp_framesource.h	/^int IMP_FrameSource_GetFrame(int chnNum, IMPFrameInfo **frame);$/;"	p	signature:(int chnNum, IMPFrameInfo **frame)
IMP_FrameSource_GetFrameDepth	imp_framesource.h	/^int IMP_FrameSource_GetFrameDepth(int chnNum, int *depth);$/;"	p	signature:(int chnNum, int *depth)
IMP_FrameSource_GetFrameEx	imp_framesource.h	/^int IMP_FrameSource_GetFrameEx(int chnNum,IMPFrameInfo **frame);$/;"	p	signature:(int chnNum,IMPFrameInfo **frame)
IMP_FrameSource_GetI2dAttr	imp_framesource.h	/^int IMP_FrameSource_GetI2dAttr(int chnNum,IMPFSI2DAttr *pI2dAttr);$/;"	p	signature:(int chnNum,IMPFSI2DAttr *pI2dAttr)
IMP_FrameSource_GetMaxDelay	imp_framesource.h	/^int IMP_FrameSource_GetMaxDelay(int chnNum, int *maxcnt);$/;"	p	signature:(int chnNum, int *maxcnt)
IMP_FrameSource_GetTimedFrame	imp_framesource.h	/^int IMP_FrameSource_GetTimedFrame(int chnNum, IMPFrameTimestamp *framets, int block, void *framedata, IMPFrameInfo *frame);$/;"	p	signature:(int chnNum, IMPFrameTimestamp *framets, int block, void *framedata, IMPFrameInfo *frame)
IMP_FrameSource_ReleaseFrame	imp_framesource.h	/^int IMP_FrameSource_ReleaseFrame(int chnNum, IMPFrameInfo *frame);$/;"	p	signature:(int chnNum, IMPFrameInfo *frame)
IMP_FrameSource_ReleaseFrameEx	imp_framesource.h	/^int IMP_FrameSource_ReleaseFrameEx(int chnNum,IMPFrameInfo *pframe);$/;"	p	signature:(int chnNum,IMPFrameInfo *pframe)
IMP_FrameSource_SetChnAttr	imp_framesource.h	/^int IMP_FrameSource_SetChnAttr(int chnNum, const IMPFSChnAttr *chnAttr);$/;"	p	signature:(int chnNum, const IMPFSChnAttr *chnAttr)
IMP_FrameSource_SetChnFifoAttr	imp_framesource.h	/^int IMP_FrameSource_SetChnFifoAttr(int chnNum, IMPFSChnFifoAttr *attr);$/;"	p	signature:(int chnNum, IMPFSChnFifoAttr *attr)
IMP_FrameSource_SetDelay	imp_framesource.h	/^int IMP_FrameSource_SetDelay(int chnNum, int cnt);$/;"	p	signature:(int chnNum, int cnt)
IMP_FrameSource_SetFrameDepth	imp_framesource.h	/^int IMP_FrameSource_SetFrameDepth(int chnNum, int depth);$/;"	p	signature:(int chnNum, int depth)
IMP_FrameSource_SetI2dAttr	imp_framesource.h	/^int IMP_FrameSource_SetI2dAttr(int chnNum,IMPFSI2DAttr *pI2dAttr);$/;"	p	signature:(int chnNum,IMPFSI2DAttr *pI2dAttr)
IMP_FrameSource_SetMaxDelay	imp_framesource.h	/^int IMP_FrameSource_SetMaxDelay(int chnNum, int maxcnt);$/;"	p	signature:(int chnNum, int maxcnt)
IMP_FrameSource_SnapFrame	imp_framesource.h	/^int IMP_FrameSource_SnapFrame(int chnNum, IMPPixelFormat fmt, int width, int height, void *framedata, IMPFrameInfo *frame);$/;"	p	signature:(int chnNum, IMPPixelFormat fmt, int width, int height, void *framedata, IMPFrameInfo *frame)
IMP_H264_NAL_AUD	imp_encoder.h	/^	IMP_H264_NAL_AUD                = 9,        \/**< 访问单元分隔符 *\/$/;"	e	enum:__anon104
IMP_H264_NAL_FILLER	imp_encoder.h	/^	IMP_H264_NAL_FILLER             = 12,       \/**< 填充数据 *\/$/;"	e	enum:__anon104
IMP_H264_NAL_PPS	imp_encoder.h	/^	IMP_H264_NAL_PPS                = 8,        \/**< 图像参数集 *\/$/;"	e	enum:__anon104
IMP_H264_NAL_SEI	imp_encoder.h	/^	IMP_H264_NAL_SEI                = 6,        \/**< 辅助增强信息 (SEI) *\/$/;"	e	enum:__anon104
IMP_H264_NAL_SLICE	imp_encoder.h	/^	IMP_H264_NAL_SLICE              = 1,        \/**< 一个非IDR图像的编码条带  *\/$/;"	e	enum:__anon104
IMP_H264_NAL_SLICE_DPA	imp_encoder.h	/^	IMP_H264_NAL_SLICE_DPA          = 2,        \/**< 编码条带数据分割块A *\/$/;"	e	enum:__anon104
IMP_H264_NAL_SLICE_DPB	imp_encoder.h	/^	IMP_H264_NAL_SLICE_DPB          = 3,        \/**< 编码条带数据分割块B *\/$/;"	e	enum:__anon104
IMP_H264_NAL_SLICE_DPC	imp_encoder.h	/^	IMP_H264_NAL_SLICE_DPC          = 4,        \/**< 编码条带数据分割块C *\/$/;"	e	enum:__anon104
IMP_H264_NAL_SLICE_IDR	imp_encoder.h	/^	IMP_H264_NAL_SLICE_IDR          = 5,        \/**< IDR图像的编码条带 *\/$/;"	e	enum:__anon104
IMP_H264_NAL_SPS	imp_encoder.h	/^	IMP_H264_NAL_SPS                = 7,        \/**< 序列参数集 *\/$/;"	e	enum:__anon104
IMP_H264_NAL_UNKNOWN	imp_encoder.h	/^	IMP_H264_NAL_UNKNOWN            = 0,        \/**< 未指定 *\/$/;"	e	enum:__anon104
IMP_H265_NAL_AUD	imp_encoder.h	/^	IMP_H265_NAL_AUD                = 35,       \/**< 访问单元分隔符 *\/$/;"	e	enum:__anon105
IMP_H265_NAL_EOB	imp_encoder.h	/^	IMP_H265_NAL_EOB                = 37,       \/**< 比特流结束 *\/$/;"	e	enum:__anon105
IMP_H265_NAL_EOS	imp_encoder.h	/^	IMP_H265_NAL_EOS                = 36,       \/**< 序列结束 *\/$/;"	e	enum:__anon105
IMP_H265_NAL_FILLER_DATA	imp_encoder.h	/^	IMP_H265_NAL_FILLER_DATA        = 38,       \/**< 填充数据 *\/$/;"	e	enum:__anon105
IMP_H265_NAL_INVALID	imp_encoder.h	/^	IMP_H265_NAL_INVALID            = 64,       \/**< 无效NAL类型 *\/$/;"	e	enum:__anon105
IMP_H265_NAL_PPS	imp_encoder.h	/^	IMP_H265_NAL_PPS                = 34,       \/**< 图像参数集 *\/$/;"	e	enum:__anon105
IMP_H265_NAL_PREFIX_SEI	imp_encoder.h	/^	IMP_H265_NAL_PREFIX_SEI         = 39,       \/**< 辅助增强信息 (SEI) *\/$/;"	e	enum:__anon105
IMP_H265_NAL_SLICE_BLA_N_LP	imp_encoder.h	/^	IMP_H265_NAL_SLICE_BLA_N_LP     = 18,       \/**< 断点连接接入, 不带前置图像 *\/$/;"	e	enum:__anon105
IMP_H265_NAL_SLICE_BLA_W_LP	imp_encoder.h	/^	IMP_H265_NAL_SLICE_BLA_W_LP     = 16,       \/**< 断点连接接入, 带前置图像 *\/$/;"	e	enum:__anon105
IMP_H265_NAL_SLICE_BLA_W_RADL	imp_encoder.h	/^	IMP_H265_NAL_SLICE_BLA_W_RADL   = 17,       \/**< 断点连接接入, 带前置图像RADL *\/$/;"	e	enum:__anon105
IMP_H265_NAL_SLICE_CRA	imp_encoder.h	/^	IMP_H265_NAL_SLICE_CRA          = 21,       \/**< 纯随机接入, 带前置图像*\/$/;"	e	enum:__anon105
IMP_H265_NAL_SLICE_IDR_N_LP	imp_encoder.h	/^	IMP_H265_NAL_SLICE_IDR_N_LP     = 20,       \/**< 即时解码刷新, 不带前置图像 *\/$/;"	e	enum:__anon105
IMP_H265_NAL_SLICE_IDR_W_RADL	imp_encoder.h	/^	IMP_H265_NAL_SLICE_IDR_W_RADL   = 19,       \/**< 即时解码刷新, 带前置图像RADL *\/$/;"	e	enum:__anon105
IMP_H265_NAL_SLICE_RADL_N	imp_encoder.h	/^	IMP_H265_NAL_SLICE_RADL_N       = 6,        \/**< 可解码随机接入前置图像, 不带参考信息 *\/$/;"	e	enum:__anon105
IMP_H265_NAL_SLICE_RADL_R	imp_encoder.h	/^	IMP_H265_NAL_SLICE_RADL_R       = 7,        \/**< 可解码随机接入前置图像, 带参考信息 *\/$/;"	e	enum:__anon105
IMP_H265_NAL_SLICE_RASL_N	imp_encoder.h	/^	IMP_H265_NAL_SLICE_RASL_N       = 8,        \/**< 跳过随机接入的前置图像, 不带参考信息 *\/$/;"	e	enum:__anon105
IMP_H265_NAL_SLICE_RASL_R	imp_encoder.h	/^	IMP_H265_NAL_SLICE_RASL_R       = 9,        \/**< 跳过随机接入的前置图像, 带参考信息 *\/$/;"	e	enum:__anon105
IMP_H265_NAL_SLICE_STSA_N	imp_encoder.h	/^	IMP_H265_NAL_SLICE_STSA_N       = 4,        \/**< 逐步时域子层接入点图像, 不带参考信息 *\/$/;"	e	enum:__anon105
IMP_H265_NAL_SLICE_STSA_R	imp_encoder.h	/^	IMP_H265_NAL_SLICE_STSA_R       = 5,        \/**< 逐步时域子层接入点图像, 带参考信息 *\/$/;"	e	enum:__anon105
IMP_H265_NAL_SLICE_TRAIL_N	imp_encoder.h	/^	IMP_H265_NAL_SLICE_TRAIL_N      = 0,        \/**< 尾随图像, 不带参考信息 *\/$/;"	e	enum:__anon105
IMP_H265_NAL_SLICE_TRAIL_R	imp_encoder.h	/^	IMP_H265_NAL_SLICE_TRAIL_R      = 1,        \/**< 尾随图像, 带参考信息 *\/$/;"	e	enum:__anon105
IMP_H265_NAL_SLICE_TSA_N	imp_encoder.h	/^	IMP_H265_NAL_SLICE_TSA_N        = 2,        \/**< 时域子层接入点图像, 不带参考信息 *\/$/;"	e	enum:__anon105
IMP_H265_NAL_SLICE_TSA_R	imp_encoder.h	/^	IMP_H265_NAL_SLICE_TSA_R        = 3,        \/**< 时域子层接入点图像, 带参考信息 *\/$/;"	e	enum:__anon105
IMP_H265_NAL_SPS	imp_encoder.h	/^	IMP_H265_NAL_SPS                = 33,       \/**< 序列参数集 *\/$/;"	e	enum:__anon105
IMP_H265_NAL_SUFFIX_SEI	imp_encoder.h	/^	IMP_H265_NAL_SUFFIX_SEI         = 40,       \/**< 辅助增强信息 (SEI) *\/$/;"	e	enum:__anon105
IMP_H265_NAL_VPS	imp_encoder.h	/^	IMP_H265_NAL_VPS                = 32,       \/**< 视频参数集 *\/$/;"	e	enum:__anon105
IMP_ISP_AE_SCENCE_AUTO	imp_isp.h	/^	IMP_ISP_AE_SCENCE_AUTO,        \/**< 自动模式 *\/$/;"	e	enum:__anon45
IMP_ISP_AE_SCENCE_BUTT	imp_isp.h	/^	IMP_ISP_AE_SCENCE_BUTT,        \/**< 用于判断参数的有效性，参数大小必须小于这个值 *\/$/;"	e	enum:__anon45
IMP_ISP_AE_SCENCE_DISABLE	imp_isp.h	/^	IMP_ISP_AE_SCENCE_DISABLE,     \/**< 关闭此场景模式 *\/$/;"	e	enum:__anon45
IMP_ISP_ARGB_TYPE_ABGR	imp_isp.h	/^	IMP_ISP_ARGB_TYPE_ABGR = 8,$/;"	e	enum:__anon59
IMP_ISP_ARGB_TYPE_ABRG	imp_isp.h	/^	IMP_ISP_ARGB_TYPE_ABRG,$/;"	e	enum:__anon59
IMP_ISP_ARGB_TYPE_AGBR	imp_isp.h	/^	IMP_ISP_ARGB_TYPE_AGBR,$/;"	e	enum:__anon59
IMP_ISP_ARGB_TYPE_AGRB	imp_isp.h	/^	IMP_ISP_ARGB_TYPE_AGRB,$/;"	e	enum:__anon59
IMP_ISP_ARGB_TYPE_ARBG	imp_isp.h	/^	IMP_ISP_ARGB_TYPE_ARBG,$/;"	e	enum:__anon59
IMP_ISP_ARGB_TYPE_ARGB	imp_isp.h	/^	IMP_ISP_ARGB_TYPE_ARGB,$/;"	e	enum:__anon59
IMP_ISP_ARGB_TYPE_BGRA	imp_isp.h	/^	IMP_ISP_ARGB_TYPE_BGRA = 0,$/;"	e	enum:__anon59
IMP_ISP_ARGB_TYPE_BRGA	imp_isp.h	/^	IMP_ISP_ARGB_TYPE_BRGA,$/;"	e	enum:__anon59
IMP_ISP_ARGB_TYPE_GBRA	imp_isp.h	/^	IMP_ISP_ARGB_TYPE_GBRA,$/;"	e	enum:__anon59
IMP_ISP_ARGB_TYPE_GRBA	imp_isp.h	/^	IMP_ISP_ARGB_TYPE_GRBA,$/;"	e	enum:__anon59
IMP_ISP_ARGB_TYPE_RBGA	imp_isp.h	/^	IMP_ISP_ARGB_TYPE_RBGA,$/;"	e	enum:__anon59
IMP_ISP_ARGB_TYPE_RGBA	imp_isp.h	/^	IMP_ISP_ARGB_TYPE_RGBA,$/;"	e	enum:__anon59
IMP_ISP_AWB_LIMITED	imp_isp.h	/^	IMP_ISP_AWB_LIMITED,    \/**< 加限制条件后的统计值 *\/$/;"	e	enum:__anon35
IMP_ISP_AWB_ORIGIN	imp_isp.h	/^	IMP_ISP_AWB_ORIGIN,     \/**< 原始统计值 *\/$/;"	e	enum:__anon35
IMP_ISP_AddSensor	imp_isp.h	/^int32_t IMP_ISP_AddSensor(IMPVI_NUM num, IMPSensorInfo *pinfo);$/;"	p	signature:(IMPVI_NUM num, IMPSensorInfo *pinfo)
IMP_ISP_CG_BT601_FULL	imp_isp.h	/^	IMP_ISP_CG_BT601_FULL,          \/**< BT601 full range *\/$/;"	e	enum:__anon26
IMP_ISP_CG_BT601_LIMITED	imp_isp.h	/^	IMP_ISP_CG_BT601_LIMITED,       \/**< BT601 非full range *\/$/;"	e	enum:__anon26
IMP_ISP_CG_BT709_FULL	imp_isp.h	/^	IMP_ISP_CG_BT709_FULL,          \/**< BT709 full range *\/$/;"	e	enum:__anon26
IMP_ISP_CG_BT709_LIMITED	imp_isp.h	/^	IMP_ISP_CG_BT709_LIMITED,       \/**< BT709 非full range *\/$/;"	e	enum:__anon26
IMP_ISP_CG_BUTT	imp_isp.h	/^	IMP_ISP_CG_BUTT,                \/**< 用于判断参数的有效性，参数大小必须小于这个值 *\/$/;"	e	enum:__anon26
IMP_ISP_CG_USER	imp_isp.h	/^	IMP_ISP_CG_USER,                \/**< 用户自定义模式 *\/$/;"	e	enum:__anon26
IMP_ISP_COLOR_VALUE	imp_isp.h	/^} IMP_ISP_COLOR_VALUE;$/;"	t	typeref:struct:color_value
IMP_ISP_Close	imp_isp.h	/^int32_t IMP_ISP_Close(void);$/;"	p	signature:(void)
IMP_ISP_DRAW_LINE	imp_isp.h	/^	IMP_ISP_DRAW_LINE,              \/**< 画线 *\/$/;"	e	enum:__anon65
IMP_ISP_DRAW_RANGE	imp_isp.h	/^	IMP_ISP_DRAW_RANGE,             \/**< 画四角窗 *\/$/;"	e	enum:__anon65
IMP_ISP_DRAW_WIND	imp_isp.h	/^	IMP_ISP_DRAW_WIND,              \/**< 画框 *\/$/;"	e	enum:__anon65
IMP_ISP_DelSensor	imp_isp.h	/^int32_t IMP_ISP_DelSensor(IMPVI_NUM num, IMPSensorInfo *pinfo);$/;"	p	signature:(IMPVI_NUM num, IMPSensorInfo *pinfo)
IMP_ISP_DisableSensor	imp_isp.h	/^int32_t IMP_ISP_DisableSensor(IMPVI_NUM num);$/;"	p	signature:(IMPVI_NUM num)
IMP_ISP_DisableTuning	imp_isp.h	/^int32_t IMP_ISP_DisableTuning(void);$/;"	p	signature:(void)
IMP_ISP_EnableSensor	imp_isp.h	/^int32_t IMP_ISP_EnableSensor(IMPVI_NUM num, IMPSensorInfo *info);$/;"	p	signature:(IMPVI_NUM num, IMPSensorInfo *info)
IMP_ISP_EnableTuning	imp_isp.h	/^int32_t IMP_ISP_EnableTuning(void);$/;"	p	signature:(void)
IMP_ISP_GAMMA_CURVE_BUTT	imp_isp.h	/^	IMP_ISP_GAMMA_CURVE_BUTT,       \/**< 用于判断参数的有效性，参数大小必须小于这个值 *\/$/;"	e	enum:__anon30
IMP_ISP_GAMMA_CURVE_DEFAULT	imp_isp.h	/^	IMP_ISP_GAMMA_CURVE_DEFAULT,    \/**< 默认gamma模式 *\/$/;"	e	enum:__anon30
IMP_ISP_GAMMA_CURVE_HDR	imp_isp.h	/^	IMP_ISP_GAMMA_CURVE_HDR,        \/**< HDR Gamma模式 *\/$/;"	e	enum:__anon30
IMP_ISP_GAMMA_CURVE_SRGB	imp_isp.h	/^	IMP_ISP_GAMMA_CURVE_SRGB,       \/**< 标准SRGB gamma模式 *\/$/;"	e	enum:__anon30
IMP_ISP_GAMMA_CURVE_USER	imp_isp.h	/^	IMP_ISP_GAMMA_CURVE_USER,       \/**< 用户自定义gamma模式 *\/$/;"	e	enum:__anon30
IMP_ISP_GetDefaultBinPath	imp_isp.h	/^int32_t IMP_ISP_GetDefaultBinPath(IMPVI_NUM num, char *path);$/;"	p	signature:(IMPVI_NUM num, char *path)
IMP_ISP_GetFrameDrop	imp_isp.h	/^int32_t IMP_ISP_GetFrameDrop(IMPVI_NUM num, IMPISPFrameDropAttr *attr);$/;"	p	signature:(IMPVI_NUM num, IMPISPFrameDropAttr *attr)
IMP_ISP_GetISPBypass	imp_isp.h	/^int32_t IMP_ISP_GetISPBypass(IMPVI_NUM num, IMPISPTuningOpsMode *enable);$/;"	p	signature:(IMPVI_NUM num, IMPISPTuningOpsMode *enable)
IMP_ISP_GetSensorRegister	imp_isp.h	/^int32_t IMP_ISP_GetSensorRegister(IMPVI_NUM num, IMPISPSensorRegister *reg);$/;"	p	signature:(IMPVI_NUM num, IMPISPSensorRegister *reg)
IMP_ISP_HIST_ON_RAW	imp_isp.h	/^	IMP_ISP_HIST_ON_RAW,    \/**< Raw域 *\/$/;"	e	enum:__anon32
IMP_ISP_HIST_ON_YUV	imp_isp.h	/^	IMP_ISP_HIST_ON_YUV,    \/**< YUV域 *\/$/;"	e	enum:__anon32
IMP_ISP_MODULE_BUTT	imp_isp.h	/^	IMP_ISP_MODULE_BUTT,       \/**< 用于判断参数有效性的值，必须大于此值 *\/$/;"	e	enum:__anon23
IMP_ISP_MODULE_DPC	imp_isp.h	/^	IMP_ISP_MODULE_DPC,        \/**< 动态去坏点下标 *\/$/;"	e	enum:__anon23
IMP_ISP_MODULE_DRC	imp_isp.h	/^	IMP_ISP_MODULE_DRC,        \/**< 数字宽动态下标 *\/$/;"	e	enum:__anon23
IMP_ISP_MODULE_SINTER	imp_isp.h	/^	IMP_ISP_MODULE_SINTER = 0, \/**< 2D降噪下标 *\/$/;"	e	enum:__anon23
IMP_ISP_MODULE_TEMPER	imp_isp.h	/^	IMP_ISP_MODULE_TEMPER,     \/**< 3D降噪下标 *\/$/;"	e	enum:__anon23
IMP_ISP_OSD_RGN_BUSY	imp_isp.h	/^	IMP_ISP_OSD_RGN_BUSY,   \/*ISPOSD区域已创建*\/$/;"	e	enum:__anon84
IMP_ISP_OSD_RGN_FREE	imp_isp.h	/^	IMP_ISP_OSD_RGN_FREE,   \/*ISPOSD区域未创建或者释放*\/$/;"	e	enum:__anon84
IMP_ISP_Open	imp_isp.h	/^int32_t IMP_ISP_Open(void);$/;"	p	signature:(void)
IMP_ISP_PIC_ARGB_1555	imp_isp.h	/^	IMP_ISP_PIC_ARGB_1555,  \/**< ARBG1555 *\/$/;"	e	enum:__anon58
IMP_ISP_PIC_ARGB_8888	imp_isp.h	/^	IMP_ISP_PIC_ARGB_8888,  \/**< ARGB8888 *\/$/;"	e	enum:__anon58
IMP_ISP_SetAeAlgoFunc	imp_isp.h	/^int32_t IMP_ISP_SetAeAlgoFunc(IMPVI_NUM num, IMPISPAeAlgoFunc *ae_func);$/;"	p	signature:(IMPVI_NUM num, IMPISPAeAlgoFunc *ae_func)
IMP_ISP_SetAwbAlgoFunc	imp_isp.h	/^int32_t IMP_ISP_SetAwbAlgoFunc(IMPVI_NUM num, IMPISPAwbAlgoFunc *awb_func);$/;"	p	signature:(IMPVI_NUM num, IMPISPAwbAlgoFunc *awb_func)
IMP_ISP_SetDefaultBinPath	imp_isp.h	/^int32_t IMP_ISP_SetDefaultBinPath(IMPVI_NUM num, char *path);$/;"	p	signature:(IMPVI_NUM num, char *path)
IMP_ISP_SetFrameDrop	imp_isp.h	/^int32_t IMP_ISP_SetFrameDrop(IMPVI_NUM num, IMPISPFrameDropAttr *attr);$/;"	p	signature:(IMPVI_NUM num, IMPISPFrameDropAttr *attr)
IMP_ISP_SetISPBypass	imp_isp.h	/^int32_t IMP_ISP_SetISPBypass(IMPVI_NUM num, IMPISPTuningOpsMode *enable);$/;"	p	signature:(IMPVI_NUM num, IMPISPTuningOpsMode *enable)
IMP_ISP_SetSensorRegister	imp_isp.h	/^int32_t IMP_ISP_SetSensorRegister(IMPVI_NUM num, IMPISPSensorRegister *reg);$/;"	p	signature:(IMPVI_NUM num, IMPISPSensorRegister *reg)
IMP_ISP_StartNightMode	imp_isp.h	/^int32_t IMP_ISP_StartNightMode(IMPVI_NUM num);$/;"	p	signature:(IMPVI_NUM num)
IMP_ISP_Tuning_CreateOsdRgn	imp_isp.h	/^int IMP_ISP_Tuning_CreateOsdRgn(int chn,IMPIspOsdAttrAsm *pIspOsdAttr);$/;"	p	signature:(int chn,IMPIspOsdAttrAsm *pIspOsdAttr)
IMP_ISP_Tuning_DestroyOsdRgn	imp_isp.h	/^int IMP_ISP_Tuning_DestroyOsdRgn(int chn,int handle);$/;"	p	signature:(int chn,int handle)
IMP_ISP_Tuning_GetAFMetricesInfo	imp_isp.h	/^int32_t IMP_ISP_Tuning_GetAFMetricesInfo(IMPVI_NUM num, IMPISPAFMetricsInfo *metric);$/;"	p	signature:(IMPVI_NUM num, IMPISPAFMetricsInfo *metric)
IMP_ISP_Tuning_GetAeExprInfo	imp_isp.h	/^int32_t IMP_ISP_Tuning_GetAeExprInfo(IMPVI_NUM num, IMPISPAEExprInfo *exprinfo);$/;"	p	signature:(IMPVI_NUM num, IMPISPAEExprInfo *exprinfo)
IMP_ISP_Tuning_GetAeScenceAttr	imp_isp.h	/^int32_t IMP_ISP_Tuning_GetAeScenceAttr(IMPVI_NUM num, IMPISPAEScenceAttr *scenceattr);$/;"	p	signature:(IMPVI_NUM num, IMPISPAEScenceAttr *scenceattr)
IMP_ISP_Tuning_GetAeStatistics	imp_isp.h	/^int32_t IMP_ISP_Tuning_GetAeStatistics(IMPVI_NUM num, IMPISPAEStatisInfo *ae_statis);$/;"	p	signature:(IMPVI_NUM num, IMPISPAEStatisInfo *ae_statis)
IMP_ISP_Tuning_GetAeWeight	imp_isp.h	/^int32_t IMP_ISP_Tuning_GetAeWeight(IMPVI_NUM num, IMPISPAEWeightAttr *ae_weight);$/;"	p	signature:(IMPVI_NUM num, IMPISPAEWeightAttr *ae_weight)
IMP_ISP_Tuning_GetAfStatistics	imp_isp.h	/^int32_t IMP_ISP_Tuning_GetAfStatistics(IMPVI_NUM num, IMPISPAFStatisInfo *af_statis);$/;"	p	signature:(IMPVI_NUM num, IMPISPAFStatisInfo *af_statis)
IMP_ISP_Tuning_GetAfWeight	imp_isp.h	/^int32_t IMP_ISP_Tuning_GetAfWeight(IMPVI_NUM num, IMPISPWeight *af_weight);$/;"	p	signature:(IMPVI_NUM num, IMPISPWeight *af_weight)
IMP_ISP_Tuning_GetAntiFlickerAttr	imp_isp.h	/^int32_t IMP_ISP_Tuning_GetAntiFlickerAttr(IMPVI_NUM num, IMPISPAntiflickerAttr *pattr);$/;"	p	signature:(IMPVI_NUM num, IMPISPAntiflickerAttr *pattr)
IMP_ISP_Tuning_GetAutoZoom	imp_isp.h	/^int32_t IMP_ISP_Tuning_GetAutoZoom(IMPVI_NUM num, IMPISPAutoZoom *ispautozoom);$/;"	p	signature:(IMPVI_NUM num, IMPISPAutoZoom *ispautozoom)
IMP_ISP_Tuning_GetAwbAttr	imp_isp.h	/^int32_t IMP_ISP_Tuning_GetAwbAttr(IMPVI_NUM num, IMPISPWBAttr *attr);$/;"	p	signature:(IMPVI_NUM num, IMPISPWBAttr *attr)
IMP_ISP_Tuning_GetAwbGlobalStatistics	imp_isp.h	/^int32_t IMP_ISP_Tuning_GetAwbGlobalStatistics(IMPVI_NUM num, IMPISPAWBGlobalStatisInfo *awb_statis);$/;"	p	signature:(IMPVI_NUM num, IMPISPAWBGlobalStatisInfo *awb_statis)
IMP_ISP_Tuning_GetAwbStatistics	imp_isp.h	/^int32_t IMP_ISP_Tuning_GetAwbStatistics(IMPVI_NUM num, IMPISPAWBStatisInfo *awb_statis);$/;"	p	signature:(IMPVI_NUM num, IMPISPAWBStatisInfo *awb_statis)
IMP_ISP_Tuning_GetAwbWeight	imp_isp.h	/^int32_t IMP_ISP_Tuning_GetAwbWeight(IMPVI_NUM num, IMPISPWeight *awb_weight);$/;"	p	signature:(IMPVI_NUM num, IMPISPWeight *awb_weight)
IMP_ISP_Tuning_GetBcshHue	imp_isp.h	/^int32_t IMP_ISP_Tuning_GetBcshHue(IMPVI_NUM num, unsigned char *hue);$/;"	p	signature:(IMPVI_NUM num, unsigned char *hue)
IMP_ISP_Tuning_GetBrightness	imp_isp.h	/^int32_t IMP_ISP_Tuning_GetBrightness(IMPVI_NUM num, unsigned char *pbright);$/;"	p	signature:(IMPVI_NUM num, unsigned char *pbright)
IMP_ISP_Tuning_GetCCMAttr	imp_isp.h	/^int32_t IMP_ISP_Tuning_GetCCMAttr(IMPVI_NUM num, IMPISPCCMAttr *ccm);$/;"	p	signature:(IMPVI_NUM num, IMPISPCCMAttr *ccm)
IMP_ISP_Tuning_GetContrast	imp_isp.h	/^int32_t IMP_ISP_Tuning_GetContrast(IMPVI_NUM num, unsigned char *pcontrast);$/;"	p	signature:(IMPVI_NUM num, unsigned char *pcontrast)
IMP_ISP_Tuning_GetDrawBlock	imp_isp.h	/^int32_t IMP_ISP_Tuning_GetDrawBlock(IMPVI_NUM num, IMPISPDrawBlockAttr *attr);$/;"	p	signature:(IMPVI_NUM num, IMPISPDrawBlockAttr *attr)
IMP_ISP_Tuning_GetGammaAttr	imp_isp.h	/^int32_t IMP_ISP_Tuning_GetGammaAttr(IMPVI_NUM num, IMPISPGammaAttr *gamma);$/;"	p	signature:(IMPVI_NUM num, IMPISPGammaAttr *gamma)
IMP_ISP_Tuning_GetHVFlip	imp_isp.h	/^int32_t IMP_ISP_Tuning_GetHVFlip(IMPVI_NUM num, IMPISPHVFLIPAttr *attr);$/;"	p	signature:(IMPVI_NUM num, IMPISPHVFLIPAttr *attr)
IMP_ISP_Tuning_GetISPCSCAttr	imp_isp.h	/^int32_t IMP_ISP_Tuning_GetISPCSCAttr(IMPVI_NUM num, IMPISPCSCAttr *csc);$/;"	p	signature:(IMPVI_NUM num, IMPISPCSCAttr *csc)
IMP_ISP_Tuning_GetISPRunningMode	imp_isp.h	/^int32_t IMP_ISP_Tuning_GetISPRunningMode(IMPVI_NUM num, IMPISPRunningMode *pmode);$/;"	p	signature:(IMPVI_NUM num, IMPISPRunningMode *pmode)
IMP_ISP_Tuning_GetMaskBlock	imp_isp.h	/^int32_t IMP_ISP_Tuning_GetMaskBlock(IMPVI_NUM num, IMPISPMaskBlockAttr *mask);$/;"	p	signature:(IMPVI_NUM num, IMPISPMaskBlockAttr *mask)
IMP_ISP_Tuning_GetModuleControl	imp_isp.h	/^int32_t IMP_ISP_Tuning_GetModuleControl(IMPVI_NUM num, IMPISPModuleCtl *ispmodule);$/;"	p	signature:(IMPVI_NUM num, IMPISPModuleCtl *ispmodule)
IMP_ISP_Tuning_GetModule_Ratio	imp_isp.h	/^int32_t IMP_ISP_Tuning_GetModule_Ratio(IMPVI_NUM num, IMPISPModuleRatioAttr *ratio);$/;"	p	signature:(IMPVI_NUM num, IMPISPModuleRatioAttr *ratio)
IMP_ISP_Tuning_GetOSDAttr	imp_isp.h	/^int32_t IMP_ISP_Tuning_GetOSDAttr(IMPVI_NUM num, IMPISPOSDAttr *attr);$/;"	p	signature:(IMPVI_NUM num, IMPISPOSDAttr *attr)
IMP_ISP_Tuning_GetOSDBlock	imp_isp.h	/^int32_t IMP_ISP_Tuning_GetOSDBlock(IMPVI_NUM num, IMPISPOSDBlockAttr *attr);$/;"	p	signature:(IMPVI_NUM num, IMPISPOSDBlockAttr *attr)
IMP_ISP_Tuning_GetOsdRgnAttr	imp_isp.h	/^int IMP_ISP_Tuning_GetOsdRgnAttr(int chn,int handle, IMPIspOsdAttrAsm *pIspOsdAttr);$/;"	p	signature:(int chn,int handle, IMPIspOsdAttrAsm *pIspOsdAttr)
IMP_ISP_Tuning_GetSaturation	imp_isp.h	/^int32_t IMP_ISP_Tuning_GetSaturation(IMPVI_NUM num, unsigned char *psaturation);$/;"	p	signature:(IMPVI_NUM num, unsigned char *psaturation)
IMP_ISP_Tuning_GetSensorAttr	imp_isp.h	/^int32_t IMP_ISP_Tuning_GetSensorAttr(IMPVI_NUM num, IMPISPSENSORAttr *attr);$/;"	p	signature:(IMPVI_NUM num, IMPISPSENSORAttr *attr)
IMP_ISP_Tuning_GetSensorFPS	imp_isp.h	/^int32_t IMP_ISP_Tuning_GetSensorFPS(IMPVI_NUM num, IMPISPSensorFps *fps);$/;"	p	signature:(IMPVI_NUM num, IMPISPSensorFps *fps)
IMP_ISP_Tuning_GetSharpness	imp_isp.h	/^int32_t IMP_ISP_Tuning_GetSharpness(IMPVI_NUM num, unsigned char *psharpness);$/;"	p	signature:(IMPVI_NUM num, unsigned char *psharpness)
IMP_ISP_Tuning_GetStatisConfig	imp_isp.h	/^int32_t IMP_ISP_Tuning_GetStatisConfig(IMPVI_NUM num, IMPISPStatisConfig *statis_config);$/;"	p	signature:(IMPVI_NUM num, IMPISPStatisConfig *statis_config)
IMP_ISP_Tuning_GetWdrOutputMode	imp_isp.h	/^int32_t IMP_ISP_Tuning_GetWdrOutputMode(IMPVI_NUM num, IMPISPWdrOutputMode *mode);$/;"	p	signature:(IMPVI_NUM num, IMPISPWdrOutputMode *mode)
IMP_ISP_Tuning_SetAeExprInfo	imp_isp.h	/^int32_t IMP_ISP_Tuning_SetAeExprInfo(IMPVI_NUM num, IMPISPAEExprInfo *exprinfo);$/;"	p	signature:(IMPVI_NUM num, IMPISPAEExprInfo *exprinfo)
IMP_ISP_Tuning_SetAeScenceAttr	imp_isp.h	/^int32_t IMP_ISP_Tuning_SetAeScenceAttr(IMPVI_NUM num, IMPISPAEScenceAttr *scenceattr);$/;"	p	signature:(IMPVI_NUM num, IMPISPAEScenceAttr *scenceattr)
IMP_ISP_Tuning_SetAeWeight	imp_isp.h	/^int32_t IMP_ISP_Tuning_SetAeWeight(IMPVI_NUM num, IMPISPAEWeightAttr *ae_weight);$/;"	p	signature:(IMPVI_NUM num, IMPISPAEWeightAttr *ae_weight)
IMP_ISP_Tuning_SetAfWeight	imp_isp.h	/^int32_t IMP_ISP_Tuning_SetAfWeight(IMPVI_NUM num, IMPISPWeight *af_weight);$/;"	p	signature:(IMPVI_NUM num, IMPISPWeight *af_weight)
IMP_ISP_Tuning_SetAntiFlickerAttr	imp_isp.h	/^int32_t IMP_ISP_Tuning_SetAntiFlickerAttr(IMPVI_NUM num, IMPISPAntiflickerAttr *pattr);$/;"	p	signature:(IMPVI_NUM num, IMPISPAntiflickerAttr *pattr)
IMP_ISP_Tuning_SetAutoZoom	imp_isp.h	/^int32_t IMP_ISP_Tuning_SetAutoZoom(IMPVI_NUM num, IMPISPAutoZoom *ispautozoom);$/;"	p	signature:(IMPVI_NUM num, IMPISPAutoZoom *ispautozoom)
IMP_ISP_Tuning_SetAwbAttr	imp_isp.h	/^int32_t IMP_ISP_Tuning_SetAwbAttr(IMPVI_NUM num, IMPISPWBAttr *attr);$/;"	p	signature:(IMPVI_NUM num, IMPISPWBAttr *attr)
IMP_ISP_Tuning_SetAwbWeight	imp_isp.h	/^int32_t IMP_ISP_Tuning_SetAwbWeight(IMPVI_NUM num, IMPISPWeight *awb_weight);$/;"	p	signature:(IMPVI_NUM num, IMPISPWeight *awb_weight)
IMP_ISP_Tuning_SetBcshHue	imp_isp.h	/^int32_t IMP_ISP_Tuning_SetBcshHue(IMPVI_NUM num, unsigned char *hue);$/;"	p	signature:(IMPVI_NUM num, unsigned char *hue)
IMP_ISP_Tuning_SetBrightness	imp_isp.h	/^int32_t IMP_ISP_Tuning_SetBrightness(IMPVI_NUM num, unsigned char *bright);$/;"	p	signature:(IMPVI_NUM num, unsigned char *bright)
IMP_ISP_Tuning_SetCCMAttr	imp_isp.h	/^int32_t IMP_ISP_Tuning_SetCCMAttr(IMPVI_NUM num, IMPISPCCMAttr *ccm);$/;"	p	signature:(IMPVI_NUM num, IMPISPCCMAttr *ccm)
IMP_ISP_Tuning_SetContrast	imp_isp.h	/^int32_t IMP_ISP_Tuning_SetContrast(IMPVI_NUM num, unsigned char *contrast);$/;"	p	signature:(IMPVI_NUM num, unsigned char *contrast)
IMP_ISP_Tuning_SetDrawBlock	imp_isp.h	/^int32_t IMP_ISP_Tuning_SetDrawBlock(IMPVI_NUM num, IMPISPDrawBlockAttr *attr);$/;"	p	signature:(IMPVI_NUM num, IMPISPDrawBlockAttr *attr)
IMP_ISP_Tuning_SetGammaAttr	imp_isp.h	/^int32_t IMP_ISP_Tuning_SetGammaAttr(IMPVI_NUM num, IMPISPGammaAttr *gamma);$/;"	p	signature:(IMPVI_NUM num, IMPISPGammaAttr *gamma)
IMP_ISP_Tuning_SetHVFLIP	imp_isp.h	/^int32_t IMP_ISP_Tuning_SetHVFLIP(IMPVI_NUM num, IMPISPHVFLIPAttr *attr);$/;"	p	signature:(IMPVI_NUM num, IMPISPHVFLIPAttr *attr)
IMP_ISP_Tuning_SetISPCSCAttr	imp_isp.h	/^int32_t IMP_ISP_Tuning_SetISPCSCAttr(IMPVI_NUM num, IMPISPCSCAttr *csc);$/;"	p	signature:(IMPVI_NUM num, IMPISPCSCAttr *csc)
IMP_ISP_Tuning_SetISPRunningMode	imp_isp.h	/^int32_t IMP_ISP_Tuning_SetISPRunningMode(IMPVI_NUM num, IMPISPRunningMode *mode);$/;"	p	signature:(IMPVI_NUM num, IMPISPRunningMode *mode)
IMP_ISP_Tuning_SetMaskBlock	imp_isp.h	/^int32_t IMP_ISP_Tuning_SetMaskBlock(IMPVI_NUM num, IMPISPMaskBlockAttr *mask);$/;"	p	signature:(IMPVI_NUM num, IMPISPMaskBlockAttr *mask)
IMP_ISP_Tuning_SetModuleControl	imp_isp.h	/^int32_t IMP_ISP_Tuning_SetModuleControl(IMPVI_NUM num, IMPISPModuleCtl *ispmodule);$/;"	p	signature:(IMPVI_NUM num, IMPISPModuleCtl *ispmodule)
IMP_ISP_Tuning_SetModule_Ratio	imp_isp.h	/^int32_t IMP_ISP_Tuning_SetModule_Ratio(IMPVI_NUM num, IMPISPModuleRatioAttr *ratio);$/;"	p	signature:(IMPVI_NUM num, IMPISPModuleRatioAttr *ratio)
IMP_ISP_Tuning_SetOSDAttr	imp_isp.h	/^int32_t IMP_ISP_Tuning_SetOSDAttr(IMPVI_NUM num, IMPISPOSDAttr *attr);$/;"	p	signature:(IMPVI_NUM num, IMPISPOSDAttr *attr)
IMP_ISP_Tuning_SetOSDBlock	imp_isp.h	/^int32_t IMP_ISP_Tuning_SetOSDBlock(IMPVI_NUM num, IMPISPOSDBlockAttr *attr);$/;"	p	signature:(IMPVI_NUM num, IMPISPOSDBlockAttr *attr)
IMP_ISP_Tuning_SetOsdPoolSize	imp_isp.h	/^int IMP_ISP_Tuning_SetOsdPoolSize(int size);$/;"	p	signature:(int size)
IMP_ISP_Tuning_SetOsdRgnAttr	imp_isp.h	/^int IMP_ISP_Tuning_SetOsdRgnAttr(int chn,int handle, IMPIspOsdAttrAsm *pIspOsdAttr);$/;"	p	signature:(int chn,int handle, IMPIspOsdAttrAsm *pIspOsdAttr)
IMP_ISP_Tuning_SetSaturation	imp_isp.h	/^int32_t IMP_ISP_Tuning_SetSaturation(IMPVI_NUM num, unsigned char *saturation);$/;"	p	signature:(IMPVI_NUM num, unsigned char *saturation)
IMP_ISP_Tuning_SetScalerLv	imp_isp.h	/^int32_t IMP_ISP_Tuning_SetScalerLv(IMPVI_NUM num, IMPISPScalerLvAttr *attr);$/;"	p	signature:(IMPVI_NUM num, IMPISPScalerLvAttr *attr)
IMP_ISP_Tuning_SetSensorFPS	imp_isp.h	/^int32_t IMP_ISP_Tuning_SetSensorFPS(IMPVI_NUM num, IMPISPSensorFps *fps);$/;"	p	signature:(IMPVI_NUM num, IMPISPSensorFps *fps)
IMP_ISP_Tuning_SetSharpness	imp_isp.h	/^int32_t IMP_ISP_Tuning_SetSharpness(IMPVI_NUM num, unsigned char *sharpness);$/;"	p	signature:(IMPVI_NUM num, unsigned char *sharpness)
IMP_ISP_Tuning_SetStatisConfig	imp_isp.h	/^int32_t IMP_ISP_Tuning_SetStatisConfig(IMPVI_NUM num, IMPISPStatisConfig *statis_config);$/;"	p	signature:(IMPVI_NUM num, IMPISPStatisConfig *statis_config)
IMP_ISP_Tuning_SetVideoDrop	imp_isp.h	/^int32_t IMP_ISP_Tuning_SetVideoDrop(void (*cb)(void));$/;"	p	signature:(void (*cb)(void))
IMP_ISP_Tuning_SetWdrOutputMode	imp_isp.h	/^int32_t IMP_ISP_Tuning_SetWdrOutputMode(IMPVI_NUM num, IMPISPWdrOutputMode *mode);$/;"	p	signature:(IMPVI_NUM num, IMPISPWdrOutputMode *mode)
IMP_ISP_Tuning_ShowOsdRgn	imp_isp.h	/^int IMP_ISP_Tuning_ShowOsdRgn(int chn,int handle, int showFlag);$/;"	p	signature:(int chn,int handle, int showFlag)
IMP_ISP_Tuning_SwitchBin	imp_isp.h	/^int32_t IMP_ISP_Tuning_SwitchBin(IMPVI_NUM num, IMPISPBinAttr *attr);$/;"	p	signature:(IMPVI_NUM num, IMPISPBinAttr *attr)
IMP_ISP_Tuning_WaitFrameDone	imp_isp.h	/^int32_t IMP_ISP_Tuning_WaitFrameDone(IMPVI_NUM num, IMPISPWaitFrameAttr *attr);$/;"	p	signature:(IMPVI_NUM num, IMPISPWaitFrameAttr *attr)
IMP_ISP_WDR_ENABLE	imp_isp.h	/^int32_t IMP_ISP_WDR_ENABLE(IMPVI_NUM num, IMPISPTuningOpsMode *mode);$/;"	p	signature:(IMPVI_NUM num, IMPISPTuningOpsMode *mode)
IMP_ISP_WDR_ENABLE_GET	imp_isp.h	/^int32_t IMP_ISP_WDR_ENABLE_GET(IMPVI_NUM num, IMPISPTuningOpsMode *mode);$/;"	p	signature:(IMPVI_NUM num, IMPISPTuningOpsMode *mode)
IMP_IVS_BaseMoveOutput	imp_ivs_base_move.h	/^} IMP_IVS_BaseMoveOutput;$/;"	t	typeref:struct:__anon151
IMP_IVS_BaseMoveParam	imp_ivs_base_move.h	/^} IMP_IVS_BaseMoveParam;$/;"	t	typeref:struct:__anon150
IMP_IVS_CreateBaseMoveInterface	imp_ivs_base_move.h	/^IMPIVSInterface *IMP_IVS_CreateBaseMoveInterface(IMP_IVS_BaseMoveParam *param);$/;"	p	signature:(IMP_IVS_BaseMoveParam *param)
IMP_IVS_CreateChn	imp_ivs.h	/^int IMP_IVS_CreateChn(int ChnNum, IMPIVSInterface *handler);$/;"	p	signature:(int ChnNum, IMPIVSInterface *handler)
IMP_IVS_CreateGroup	imp_ivs.h	/^int IMP_IVS_CreateGroup(int GrpNum);$/;"	p	signature:(int GrpNum)
IMP_IVS_CreateMoveInterface	imp_ivs_move.h	/^IMPIVSInterface *IMP_IVS_CreateMoveInterface(IMP_IVS_MoveParam *param);$/;"	p	signature:(IMP_IVS_MoveParam *param)
IMP_IVS_DEFAULT_TIMEOUTMS	imp_ivs.h	24;"	d
IMP_IVS_DestroyBaseMoveInterface	imp_ivs_base_move.h	/^void IMP_IVS_DestroyBaseMoveInterface(IMPIVSInterface *moveInterface);$/;"	p	signature:(IMPIVSInterface *moveInterface)
IMP_IVS_DestroyChn	imp_ivs.h	/^int IMP_IVS_DestroyChn(int ChnNum);$/;"	p	signature:(int ChnNum)
IMP_IVS_DestroyGroup	imp_ivs.h	/^int IMP_IVS_DestroyGroup(int GrpNum);$/;"	p	signature:(int GrpNum)
IMP_IVS_DestroyMoveInterface	imp_ivs_move.h	/^void IMP_IVS_DestroyMoveInterface(IMPIVSInterface *moveInterface);$/;"	p	signature:(IMPIVSInterface *moveInterface)
IMP_IVS_GetParam	imp_ivs.h	/^int IMP_IVS_GetParam(int chnNum, void *param);$/;"	p	signature:(int chnNum, void *param)
IMP_IVS_GetResult	imp_ivs.h	/^int IMP_IVS_GetResult(int ChnNum, void **result);$/;"	p	signature:(int ChnNum, void **result)
IMP_IVS_MOVE_MAX_ROI_CNT	imp_ivs_base_move.h	17;"	d
IMP_IVS_MOVE_MAX_ROI_CNT	imp_ivs_move.h	17;"	d
IMP_IVS_MoveOutput	imp_ivs_move.h	/^} IMP_IVS_MoveOutput;$/;"	t	typeref:struct:__anon90
IMP_IVS_MoveParam	imp_ivs_move.h	/^} IMP_IVS_MoveParam;$/;"	t	typeref:struct:__anon89
IMP_IVS_PollingResult	imp_ivs.h	/^int IMP_IVS_PollingResult(int ChnNum, int timeoutMs);$/;"	p	signature:(int ChnNum, int timeoutMs)
IMP_IVS_RegisterChn	imp_ivs.h	/^int IMP_IVS_RegisterChn(int GrpNum, int ChnNum);$/;"	p	signature:(int GrpNum, int ChnNum)
IMP_IVS_ReleaseData	imp_ivs.h	/^int IMP_IVS_ReleaseData(void *vaddr);$/;"	p	signature:(void *vaddr)
IMP_IVS_ReleaseResult	imp_ivs.h	/^int IMP_IVS_ReleaseResult(int ChnNum, void *result);$/;"	p	signature:(int ChnNum, void *result)
IMP_IVS_SetParam	imp_ivs.h	/^int IMP_IVS_SetParam(int chnNum, void *param);$/;"	p	signature:(int chnNum, void *param)
IMP_IVS_StartRecvPic	imp_ivs.h	/^int IMP_IVS_StartRecvPic(int ChnNum);$/;"	p	signature:(int ChnNum)
IMP_IVS_StopRecvPic	imp_ivs.h	/^int IMP_IVS_StopRecvPic(int ChnNum);$/;"	p	signature:(int ChnNum)
IMP_IVS_UnRegisterChn	imp_ivs.h	/^int IMP_IVS_UnRegisterChn(int ChnNum);$/;"	p	signature:(int ChnNum)
IMP_LOG	imp_log.h	111;"	d
IMP_LOG_DBG	imp_log.h	127;"	d
IMP_LOG_ERR	imp_log.h	142;"	d
IMP_LOG_FATAL	imp_log.h	147;"	d
IMP_LOG_GET_OPTION	imp_log.h	108;"	d
IMP_LOG_INFO	imp_log.h	132;"	d
IMP_LOG_LEVEL_DEBUG	imp_log.h	/^	IMP_LOG_LEVEL_DEBUG,$/;"	e	enum:__anon149
IMP_LOG_LEVEL_DEFAULT	imp_log.h	37;"	d
IMP_LOG_LEVEL_ERROR	imp_log.h	/^	IMP_LOG_LEVEL_ERROR,$/;"	e	enum:__anon149
IMP_LOG_LEVEL_FATAL	imp_log.h	/^	IMP_LOG_LEVEL_FATAL,$/;"	e	enum:__anon149
IMP_LOG_LEVEL_INFO	imp_log.h	/^	IMP_LOG_LEVEL_INFO,$/;"	e	enum:__anon149
IMP_LOG_LEVEL_RESERVED	imp_log.h	/^	IMP_LOG_LEVEL_RESERVED,$/;"	e	enum:__anon149
IMP_LOG_LEVEL_SILENT	imp_log.h	/^	IMP_LOG_LEVEL_SILENT$/;"	e	enum:__anon149
IMP_LOG_LEVEL_UNKNOWN	imp_log.h	/^	IMP_LOG_LEVEL_UNKNOWN,$/;"	e	enum:__anon149
IMP_LOG_LEVEL_VERBOSE	imp_log.h	/^	IMP_LOG_LEVEL_VERBOSE,$/;"	e	enum:__anon149
IMP_LOG_LEVEL_WARN	imp_log.h	/^	IMP_LOG_LEVEL_WARN,$/;"	e	enum:__anon149
IMP_LOG_OP_ALL	imp_log.h	66;"	d
IMP_LOG_OP_DEFAULT	imp_log.h	68;"	d
IMP_LOG_OP_FILE	imp_log.h	62;"	d
IMP_LOG_OP_FILE_SHIFT	imp_log.h	54;"	d
IMP_LOG_OP_FUNC	imp_log.h	63;"	d
IMP_LOG_OP_FUNC_SHIFT	imp_log.h	55;"	d
IMP_LOG_OP_LINE	imp_log.h	64;"	d
IMP_LOG_OP_LINE_SHIFT	imp_log.h	56;"	d
IMP_LOG_OP_MODULE	imp_log.h	61;"	d
IMP_LOG_OP_MODULE_SHIFT	imp_log.h	53;"	d
IMP_LOG_OP_NONE	imp_log.h	65;"	d
IMP_LOG_OP_PID	imp_log.h	59;"	d
IMP_LOG_OP_PID_SHIFT	imp_log.h	51;"	d
IMP_LOG_OP_USTIME	imp_log.h	60;"	d
IMP_LOG_OP_USTIME_SHIFT	imp_log.h	52;"	d
IMP_LOG_OUT_DEFAULT	imp_log.h	46;"	d
IMP_LOG_OUT_LOCAL_FILE	imp_log.h	43;"	d
IMP_LOG_OUT_SERVER	imp_log.h	44;"	d
IMP_LOG_OUT_STDOUT	imp_log.h	42;"	d
IMP_LOG_PRINT	imp_log.h	99;"	d
IMP_LOG_SILENT	imp_log.h	152;"	d
IMP_LOG_TO_FILE	imp_log.h	102;"	d
IMP_LOG_TO_SERVER	imp_log.h	105;"	d
IMP_LOG_UNK	imp_log.h	117;"	d
IMP_LOG_VERBOSE	imp_log.h	122;"	d
IMP_LOG_WARN	imp_log.h	137;"	d
IMP_Log_Get_Option	imp_log.h	/^int  IMP_Log_Get_Option(void);$/;"	p	signature:(void)
IMP_Log_Set_Option	imp_log.h	/^void IMP_Log_Set_Option(int op);$/;"	p	signature:(int op)
IMP_OSD_AttachToGroup	imp_osd.h	/^int IMP_OSD_AttachToGroup(IMPCell *from, IMPCell *to);$/;"	p	signature:(IMPCell *from, IMPCell *to)
IMP_OSD_CreateGroup	imp_osd.h	/^int IMP_OSD_CreateGroup(int grpNum);$/;"	p	signature:(int grpNum)
IMP_OSD_CreateRgn	imp_osd.h	/^IMPRgnHandle IMP_OSD_CreateRgn(IMPOSDRgnAttr *prAttr);$/;"	p	signature:(IMPOSDRgnAttr *prAttr)
IMP_OSD_CreateRgn_ISP	isp_osd.h	/^int IMP_OSD_CreateRgn_ISP(int chn,IMPIspOsdAttrAsm *pIspOsdAttr);$/;"	p	signature:(int chn,IMPIspOsdAttrAsm *pIspOsdAttr)
IMP_OSD_DestroyGroup	imp_osd.h	/^int IMP_OSD_DestroyGroup(int grpNum);$/;"	p	signature:(int grpNum)
IMP_OSD_DestroyRgn	imp_osd.h	/^void IMP_OSD_DestroyRgn(IMPRgnHandle handle);$/;"	p	signature:(IMPRgnHandle handle)
IMP_OSD_DestroyRgn_ISP	isp_osd.h	/^int IMP_OSD_DestroyRgn_ISP(int chn,int handle);$/;"	p	signature:(int chn,int handle)
IMP_OSD_Exit_ISP	isp_osd.h	/^void IMP_OSD_Exit_ISP(void);$/;"	p	signature:(void)
IMP_OSD_GetGrpRgnAttr	imp_osd.h	/^int IMP_OSD_GetGrpRgnAttr(IMPRgnHandle handle, int grpNum, IMPOSDGrpRgnAttr *pgrAttr);$/;"	p	signature:(IMPRgnHandle handle, int grpNum, IMPOSDGrpRgnAttr *pgrAttr)
IMP_OSD_GetRegionLuma	imp_osd.h	/^int IMP_OSD_GetRegionLuma(IMPRgnHandle handle, IMPOSDRgnAttr *prAttr);$/;"	p	signature:(IMPRgnHandle handle, IMPOSDRgnAttr *prAttr)
IMP_OSD_GetRgnAttr	imp_osd.h	/^int IMP_OSD_GetRgnAttr(IMPRgnHandle handle, IMPOSDRgnAttr *prAttr);$/;"	p	signature:(IMPRgnHandle handle, IMPOSDRgnAttr *prAttr)
IMP_OSD_GetRgnAttr_ISP	imp_osd.h	/^int IMP_OSD_GetRgnAttr_ISP(int sensornum,IMPOSDRgnAttr *prAttr,int *pbosdshow);$/;"	p	signature:(int sensornum,IMPOSDRgnAttr *prAttr,int *pbosdshow)
IMP_OSD_GetRgnAttr_ISPPic	isp_osd.h	/^int IMP_OSD_GetRgnAttr_ISPPic(int chn,int handle, IMPIspOsdAttrAsm *pIspOsdAttr);$/;"	p	signature:(int chn,int handle, IMPIspOsdAttrAsm *pIspOsdAttr)
IMP_OSD_Init_ISP	isp_osd.h	/^int IMP_OSD_Init_ISP(void);$/;"	p	signature:(void)
IMP_OSD_RegisterRgn	imp_osd.h	/^int IMP_OSD_RegisterRgn(IMPRgnHandle handle, int grpNum, IMPOSDGrpRgnAttr *pgrAttr);$/;"	p	signature:(IMPRgnHandle handle, int grpNum, IMPOSDGrpRgnAttr *pgrAttr)
IMP_OSD_RgnCreate_Query	imp_osd.h	/^int IMP_OSD_RgnCreate_Query(IMPRgnHandle handle,IMPOSDRgnCreateStat *pstStatus);$/;"	p	signature:(IMPRgnHandle handle,IMPOSDRgnCreateStat *pstStatus)
IMP_OSD_RgnRegister_Query	imp_osd.h	/^int IMP_OSD_RgnRegister_Query(IMPRgnHandle handle,int grpNum,IMPOSDRgnRegisterStat *pstStatus);$/;"	p	signature:(IMPRgnHandle handle,int grpNum,IMPOSDRgnRegisterStat *pstStatus)
IMP_OSD_SetGrpRgnAttr	imp_osd.h	/^int IMP_OSD_SetGrpRgnAttr(IMPRgnHandle handle, int grpNum, IMPOSDGrpRgnAttr *pgrAttr);$/;"	p	signature:(IMPRgnHandle handle, int grpNum, IMPOSDGrpRgnAttr *pgrAttr)
IMP_OSD_SetMosaic	imp_osd.h	/^int IMP_OSD_SetMosaic(unsigned char *frame_virAddr, IMPOSDMosaicAttr *mosaicAttr);$/;"	p	signature:(unsigned char *frame_virAddr, IMPOSDMosaicAttr *mosaicAttr)
IMP_OSD_SetPoolSize_ISP	isp_osd.h	/^int IMP_OSD_SetPoolSize_ISP(int size);$/;"	p	signature:(int size)
IMP_OSD_SetRgnAttr	imp_osd.h	/^int IMP_OSD_SetRgnAttr(IMPRgnHandle handle, IMPOSDRgnAttr *prAttr);$/;"	p	signature:(IMPRgnHandle handle, IMPOSDRgnAttr *prAttr)
IMP_OSD_SetRgnAttrWithTimestamp	imp_osd.h	/^int IMP_OSD_SetRgnAttrWithTimestamp(IMPRgnHandle handle, IMPOSDRgnAttr *prAttr, IMPOSDRgnTimestamp *prTs);$/;"	p	signature:(IMPRgnHandle handle, IMPOSDRgnAttr *prAttr, IMPOSDRgnTimestamp *prTs)
IMP_OSD_SetRgnAttr_ISP	imp_osd.h	/^int IMP_OSD_SetRgnAttr_ISP(int sensornum,IMPOSDRgnAttr *prAttr,int bosdshow);$/;"	p	signature:(int sensornum,IMPOSDRgnAttr *prAttr,int bosdshow)
IMP_OSD_SetRgnAttr_PicISP	isp_osd.h	/^int IMP_OSD_SetRgnAttr_PicISP(int chn,int handle, IMPIspOsdAttrAsm *pIspOsdAttr);$/;"	p	signature:(int chn,int handle, IMPIspOsdAttrAsm *pIspOsdAttr)
IMP_OSD_ShowRgn	imp_osd.h	/^int IMP_OSD_ShowRgn(IMPRgnHandle handle, int grpNum, int showFlag);$/;"	p	signature:(IMPRgnHandle handle, int grpNum, int showFlag)
IMP_OSD_ShowRgn_ISP	isp_osd.h	/^int IMP_OSD_ShowRgn_ISP( int chn,int handle, int showFlag);$/;"	p	signature:( int chn,int handle, int showFlag)
IMP_OSD_Start	imp_osd.h	/^int IMP_OSD_Start(int grpNum);$/;"	p	signature:(int grpNum)
IMP_OSD_Stop	imp_osd.h	/^int IMP_OSD_Stop(int grpNum);$/;"	p	signature:(int grpNum)
IMP_OSD_UnRegisterRgn	imp_osd.h	/^int IMP_OSD_UnRegisterRgn(IMPRgnHandle handle, int grpNum);$/;"	p	signature:(IMPRgnHandle handle, int grpNum)
IMP_OSD_UpdateRgnAttrData	imp_osd.h	/^int IMP_OSD_UpdateRgnAttrData(IMPRgnHandle handle, IMPOSDRgnAttrData *prAttrData);$/;"	p	signature:(IMPRgnHandle handle, IMPOSDRgnAttrData *prAttrData)
IMP_System_Bind	imp_system.h	/^int IMP_System_Bind(IMPCell *srcCell, IMPCell *dstCell);$/;"	p	signature:(IMPCell *srcCell, IMPCell *dstCell)
IMP_System_Exit	imp_system.h	/^int IMP_System_Exit(void);$/;"	p	signature:(void)
IMP_System_GetBindbyDest	imp_system.h	/^int IMP_System_GetBindbyDest(IMPCell *dstCell, IMPCell *srcCell);$/;"	p	signature:(IMPCell *dstCell, IMPCell *srcCell)
IMP_System_GetCPUInfo	imp_system.h	/^const char* IMP_System_GetCPUInfo(void);$/;"	p	signature:(void)
IMP_System_GetTimeStamp	imp_system.h	/^int64_t IMP_System_GetTimeStamp(void);$/;"	p	signature:(void)
IMP_System_GetVersion	imp_system.h	/^int IMP_System_GetVersion(IMPVersion *pstVersion);$/;"	p	signature:(IMPVersion *pstVersion)
IMP_System_Init	imp_system.h	/^int IMP_System_Init(void);$/;"	p	signature:(void)
IMP_System_MemPoolRequest	imp_system.h	/^int IMP_System_MemPoolRequest(int poolId, size_t size, char *name);$/;"	p	signature:(int poolId, size_t size, char *name)
IMP_System_ReadReg32	imp_system.h	/^uint32_t IMP_System_ReadReg32(uint32_t regAddr);$/;"	p	signature:(uint32_t regAddr)
IMP_System_RebaseTimeStamp	imp_system.h	/^int IMP_System_RebaseTimeStamp(int64_t basets);$/;"	p	signature:(int64_t basets)
IMP_System_UnBind	imp_system.h	/^int IMP_System_UnBind(IMPCell *srcCell, IMPCell *dstCell);$/;"	p	signature:(IMPCell *srcCell, IMPCell *dstCell)
IMP_System_WriteReg32	imp_system.h	/^void IMP_System_WriteReg32(uint32_t regAddr, uint32_t value);$/;"	p	signature:(uint32_t regAddr, uint32_t value)
INVHANDLE	imp_osd.h	65;"	d
ISP_CORE_EXPR_UNIT_LINE	imp_isp.h	/^	ISP_CORE_EXPR_UNIT_LINE,			\/**< 单位为曝光行 *\/$/;"	e	enum:__anon43
ISP_CORE_EXPR_UNIT_US	imp_isp.h	/^	ISP_CORE_EXPR_UNIT_US,				\/**< 单位为微秒 *\/$/;"	e	enum:__anon43
ISP_CORE_WB_MODE_AUTO	imp_isp.h	/^	ISP_CORE_WB_MODE_AUTO = 0,			\/**< 自动模式 *\/$/;"	e	enum:__anon50
ISP_CORE_WB_MODE_CLOUDY	imp_isp.h	/^	ISP_CORE_WB_MODE_CLOUDY,			\/**< 阴天 *\/$/;"	e	enum:__anon50
ISP_CORE_WB_MODE_COLORTEND	imp_isp.h	/^	ISP_CORE_WB_MODE_COLORTEND,			\/**< 自定义模式 *\/$/;"	e	enum:__anon50
ISP_CORE_WB_MODE_DAY_LIGHT	imp_isp.h	/^	ISP_CORE_WB_MODE_DAY_LIGHT,			\/**< 晴天 *\/$/;"	e	enum:__anon50
ISP_CORE_WB_MODE_FLOURESCENT	imp_isp.h	/^	ISP_CORE_WB_MODE_FLOURESCENT,                   \/**< 荧光灯 *\/$/;"	e	enum:__anon50
ISP_CORE_WB_MODE_INCANDESCENT	imp_isp.h	/^	ISP_CORE_WB_MODE_INCANDESCENT,                  \/**< 白炽灯 *\/$/;"	e	enum:__anon50
ISP_CORE_WB_MODE_MANUAL	imp_isp.h	/^	ISP_CORE_WB_MODE_MANUAL,			\/**< 手动模式 *\/$/;"	e	enum:__anon50
ISP_CORE_WB_MODE_SHADE	imp_isp.h	/^	ISP_CORE_WB_MODE_SHADE,				\/**< 阴影 *\/$/;"	e	enum:__anon50
ISP_CORE_WB_MODE_TWILIGHT	imp_isp.h	/^	ISP_CORE_WB_MODE_TWILIGHT,			\/**< 黄昏 *\/$/;"	e	enum:__anon50
ISP_CORE_WB_MODE_WARM_FLOURESCENT	imp_isp.h	/^	ISP_CORE_WB_MODE_WARM_FLOURESCENT,              \/**< 暖色荧光灯 *\/$/;"	e	enum:__anon50
ISP_OSD_REG_INV	imp_isp.h	/^	ISP_OSD_REG_INV       = 0, \/**< 未定义的 *\/$/;"	e	enum:__anon85
ISP_OSD_REG_PIC	imp_isp.h	/^	ISP_OSD_REG_PIC       = 1, \/**< ISP绘制图片*\/$/;"	e	enum:__anon85
Level_ns	imp_audio.h	/^enum Level_ns {$/;"	g
MAXISPOSDPIC	imp_isp.h	3575;"	d
MAXSUPCHNMUN	imp_isp.h	3574;"	d
MAX_AUDIO_FRAME_NUM	imp_audio.h	79;"	d
ManualEn	imp_isp.h	/^	IMPISPTuningOpsMode ManualEn;       \/**< 手动CCM使能 *\/$/;"	m	struct:__anon29	access:public
Matrix	imp_isp.h	/^	IMPISPCscMatrix Matrix;             \/**< 客户自定义的转换矩阵 *\/$/;"	m	struct:__anon28	access:public
NOBLOCK	imp_audio.h	/^	NOBLOCK = 1,			\/**< 非阻塞 *\/$/;"	e	enum:__anon132
NR_MAX_DEVICES	imp_common.h	/^	NR_MAX_DEVICES,$/;"	e	enum:__anon165
NS_HIGH	imp_audio.h	/^	NS_HIGH,		\/**< 高等级级别噪声抑制 *\/$/;"	e	enum:Level_ns
NS_LOW	imp_audio.h	/^	NS_LOW,			\/**< 低等级级别噪声抑制 *\/$/;"	e	enum:Level_ns
NS_MODERATE	imp_audio.h	/^	NS_MODERATE,	\/**< 中等级级别噪声抑制 *\/$/;"	e	enum:Level_ns
NS_VERYHIGH	imp_audio.h	/^	NS_VERYHIGH		\/**< 最高等级级别噪声抑制 *\/$/;"	e	enum:Level_ns
NV12dump	imp_common.h	/^void NV12dump(IMPFrameInfo *frame,char *pst);$/;"	p	signature:(IMPFrameInfo *frame,char *pst)
OSD_BLACK	imp_osd.h	/^	OSD_BLACK, 	\/* black *\/$/;"	e	enum:__anon91
OSD_GREEN	imp_osd.h	/^	OSD_GREEN, 	\/* green *\/$/;"	e	enum:__anon91
OSD_IPU_BLACK	imp_osd.h	/^     OSD_IPU_BLACK   = 0xff000000, \/**< 黑色 *\/$/;"	e	enum:__anon92
OSD_IPU_BLUE	imp_osd.h	/^     OSD_IPU_BLUE    = 0xff0000ff, \/**< 蓝色 *\/$/;"	e	enum:__anon92
OSD_IPU_GREEN	imp_osd.h	/^     OSD_IPU_GREEN   = 0xff00ff00, \/**< 绿色 *\/$/;"	e	enum:__anon92
OSD_IPU_RED	imp_osd.h	/^     OSD_IPU_RED     = 0xffff0000, \/**< 红色 *\/$/;"	e	enum:__anon92
OSD_IPU_WHITE	imp_osd.h	/^     OSD_IPU_WHITE   = 0xffffffff, \/**< 白色 *\/$/;"	e	enum:__anon92
OSD_RED	imp_osd.h	/^	OSD_RED,	\/* red *\/$/;"	e	enum:__anon91
OSD_REG_BITMAP	imp_osd.h	/^	OSD_REG_BITMAP		= 5, \/**< 点阵图片 *\/$/;"	e	enum:__anon93
OSD_REG_COVER	imp_osd.h	/^	OSD_REG_COVER		= 6, \/**< 矩形遮挡 *\/$/;"	e	enum:__anon93
OSD_REG_FOUR_CORNER_RECT	imp_osd.h	/^	OSD_REG_FOUR_CORNER_RECT  = 4, \/**< 四角矩形 *\/$/;"	e	enum:__anon93
OSD_REG_HORIZONTAL_LINE	imp_osd.h	/^	OSD_REG_HORIZONTAL_LINE		= 1, \/**< 横线 *\/$/;"	e	enum:__anon93
OSD_REG_INV	imp_osd.h	/^	OSD_REG_INV					= 0, \/**< 未定义的 *\/$/;"	e	enum:__anon93
OSD_REG_ISP_COVER	imp_osd.h	/^	OSD_REG_ISP_COVER	  = 12, \/*ISP绘制矩形遮挡*\/$/;"	e	enum:__anon93
OSD_REG_ISP_LINE_RECT	imp_osd.h	/^	OSD_REG_ISP_LINE_RECT = 11, \/*ISP绘制线或框*\/$/;"	e	enum:__anon93
OSD_REG_ISP_PIC	imp_osd.h	/^	OSD_REG_ISP_PIC 	  = 10, \/*ISP绘制图片*\/$/;"	e	enum:__anon93
OSD_REG_MOSAIC	imp_osd.h	/^	OSD_REG_MOSAIC	  = 13, \/*马赛克*\/$/;"	e	enum:__anon93
OSD_REG_PIC	imp_osd.h	/^	OSD_REG_PIC			= 7, \/**< 图片，适合用作Logo或时间戳 *\/$/;"	e	enum:__anon93
OSD_REG_PIC_RMEM	imp_osd.h	/^	OSD_REG_PIC_RMEM	= 8, \/**< 图片，适合用作Logo或时间戳, 使用RMEM内存 *\/$/;"	e	enum:__anon93
OSD_REG_RECT	imp_osd.h	/^	OSD_REG_RECT		= 3, \/**< 矩形 *\/$/;"	e	enum:__anon93
OSD_REG_SLASH	imp_osd.h	/^	OSD_REG_SLASH       = 9, \/*斜线*\/$/;"	e	enum:__anon93
OSD_REG_VERTICAL_LINE	imp_osd.h	/^	OSD_REG_VERTICAL_LINE		= 2, \/**< 竖线 *\/$/;"	e	enum:__anon93
OSD_YELLOW	imp_osd.h	/^	OSD_YELLOW, \/* yellow *\/$/;"	e	enum:__anon91
PIX_FMT_0BGR	imp_common.h	/^	PIX_FMT_0BGR,	   \/**< packed BGR 8:8:8, 32bpp, 0BGR0BGR... *\/$/;"	e	enum:__anon170
PIX_FMT_0RGB	imp_common.h	/^	PIX_FMT_0RGB,      \/**< packed RGB 8:8:8, 32bpp, 0RGB0RGB... *\/$/;"	e	enum:__anon170
PIX_FMT_ABGR	imp_common.h	/^	PIX_FMT_ABGR,	   \/**< packed ABGR 8:8:8:8, 32bpp, ABGRABGR... *\/$/;"	e	enum:__anon170
PIX_FMT_ARGB	imp_common.h	/^	PIX_FMT_ARGB,      \/**< packed ARGB 8:8:8:8, 32bpp, ARGBARGB... *\/$/;"	e	enum:__anon170
PIX_FMT_BAYER_BGGR8	imp_common.h	/^	PIX_FMT_BAYER_BGGR8,    \/**< bayer, BGBG..(odd line), GRGR..(even line), 8-bit samples *\/$/;"	e	enum:__anon170
PIX_FMT_BAYER_GBRG8	imp_common.h	/^	PIX_FMT_BAYER_GBRG8,    \/**< bayer, GBGB..(odd line), RGRG..(even line), 8-bit samples *\/$/;"	e	enum:__anon170
PIX_FMT_BAYER_GRBG8	imp_common.h	/^	PIX_FMT_BAYER_GRBG8,    \/**< bayer, GRGR..(odd line), BGBG..(even line), 8-bit samples *\/$/;"	e	enum:__anon170
PIX_FMT_BAYER_RGGB8	imp_common.h	/^	PIX_FMT_BAYER_RGGB8,    \/**< bayer, RGRG..(odd line), GBGB..(even line), 8-bit samples *\/$/;"	e	enum:__anon170
PIX_FMT_BGR0	imp_common.h	/^	PIX_FMT_BGR0,	   \/**< packed BGR 8:8:8, 32bpp, BGR0BGR0... *\/$/;"	e	enum:__anon170
PIX_FMT_BGR24	imp_common.h	/^	PIX_FMT_BGR24,     \/**< packed RGB 8:8:8, 24bpp, BGRBGR... *\/$/;"	e	enum:__anon170
PIX_FMT_BGR555BE	imp_common.h	/^	PIX_FMT_BGR555BE,  \/**< packed BGR 5:5:5, 16bpp, (msb)1A 5B 5G 5R(lsb), big-endian, most significant bit to 1 *\/$/;"	e	enum:__anon170
PIX_FMT_BGR555LE	imp_common.h	/^	PIX_FMT_BGR555LE,  \/**< packed BGR 5:5:5, 16bpp, (msb)1A 5B 5G 5R(lsb), little-endian, most significant bit to 1 *\/$/;"	e	enum:__anon170
PIX_FMT_BGR565BE	imp_common.h	/^	PIX_FMT_BGR565BE,  \/**< packed BGR 5:6:5, 16bpp, (msb)	 5B 6G 5R(lsb), big-endian *\/$/;"	e	enum:__anon170
PIX_FMT_BGR565LE	imp_common.h	/^	PIX_FMT_BGR565LE,  \/**< packed BGR 5:6:5, 16bpp, (msb)	 5B 6G 5R(lsb), little-endian *\/$/;"	e	enum:__anon170
PIX_FMT_BGRA	imp_common.h	/^	PIX_FMT_BGRA,	   \/**< packed BGRA 8:8:8:8, 32bpp, BGRABGRA... *\/$/;"	e	enum:__anon170
PIX_FMT_GRAY8	imp_common.h	/^	PIX_FMT_GRAY8,     \/**<	   Y	    ,  8bpp *\/$/;"	e	enum:__anon170
PIX_FMT_HSV	imp_common.h	/^	PIX_FMT_HSV,$/;"	e	enum:__anon170
PIX_FMT_MONOBLACK	imp_common.h	/^	PIX_FMT_MONOBLACK, \/**<	   Y	    ,  1bpp, 0 is black, 1 is white, in each byte pixels are ordered from the msb to the lsb *\/$/;"	e	enum:__anon170
PIX_FMT_MONOWHITE	imp_common.h	/^	PIX_FMT_MONOWHITE, \/**<	   Y	    ,  1bpp, 0 is white, 1 is black, in each byte pixels are ordered from the msb to the lsb *\/$/;"	e	enum:__anon170
PIX_FMT_NB	imp_common.h	/^	PIX_FMT_NB,$/;"	e	enum:__anon170
PIX_FMT_NV12	imp_common.h	/^	PIX_FMT_NV12,      \/**< planar YUV 4:2:0, 12bpp, 1 plane for Y and 1 plane for the UV components, which are interleaved (first byte U and the following byte V) *\/$/;"	e	enum:__anon170
PIX_FMT_NV21	imp_common.h	/^	PIX_FMT_NV21,      \/**< as above, but U and V bytes are swapped *\/$/;"	e	enum:__anon170
PIX_FMT_RAW	imp_common.h	/^	PIX_FMT_RAW,$/;"	e	enum:__anon170
PIX_FMT_RAW16	imp_common.h	/^	PIX_FMT_RAW16,$/;"	e	enum:__anon170
PIX_FMT_RAW8	imp_common.h	/^	PIX_FMT_RAW8,$/;"	e	enum:__anon170
PIX_FMT_RGB0	imp_common.h	/^	PIX_FMT_RGB0,	   \/**< packed RGB 8:8:8, 32bpp, RGB0RGB0... *\/$/;"	e	enum:__anon170
PIX_FMT_RGB24	imp_common.h	/^	PIX_FMT_RGB24,     \/**< packed RGB 8:8:8, 24bpp, RGBRGB... *\/$/;"	e	enum:__anon170
PIX_FMT_RGB555BE	imp_common.h	/^	PIX_FMT_RGB555BE,  \/**< packed RGB 5:5:5, 16bpp, (msb)1A 5R 5G 5B(lsb), big-endian, most significant bit to 0 *\/$/;"	e	enum:__anon170
PIX_FMT_RGB555LE	imp_common.h	/^	PIX_FMT_RGB555LE,  \/**< packed RGB 5:5:5, 16bpp, (msb)1A 5R 5G 5B(lsb), little-endian, most significant bit to 0 *\/$/;"	e	enum:__anon170
PIX_FMT_RGB565BE	imp_common.h	/^	PIX_FMT_RGB565BE,  \/**< packed RGB 5:6:5, 16bpp, (msb)	  5R 6G 5B(lsb), big-endian *\/$/;"	e	enum:__anon170
PIX_FMT_RGB565LE	imp_common.h	/^	PIX_FMT_RGB565LE,  \/**< packed RGB 5:6:5, 16bpp, (msb)	  5R 6G 5B(lsb), little-endian *\/$/;"	e	enum:__anon170
PIX_FMT_RGBA	imp_common.h	/^	PIX_FMT_RGBA,	   \/**< packed RGBA 8:8:8:8, 32bpp, RGBARGBA... *\/$/;"	e	enum:__anon170
PIX_FMT_UVY422	imp_common.h	/^	PIX_FMT_UVY422,$/;"	e	enum:__anon170
PIX_FMT_UYVY422	imp_common.h	/^	PIX_FMT_UYVY422,   \/**< packed YUV 4:2:2, 16bpp, Cb Y0 Cr Y1 *\/$/;"	e	enum:__anon170
PIX_FMT_VUY422	imp_common.h	/^	PIX_FMT_VUY422,$/;"	e	enum:__anon170
PIX_FMT_YUV410P	imp_common.h	/^	PIX_FMT_YUV410P,   \/**< planar YUV 4:1:0,  9bpp, (1 Cr & Cb sample per 4x4 Y samples) *\/$/;"	e	enum:__anon170
PIX_FMT_YUV411P	imp_common.h	/^	PIX_FMT_YUV411P,   \/**< planar YUV 4:1:1, 12bpp, (1 Cr & Cb sample per 4x1 Y samples) *\/$/;"	e	enum:__anon170
PIX_FMT_YUV420P	imp_common.h	/^	PIX_FMT_YUV420P,   \/**< planar YUV 4:2:0, 12bpp, (1 Cr & Cb sample per 2x2 Y samples) *\/$/;"	e	enum:__anon170
PIX_FMT_YUV422	imp_common.h	/^	PIX_FMT_YUV422,$/;"	e	enum:__anon170
PIX_FMT_YUV422P	imp_common.h	/^	PIX_FMT_YUV422P,   \/**< planar YUV 4:2:2, 16bpp, (1 Cr & Cb sample per 2x1 Y samples) *\/$/;"	e	enum:__anon170
PIX_FMT_YUV444P	imp_common.h	/^	PIX_FMT_YUV444P,   \/**< planar YUV 4:4:4, 24bpp, (1 Cr & Cb sample per 1x1 Y samples) *\/$/;"	e	enum:__anon170
PIX_FMT_YUYV422	imp_common.h	/^	PIX_FMT_YUYV422,   \/**< packed YUV 4:2:2, 16bpp, Y0 Cb Y1 Cr *\/$/;"	e	enum:__anon170
PIX_FMT_YVU422	imp_common.h	/^	PIX_FMT_YVU422,$/;"	e	enum:__anon170
PT_ADPCM	imp_audio.h	/^	PT_ADPCM	= 5,$/;"	e	enum:__anon137
PT_AEC	imp_audio.h	/^	PT_AEC		= 4,$/;"	e	enum:__anon137
PT_G711A	imp_audio.h	/^	PT_G711A	= 1,$/;"	e	enum:__anon137
PT_G711U	imp_audio.h	/^	PT_G711U	= 2,$/;"	e	enum:__anon137
PT_G726	imp_audio.h	/^	PT_G726 	= 3,$/;"	e	enum:__anon137
PT_H264	imp_common.h	/^	PT_H264,					\/**< H264视频协议类型 *\/$/;"	e	enum:__anon169
PT_H265	imp_common.h	/^	PT_H265,					\/**< H265视频协议类型 *\/$/;"	e	enum:__anon169
PT_JPEG	imp_common.h	/^	PT_JPEG,					\/**< JPEG图像协议类型 *\/$/;"	e	enum:__anon169
PT_MAX	imp_audio.h	/^	PT_MAX		= 6,$/;"	e	enum:__anon137
PT_PCM	imp_audio.h	/^	PT_PCM		= 0,$/;"	e	enum:__anon137
Rev	imp_audio.h	/^	int Rev;							\/**< 保留 *\/$/;"	m	struct:__anon141	access:public
Rev	imp_dmic.h	/^	int Rev;		  \/*保留*\/$/;"	m	struct:__anon158	access:public
SatEn	imp_isp.h	/^	IMPISPTuningOpsMode SatEn;          \/**< 手动模式下饱和度使能 *\/$/;"	m	struct:__anon29	access:public
TISP_AE_SCENCE_GLOBAL_ENABLE	imp_isp.h	/^	TISP_AE_SCENCE_GLOBAL_ENABLE,  \/**< GLOBAL 使能此场景模式 *\/$/;"	e	enum:__anon45
TISP_AE_SCENCE_ROI_ENABLE	imp_isp.h	/^	TISP_AE_SCENCE_ROI_ENABLE,     \/**< ROI 使能此场景模式 *\/$/;"	e	enum:__anon45
TX_SENSOR_CONTROL_INTERFACE_I2C	imp_isp.h	/^	TX_SENSOR_CONTROL_INTERFACE_I2C = 1,	\/**< I2C控制总线 *\/$/;"	e	enum:__anon4
TX_SENSOR_CONTROL_INTERFACE_SPI	imp_isp.h	/^	TX_SENSOR_CONTROL_INTERFACE_SPI,	\/**< SPI控制总线 *\/$/;"	e	enum:__anon4
TargetLevelDbfs	imp_audio.h	/^	int TargetLevelDbfs;	\/**< 增益级别,取值为[0, 31], 这指目标音量级别,单位为db,为负值.值越小,音量越大. *\/$/;"	m	struct:__anon148	access:public
TotalGainDb	imp_isp.h	/^	uint32_t TotalGainDb;                               \/**< AE total gain，单位为db(只读) *\/$/;"	m	struct:__anon44	access:public
TotalGainDbShort	imp_isp.h	/^	uint32_t TotalGainDbShort;                          \/**< AE 短帧 total gain, 单位为db *\/$/;"	m	struct:__anon44	access:public
Wdr_mode	imp_isp.h	/^	uint32_t Wdr_mode;									\/**< 当前是否WDR模式*\/$/;"	m	struct:__anon69	access:public
__IMP_AUDIO_H__	imp_audio.h	8;"	d
__IMP_COMMON_H__	imp_common.h	8;"	d
__IMP_DECODER_H__	imp_decoder.h	8;"	d
__IMP_DMIC_H	imp_dmic.h	2;"	d
__IMP_EMU_FRAMESOURCE_H__	imp_emu_framesource.h	9;"	d
__IMP_ENCODER_H__	imp_encoder.h	8;"	d
__IMP_FRAMESOURCE_H__	imp_framesource.h	8;"	d
__IMP_ISP_H__	imp_isp.h	8;"	d
__IMP_IVS_BASE_MOVE_H__	imp_ivs_base_move.h	8;"	d
__IMP_IVS_H__	imp_ivs.h	8;"	d
__IMP_IVS_MOVE_H__	imp_ivs_move.h	8;"	d
__IMP_LOG_H__	imp_log.h	8;"	d
__IMP_OSD_H__	imp_osd.h	8;"	d
__IMP_SYSTEM_H__	imp_system.h	8;"	d
__IMP_UTILS_H__	imp_utils.h	8;"	d
__ISP_OSD_H__	isp_osd.h	27;"	d
__anon100::stCoverAttr	imp_osd.h	/^	IMPISPMaskBlockAttr stCoverAttr;     \/*ISP绘制矩形遮挡*\/$/;"	m	struct:__anon100	access:public
__anon100::stDrawAttr	imp_osd.h	/^	IMPISPDrawBlockAttr stDrawAttr;      \/*ISP绘制线、框属性*\/$/;"	m	struct:__anon100	access:public
__anon100::stpicAttr	imp_osd.h	/^	IMPISPOSDBlockAttr  stpicAttr;       \/*ISP绘制图片属性*\/$/;"	m	struct:__anon100	access:public
__anon101::data	imp_osd.h	/^	IMPOSDRgnAttrData	data;			\/**< OSD区域属性数据 *\/$/;"	m	struct:__anon101	access:public
__anon101::fmt	imp_osd.h	/^	IMPPixelFormat		fmt;			\/**< 点格式 *\/$/;"	m	struct:__anon101	access:public
__anon101::fontData	imp_osd.h	/^	IMPOSDFontAttrData  fontData;		\/**< OSD Font属性数据 *\/$/;"	m	struct:__anon101	access:public
__anon101::line	imp_osd.h	/^	IMPLine				line;			\/**< 直线数据*\/$/;"	m	struct:__anon101	access:public
__anon101::mosaicAttr	imp_osd.h	/^	IMPOSDMosaicAttr	mosaicAttr;		\/**< 马赛克数据 *\/$/;"	m	struct:__anon101	access:public
__anon101::osdispdraw	imp_osd.h	/^	IMPOSDIspDraw       osdispdraw;     \/**< ISP绘制OSD的相关属性*\/$/;"	m	struct:__anon101	access:public
__anon101::rect	imp_osd.h	/^	IMPRect				rect;			\/**< 矩形数据 *\/$/;"	m	struct:__anon101	access:public
__anon101::type	imp_osd.h	/^	IMPOsdRgnType		type;			\/**< OSD区域类型 *\/$/;"	m	struct:__anon101	access:public
__anon102::minus	imp_osd.h	/^	uint64_t minus;						\/**< 下限 *\/$/;"	m	struct:__anon102	access:public
__anon102::plus	imp_osd.h	/^	uint64_t plus;						\/**< 上限 *\/$/;"	m	struct:__anon102	access:public
__anon102::ts	imp_osd.h	/^	uint64_t ts;						\/**< 时间戳 *\/$/;"	m	struct:__anon102	access:public
__anon103::bgAlhpa	imp_osd.h	/^	int					bgAlhpa;		\/**< 背景Alpha *\/$/;"	m	struct:__anon103	access:public
__anon103::fgAlhpa	imp_osd.h	/^	int					fgAlhpa;		\/**< 前景Alpha *\/$/;"	m	struct:__anon103	access:public
__anon103::gAlphaEn	imp_osd.h	/^	int					gAlphaEn;		\/**< Alpha开关 *\/$/;"	m	struct:__anon103	access:public
__anon103::layer	imp_osd.h	/^	int					layer;			\/**< 显示层 *\/$/;"	m	struct:__anon103	access:public
__anon103::offPos	imp_osd.h	/^	IMPPoint			offPos;			\/**< 显示起始坐标 *\/$/;"	m	struct:__anon103	access:public
__anon103::scalex	imp_osd.h	/^	float				scalex;			\/**< 缩放x参数 *\/$/;"	m	struct:__anon103	access:public
__anon103::scaley	imp_osd.h	/^	float				scaley;			\/**< 缩放y参数 *\/$/;"	m	struct:__anon103	access:public
__anon103::show	imp_osd.h	/^	int					show;			\/**< 是否显示 *\/$/;"	m	struct:__anon103	access:public
__anon106::h264NalType	imp_encoder.h	/^	IMPEncoderH264NaluType    h264NalType;      \/**< H264E NALU 码流包类型 *\/$/;"	m	union:__anon106	access:public
__anon106::h265NalType	imp_encoder.h	/^	IMPEncoderH265NaluType    h265NalType;      \/**< H265E NALU 码流包类型 *\/$/;"	m	union:__anon106	access:public
__anon108::frameEnd	imp_encoder.h	/^	bool	                frameEnd;           \/**< 帧结束标识 *\/$/;"	m	struct:__anon108	access:public
__anon108::length	imp_encoder.h	/^	uint32_t                length;             \/**< 码流包长度 *\/$/;"	m	struct:__anon108	access:public
__anon108::nalType	imp_encoder.h	/^	IMPEncoderNalType       nalType;            \/**< H.264和H.265编码Channel码流NAL类型 *\/$/;"	m	struct:__anon108	access:public
__anon108::offset	imp_encoder.h	/^	uint32_t                offset;             \/**< 码流包地址偏移 *\/$/;"	m	struct:__anon108	access:public
__anon108::sliceType	imp_encoder.h	/^	IMPEncoderSliceType     sliceType;$/;"	m	struct:__anon108	access:public
__anon108::timestamp	imp_encoder.h	/^	int64_t                 timestamp;          \/**< 时间戳，单位us *\/$/;"	m	struct:__anon108	access:public
__anon109::pack	imp_encoder.h	/^	IMPEncoderPack          *pack;              \/**< 帧码流包结构 *\/$/;"	m	struct:__anon109	access:public
__anon109::packCount	imp_encoder.h	/^	uint32_t                packCount;          \/**< 一帧码流的所有包的个数 *\/$/;"	m	struct:__anon109	access:public
__anon109::phyAddr	imp_encoder.h	/^	uint32_t                phyAddr;            \/**< 帧码流物理地址 *\/$/;"	m	struct:__anon109	access:public
__anon109::seq	imp_encoder.h	/^	uint32_t                seq;                \/**< 编码帧码流序列号 *\/$/;"	m	struct:__anon109	access:public
__anon109::streamSize	imp_encoder.h	/^	uint32_t                streamSize;         \/**< virAddr对应分配的地址空间大小 *\/$/;"	m	struct:__anon109	access:public
__anon109::virAddr	imp_encoder.h	/^	uint32_t                virAddr;            \/**< 帧码流包虚拟地址 *\/$/;"	m	struct:__anon109	access:public
__anon115::enable	imp_encoder.h	/^	bool        enable;     \/**< 是否进行裁剪,取值范围:[FALSE, TRUE],TRUE:使能裁剪,FALSE:不使能裁剪 *\/$/;"	m	struct:__anon115	access:public
__anon115::h	imp_encoder.h	/^	uint32_t    h;          \/**< 裁剪的区域,高 *\/$/;"	m	struct:__anon115	access:public
__anon115::w	imp_encoder.h	/^	uint32_t    w;          \/**< 裁剪的区域,宽 *\/$/;"	m	struct:__anon115	access:public
__anon115::x	imp_encoder.h	/^	uint32_t    x;          \/**< 裁剪的区域,左上角x坐标 *\/$/;"	m	struct:__anon115	access:public
__anon115::y	imp_encoder.h	/^	uint32_t    y;          \/**< 裁剪的区域,左上角y坐标 *\/$/;"	m	struct:__anon115	access:public
__anon117::bufSize	imp_encoder.h	/^	uint32_t                bufSize;        \/**< 配置 buffer 大小，取值范围:不小于图像宽高乘积的1.5倍。设置通道编码属性时，将此参数设置为0，IMP内部会自动计算大小 *\/$/;"	m	struct:__anon117	access:public
__anon117::crop	imp_encoder.h	/^	IMPEncoderCropCfg       crop;           \/**< 编码器裁剪属性 *\/$/;"	m	struct:__anon117	access:public
__anon117::eEncOptions	imp_encoder.h	/^	uint32_t                eEncOptions;$/;"	m	struct:__anon117	access:public
__anon117::eEncTools	imp_encoder.h	/^	uint32_t                eEncTools;$/;"	m	struct:__anon117	access:public
__anon117::ePicFormat	imp_encoder.h	/^	IMPEncoderPicFormat     ePicFormat;$/;"	m	struct:__anon117	access:public
__anon117::eProfile	imp_encoder.h	/^	IMPEncoderProfile       eProfile;$/;"	m	struct:__anon117	access:public
__anon117::encVputype	imp_encoder.h	/^	IMPEncoderVpuType       encVputype;$/;"	m	struct:__anon117	access:public
__anon117::uHeight	imp_encoder.h	/^	uint16_t                uHeight;$/;"	m	struct:__anon117	access:public
__anon117::uLevel	imp_encoder.h	/^	uint8_t                 uLevel;$/;"	m	struct:__anon117	access:public
__anon117::uTier	imp_encoder.h	/^	uint8_t                 uTier;$/;"	m	struct:__anon117	access:public
__anon117::uWidth	imp_encoder.h	/^	uint16_t                uWidth;$/;"	m	struct:__anon117	access:public
__anon119::bEnableLT	imp_encoder.h	/^	bool                    bEnableLT;$/;"	m	struct:__anon119	access:public
__anon119::bLTRC	imp_encoder.h	/^	bool                    bLTRC;$/;"	m	struct:__anon119	access:public
__anon119::uFreqLT	imp_encoder.h	/^	uint32_t                uFreqLT;$/;"	m	struct:__anon119	access:public
__anon119::uGopCtrlMode	imp_encoder.h	/^	IMPEncoderGopCtrlMode   uGopCtrlMode;$/;"	m	struct:__anon119	access:public
__anon119::uGopLength	imp_encoder.h	/^	uint16_t                uGopLength;$/;"	m	struct:__anon119	access:public
__anon119::uMaxSameSenceCnt	imp_encoder.h	/^	uint32_t                uMaxSameSenceCnt;$/;"	m	struct:__anon119	access:public
__anon119::uNotifyUserLTInter	imp_encoder.h	/^	uint8_t                 uNotifyUserLTInter;$/;"	m	struct:__anon119	access:public
__anon11::addr	imp_isp.h	/^        uint32_t addr;   \/**< 寄存器地址 *\/$/;"	m	struct:__anon11	access:public
__anon11::value	imp_isp.h	/^        uint32_t value;  \/**< 寄存器值 *\/$/;"	m	struct:__anon11	access:public
__anon121::iInitialQP	imp_encoder.h	/^	int16_t               iInitialQP;$/;"	m	struct:__anon121	access:public
__anon121::iMaxQP	imp_encoder.h	/^	int16_t               iMaxQP;$/;"	m	struct:__anon121	access:public
__anon121::iMinQP	imp_encoder.h	/^	int16_t               iMinQP;$/;"	m	struct:__anon121	access:public
__anon122::eRcOptions	imp_encoder.h	/^	uint32_t              eRcOptions;$/;"	m	struct:__anon122	access:public
__anon122::iIPDelta	imp_encoder.h	/^	int16_t               iIPDelta;$/;"	m	struct:__anon122	access:public
__anon122::iInitialQP	imp_encoder.h	/^	int16_t               iInitialQP;$/;"	m	struct:__anon122	access:public
__anon122::iMaxQP	imp_encoder.h	/^	int16_t               iMaxQP;$/;"	m	struct:__anon122	access:public
__anon122::iMinQP	imp_encoder.h	/^	int16_t               iMinQP;$/;"	m	struct:__anon122	access:public
__anon122::iPBDelta	imp_encoder.h	/^	int16_t               iPBDelta;$/;"	m	struct:__anon122	access:public
__anon122::uMaxPictureSize	imp_encoder.h	/^	uint32_t              uMaxPictureSize;$/;"	m	struct:__anon122	access:public
__anon122::uTargetBitRate	imp_encoder.h	/^	uint32_t              uTargetBitRate;$/;"	m	struct:__anon122	access:public
__anon123::eRcOptions	imp_encoder.h	/^	uint32_t              eRcOptions;$/;"	m	struct:__anon123	access:public
__anon123::iIPDelta	imp_encoder.h	/^	int16_t               iIPDelta;$/;"	m	struct:__anon123	access:public
__anon123::iInitialQP	imp_encoder.h	/^	int16_t               iInitialQP;$/;"	m	struct:__anon123	access:public
__anon123::iMaxQP	imp_encoder.h	/^	int16_t               iMaxQP;$/;"	m	struct:__anon123	access:public
__anon123::iMinQP	imp_encoder.h	/^	int16_t               iMinQP;$/;"	m	struct:__anon123	access:public
__anon123::iPBDelta	imp_encoder.h	/^	int16_t               iPBDelta;$/;"	m	struct:__anon123	access:public
__anon123::uMaxBitRate	imp_encoder.h	/^	uint32_t              uMaxBitRate;$/;"	m	struct:__anon123	access:public
__anon123::uMaxPictureSize	imp_encoder.h	/^	uint32_t              uMaxPictureSize;$/;"	m	struct:__anon123	access:public
__anon123::uTargetBitRate	imp_encoder.h	/^	uint32_t              uTargetBitRate;$/;"	m	struct:__anon123	access:public
__anon124::eRcOptions	imp_encoder.h	/^	uint32_t              eRcOptions;$/;"	m	struct:__anon124	access:public
__anon124::iIPDelta	imp_encoder.h	/^	int16_t               iIPDelta;$/;"	m	struct:__anon124	access:public
__anon124::iInitialQP	imp_encoder.h	/^	int16_t               iInitialQP;$/;"	m	struct:__anon124	access:public
__anon124::iMaxQP	imp_encoder.h	/^	int16_t               iMaxQP;$/;"	m	struct:__anon124	access:public
__anon124::iMinQP	imp_encoder.h	/^	int16_t               iMinQP;$/;"	m	struct:__anon124	access:public
__anon124::iPBDelta	imp_encoder.h	/^	int16_t               iPBDelta;$/;"	m	struct:__anon124	access:public
__anon124::uMaxBitRate	imp_encoder.h	/^	uint32_t              uMaxBitRate;$/;"	m	struct:__anon124	access:public
__anon124::uMaxPSNR	imp_encoder.h	/^	uint16_t              uMaxPSNR;$/;"	m	struct:__anon124	access:public
__anon124::uMaxPictureSize	imp_encoder.h	/^	uint32_t              uMaxPictureSize;$/;"	m	struct:__anon124	access:public
__anon124::uTargetBitRate	imp_encoder.h	/^	uint32_t              uTargetBitRate;$/;"	m	struct:__anon124	access:public
__anon125::__anon126::attrCappedQuality	imp_encoder.h	/^		IMPEncoderAttrCappedQuality    attrCappedQuality;$/;"	m	union:__anon125::__anon126	access:public
__anon125::__anon126::attrCappedVbr	imp_encoder.h	/^		IMPEncoderAttrCappedVbr        attrCappedVbr;$/;"	m	union:__anon125::__anon126	access:public
__anon125::__anon126::attrCbr	imp_encoder.h	/^		IMPEncoderAttrCbr              attrCbr;$/;"	m	union:__anon125::__anon126	access:public
__anon125::__anon126::attrFixQp	imp_encoder.h	/^		IMPEncoderAttrFixQP            attrFixQp;$/;"	m	union:__anon125::__anon126	access:public
__anon125::__anon126::attrVbr	imp_encoder.h	/^		IMPEncoderAttrVbr              attrVbr;$/;"	m	union:__anon125::__anon126	access:public
__anon125::rcMode	imp_encoder.h	/^	IMPEncoderRcMode                   rcMode;$/;"	m	struct:__anon125	access:public
__anon127::frmRateDen	imp_encoder.h	/^	uint32_t    frmRateDen;             \/**< 在一帧内的时间单元的数量, 以时间单元为单位。即帧率的分母 *\/$/;"	m	struct:__anon127	access:public
__anon127::frmRateNum	imp_encoder.h	/^	uint32_t    frmRateNum;             \/**< 在一秒钟内的时间单元的数量, 以时间单元为单位。即帧率的分子 *\/$/;"	m	struct:__anon127	access:public
__anon128::attrRcMode	imp_encoder.h	/^	IMPEncoderAttrRcMode    attrRcMode;$/;"	m	struct:__anon128	access:public
__anon128::outFrmRate	imp_encoder.h	/^	IMPEncoderFrmRate       outFrmRate;$/;"	m	struct:__anon128	access:public
__anon129::bEnableIvdc	imp_encoder.h	/^	bool                    bEnableIvdc;    \/**< ISP VPU Direct Connect使能标志*\/$/;"	m	struct:__anon129	access:public
__anon129::encAttr	imp_encoder.h	/^	IMPEncoderEncAttr       encAttr;    \/**< 编码器属性结构体 *\/$/;"	m	struct:__anon129	access:public
__anon129::gopAttr	imp_encoder.h	/^	IMPEncoderGopAttr       gopAttr;    \/**< 编码器属性结构体 *\/$/;"	m	struct:__anon129	access:public
__anon129::rcAttr	imp_encoder.h	/^	IMPEncoderRcAttr        rcAttr;     \/**< 码率控制器属性结构体,只针对H264和h265 *\/$/;"	m	struct:__anon129	access:public
__anon12::fps	imp_isp.h	/^	uint32_t fps;       \/**< sensor 帧率 *\/$/;"	m	struct:__anon12	access:public
__anon12::height	imp_isp.h	/^	uint32_t height;    \/**< sensor输出的高度 *\/$/;"	m	struct:__anon12	access:public
__anon12::hts	imp_isp.h	/^	uint32_t hts;       \/**< sensor hts *\/$/;"	m	struct:__anon12	access:public
__anon12::vts	imp_isp.h	/^	uint32_t vts;       \/**< sensor vts *\/$/;"	m	struct:__anon12	access:public
__anon12::width	imp_isp.h	/^	uint32_t width;     \/**< sensor输出宽度 *\/$/;"	m	struct:__anon12	access:public
__anon130::curPacks	imp_encoder.h	/^	uint32_t    curPacks;               \/**< 当前帧的码流包个数 *\/$/;"	m	struct:__anon130	access:public
__anon130::leftPics	imp_encoder.h	/^	uint32_t    leftPics;               \/**< 待编码的图像数 *\/$/;"	m	struct:__anon130	access:public
__anon130::leftStreamBytes	imp_encoder.h	/^	uint32_t    leftStreamBytes;        \/**< 码流buffer剩余的byte数 *\/$/;"	m	struct:__anon130	access:public
__anon130::leftStreamFrames	imp_encoder.h	/^	uint32_t    leftStreamFrames;       \/**< 码流buffer剩余的帧数 *\/$/;"	m	struct:__anon130	access:public
__anon130::registered	imp_encoder.h	/^	bool        registered;             \/**< 注册到Group标志，取值范围:{TRUE, FALSE}，TRUE:注册，FALSE:未注册 *\/$/;"	m	struct:__anon130	access:public
__anon130::work_done	imp_encoder.h	/^	uint32_t    work_done;              \/**< 通道程序运行状态，0：正在运行，1，未运行 *\/$/;"	m	struct:__anon130	access:public
__anon131::qmem_table	imp_encoder.h	/^	uint8_t     qmem_table[128];        \/**< 用户自定义量化表*\/$/;"	m	struct:__anon131	access:public
__anon131::user_ql_en	imp_encoder.h	/^	bool        user_ql_en;             \/**< 0: 使用默认量化表; 1:使用用户量化表*\/$/;"	m	struct:__anon131	access:public
__anon139::bitwidth	imp_audio.h	/^	IMPAudioBitWidth bitwidth;			\/**< 音频采样精度 *\/$/;"	m	struct:__anon139	access:public
__anon139::chnCnt	imp_audio.h	/^	int chnCnt;							\/**< 支持的通道数目 *\/$/;"	m	struct:__anon139	access:public
__anon139::frmNum	imp_audio.h	/^	int frmNum;							\/**< 缓存帧的数目, 取值范围:[2, MAX_AUDIO_FRAME_NUM] *\/$/;"	m	struct:__anon139	access:public
__anon139::numPerFrm	imp_audio.h	/^	int numPerFrm;						\/**< 每帧的采样点个数 *\/$/;"	m	struct:__anon139	access:public
__anon139::samplerate	imp_audio.h	/^	IMPAudioSampleRate samplerate;		\/**< 音频采样率 *\/$/;"	m	struct:__anon139	access:public
__anon139::soundmode	imp_audio.h	/^	IMPAudioSoundMode soundmode;		\/**< 音频声道模式 *\/$/;"	m	struct:__anon139	access:public
__anon13::den	imp_isp.h	/^        uint32_t den;  \/**< 帧率的分母参数 *\/$/;"	m	struct:__anon13	access:public
__anon13::num	imp_isp.h	/^        uint32_t num;  \/**< 帧率的分子参数 *\/$/;"	m	struct:__anon13	access:public
__anon140::bitwidth	imp_audio.h	/^	IMPAudioBitWidth bitwidth;			\/**< 音频采样精度 *\/$/;"	m	struct:__anon140	access:public
__anon140::len	imp_audio.h	/^	int len;							\/**< 音频帧长度 *\/$/;"	m	struct:__anon140	access:public
__anon140::phyAddr	imp_audio.h	/^	uint32_t phyAddr;					\/**< 音频帧数据物理地址 *\/$/;"	m	struct:__anon140	access:public
__anon140::seq	imp_audio.h	/^	int seq;							\/**< 音频帧序号 *\/$/;"	m	struct:__anon140	access:public
__anon140::soundmode	imp_audio.h	/^	IMPAudioSoundMode soundmode;		\/**< 音频声道模式 *\/$/;"	m	struct:__anon140	access:public
__anon140::timeStamp	imp_audio.h	/^	int64_t timeStamp;					\/**< 音频帧数据时间戳 *\/$/;"	m	struct:__anon140	access:public
__anon140::virAddr	imp_audio.h	/^	uint32_t *virAddr;					\/**< 音频帧数据虚拟地址 *\/$/;"	m	struct:__anon140	access:public
__anon141::Rev	imp_audio.h	/^	int Rev;							\/**< 保留 *\/$/;"	m	struct:__anon141	access:public
__anon141::aecChn	imp_audio.h	/^	IMPAudioAecChn aecChn;				\/**< 选择回音消除的通道*\/$/;"	m	struct:__anon141	access:public
__anon141::usrFrmDepth	imp_audio.h	/^	int usrFrmDepth;					\/**< 音频帧缓存深度 *\/$/;"	m	struct:__anon141	access:public
__anon142::chnBusyNum	imp_audio.h	/^	int chnBusyNum;					\/**< 被占用的缓存块数 *\/$/;"	m	struct:__anon142	access:public
__anon142::chnFreeNum	imp_audio.h	/^	int chnFreeNum;					\/**< 空闲缓存块数 *\/$/;"	m	struct:__anon142	access:public
__anon142::chnTotalNum	imp_audio.h	/^	int chnTotalNum;				\/**< 输出通道总的缓存块数 *\/$/;"	m	struct:__anon142	access:public
__anon143::len	imp_audio.h	/^	int len;						\/**< 音频码流长度 *\/$/;"	m	struct:__anon143	access:public
__anon143::phyAddr	imp_audio.h	/^	uint32_t phyAddr;				\/**< 数据流物理地址 *\/$/;"	m	struct:__anon143	access:public
__anon143::seq	imp_audio.h	/^	int seq;						\/**< 音频码流序号 *\/$/;"	m	struct:__anon143	access:public
__anon143::stream	imp_audio.h	/^	uint8_t *stream;				\/**< 数据流指针 *\/$/;"	m	struct:__anon143	access:public
__anon143::timeStamp	imp_audio.h	/^	int64_t timeStamp;				\/**< 时间戳 *\/$/;"	m	struct:__anon143	access:public
__anon144::bufSize	imp_audio.h	/^	int bufSize;							\/**<  buf 大小，以帧为单位，[2～MAX_AUDIO_FRAME_NUM] *\/$/;"	m	struct:__anon144	access:public
__anon144::type	imp_audio.h	/^	IMPAudioPalyloadType type;				\/**< 音频净荷数据类型 *\/$/;"	m	struct:__anon144	access:public
__anon144::value	imp_audio.h	/^	uint32_t *value;						\/**< 协议属性指针 *\/$/;"	m	struct:__anon144	access:public
__anon145::closeEncoder	imp_audio.h	/^	int (*closeEncoder)(void *encoder);$/;"	m	struct:__anon145	access:public
__anon145::encoderFrm	imp_audio.h	/^	int (*encoderFrm)(void *encoder, IMPAudioFrame$/;"	m	struct:__anon145	access:public
__anon145::maxFrmLen	imp_audio.h	/^	int maxFrmLen;					\/**< 最大码流长度 *\/$/;"	m	struct:__anon145	access:public
__anon145::name	imp_audio.h	/^	char name[16];					\/**< 编码器名称 *\/$/;"	m	struct:__anon145	access:public
__anon145::openEncoder	imp_audio.h	/^	int (*openEncoder)(void *encoderAttr, void$/;"	m	struct:__anon145	access:public
__anon145::type	imp_audio.h	/^	IMPAudioPalyloadType type;		\/**< 编码协议类型 *\/$/;"	m	struct:__anon145	access:public
__anon146::bufSize	imp_audio.h	/^	int bufSize;						\/**< 音频解码缓存大小 *\/$/;"	m	struct:__anon146	access:public
__anon146::mode	imp_audio.h	/^	IMPAudioDecMode mode;				\/**< 解码方式 *\/$/;"	m	struct:__anon146	access:public
__anon146::type	imp_audio.h	/^	IMPAudioPalyloadType type;			\/**< 音频解码协议类型 *\/$/;"	m	struct:__anon146	access:public
__anon146::value	imp_audio.h	/^	void *value;						\/**< 具体协议属性指针 *\/$/;"	m	struct:__anon146	access:public
__anon147::closeDecoder	imp_audio.h	/^	int (*closeDecoder)(void *decoder);$/;"	m	struct:__anon147	access:public
__anon147::decodeFrm	imp_audio.h	/^	int (*decodeFrm)(void *decoder, unsigned char$/;"	m	struct:__anon147	access:public
__anon147::getFrmInfo	imp_audio.h	/^	int (*getFrmInfo)(void *decoder, void *info);$/;"	m	struct:__anon147	access:public
__anon147::name	imp_audio.h	/^	char name[16];					\/**< 音频解码器名字 *\/$/;"	m	struct:__anon147	access:public
__anon147::openDecoder	imp_audio.h	/^	int (*openDecoder)(void *decoderAttr, void$/;"	m	struct:__anon147	access:public
__anon147::type	imp_audio.h	/^	IMPAudioPalyloadType type;		\/**< 音频解码协议类型 *\/$/;"	m	struct:__anon147	access:public
__anon148::CompressionGaindB	imp_audio.h	/^	int CompressionGaindB;	\/**< 设置最大的增益值,[0, 90],0代表无增益,值越大,增益越高. *\/$/;"	m	struct:__anon148	access:public
__anon148::TargetLevelDbfs	imp_audio.h	/^	int TargetLevelDbfs;	\/**< 增益级别,取值为[0, 31], 这指目标音量级别,单位为db,为负值.值越小,音量越大. *\/$/;"	m	struct:__anon148	access:public
__anon150::frameInfo	imp_ivs_base_move.h	/^	IMPFrameInfo    frameInfo;                         \/**< 帧尺寸信息,只需要配置width和height *\/$/;"	m	struct:__anon150	access:public
__anon150::referenceNum	imp_ivs_base_move.h	/^	int             referenceNum;                      \/*<指定相对于当前帧的第-referenceNum帧为参考帧*\/$/;"	m	struct:__anon150	access:public
__anon150::sadMode	imp_ivs_base_move.h	/^	int             sadMode;                           \/*< SAD模式,0表示8*8*\/$/;"	m	struct:__anon150	access:public
__anon150::sense	imp_ivs_base_move.h	/^	int             sense;                             \/*<灵敏度,0-3,值越大灵敏度越大*\/$/;"	m	struct:__anon150	access:public
__anon150::skipFrameCnt	imp_ivs_base_move.h	/^	int             skipFrameCnt;                       \/*< 隔帧检测的个数 *\/$/;"	m	struct:__anon150	access:public
__anon151::data	imp_ivs_base_move.h	/^	uint8_t* data;$/;"	m	struct:__anon151	access:public
__anon151::datalen	imp_ivs_base_move.h	/^	int datalen;$/;"	m	struct:__anon151	access:public
__anon151::ret	imp_ivs_base_move.h	/^	int ret;$/;"	m	struct:__anon151	access:public
__anon151::timeStamp	imp_ivs_base_move.h	/^	int64_t timeStamp;	\/**< 帧的时间戳 *\/$/;"	m	struct:__anon151	access:public
__anon155::bitwidth	imp_dmic.h	/^	IMPDmicBitWidth bitwidth;    \/**<DMIC采样精度 *\/$/;"	m	struct:__anon155	access:public
__anon155::chnCnt	imp_dmic.h	/^	int chnCnt;  \/\/支持的最大声道数目;$/;"	m	struct:__anon155	access:public
__anon155::frmNum	imp_dmic.h	/^	int frmNum;					\/**<DMIC录音缓存帧的数目*\/$/;"	m	struct:__anon155	access:public
__anon155::numPerFrm	imp_dmic.h	/^	int numPerFrm;$/;"	m	struct:__anon155	access:public
__anon155::samplerate	imp_dmic.h	/^	IMPDmicSampleRate samplerate; \/**< DMIC采样率 *\/$/;"	m	struct:__anon155	access:public
__anon155::soundmode	imp_dmic.h	/^	IMPDmicSoundMode soundmode;   \/*声音模式*\/$/;"	m	struct:__anon155	access:public
__anon156::bitwidth	imp_dmic.h	/^	IMPDmicBitWidth bitwidth;$/;"	m	struct:__anon156	access:public
__anon156::len	imp_dmic.h	/^	int len;$/;"	m	struct:__anon156	access:public
__anon156::phyAddr	imp_dmic.h	/^	uint32_t phyAddr;$/;"	m	struct:__anon156	access:public
__anon156::seq	imp_dmic.h	/^	int seq;$/;"	m	struct:__anon156	access:public
__anon156::soundmode	imp_dmic.h	/^	IMPDmicSoundMode soundmode;$/;"	m	struct:__anon156	access:public
__anon156::timeStamp	imp_dmic.h	/^	int64_t timeStamp;$/;"	m	struct:__anon156	access:public
__anon156::virAddr	imp_dmic.h	/^	uint32_t *virAddr;$/;"	m	struct:__anon156	access:public
__anon157::aecFrame	imp_dmic.h	/^	IMPDmicFrame aecFrame;  \/\/选取其中一路AEC处理后的数据;$/;"	m	struct:__anon157	access:public
__anon157::rawFrame	imp_dmic.h	/^	IMPDmicFrame rawFrame;  \/\/原始数据;$/;"	m	struct:__anon157	access:public
__anon158::Rev	imp_dmic.h	/^	int Rev;		  \/*保留*\/$/;"	m	struct:__anon158	access:public
__anon158::usrFrmDepth	imp_dmic.h	/^	int usrFrmDepth;  \/**<DMIC 音频帧缓存深度*\/$/;"	m	struct:__anon158	access:public
__anon159::dmic_en	imp_dmic.h	/^	int dmic_en;$/;"	m	struct:__anon159	access:public
__anon159::dmic_id	imp_dmic.h	/^	int dmic_id;$/;"	m	struct:__anon159	access:public
__anon15::cnt	imp_isp.h	/^	uint64_t cnt;			\/**< Frame统计(该参数设置无效，只能获取) *\/$/;"	m	struct:__anon15	access:public
__anon15::irqtype	imp_isp.h	/^	IMPISPIrqType irqtype;          \/**< Frame中断类型(该参数设置无效，只能获取)*\/$/;"	m	struct:__anon15	access:public
__anon15::timeout	imp_isp.h	/^	uint32_t timeout;		\/**< 超时时间，单位ms *\/$/;"	m	struct:__anon15	access:public
__anon160::aVersion	imp_system.h	/^	char aVersion[64];	\/**< IMP系统版本号 *\/$/;"	m	struct:__anon160	access:public
__anon161::decType	imp_decoder.h	/^	IMPPayloadType		decType;		\/**< 解码帧原数据协议类型 *\/$/;"	m	struct:__anon161	access:public
__anon161::frmRateDen	imp_decoder.h	/^	uint32_t			frmRateDen;		\/**< 在一帧内的时间单元的数量, 以时间单元为单位。即帧率的分母 *\/$/;"	m	struct:__anon161	access:public
__anon161::frmRateNum	imp_decoder.h	/^	uint32_t			frmRateNum;		\/**< 在一秒钟内的时间单元的数量, 以时间单元为单位。即帧率的分子 *\/$/;"	m	struct:__anon161	access:public
__anon161::maxHeight	imp_decoder.h	/^	uint32_t			maxHeight;		\/**< 解码帧最大的高度 *\/$/;"	m	struct:__anon161	access:public
__anon161::maxWidth	imp_decoder.h	/^	uint32_t			maxWidth;		\/**< 解码帧最大的宽度 *\/$/;"	m	struct:__anon161	access:public
__anon161::nrKeepStream	imp_decoder.h	/^	uint32_t			nrKeepStream;	\/**< 解码器缓存帧个数 *\/$/;"	m	struct:__anon161	access:public
__anon161::pixelFormat	imp_decoder.h	/^	IMPPixelFormat		pixelFormat;	\/**< 解码帧目标数据协议类型 *\/$/;"	m	struct:__anon161	access:public
__anon162::decAttr	imp_decoder.h	/^	IMPDecoderAttr		decAttr;		\/**< 解码器属性 *\/$/;"	m	struct:__anon162	access:public
__anon163::i_payload	imp_decoder.h	/^	int					i_payload;		\/**< 解码帧的数据长度 *\/$/;"	m	struct:__anon163	access:public
__anon163::p_payload	imp_decoder.h	/^	uint8_t				*p_payload;		\/**< 解码帧的数据指针 *\/$/;"	m	struct:__anon163	access:public
__anon163::timeStamp	imp_decoder.h	/^	int64_t				timeStamp;		\/**< 解码帧的时间戳 *\/$/;"	m	struct:__anon163	access:public
__anon164::decoderNal	imp_decoder.h	/^	IMPDecoderNal	decoderNal; \/**< 解码帧数据结构体 *\/$/;"	m	struct:__anon164	access:public
__anon166::deviceID	imp_common.h	/^	IMPDeviceID	deviceID;		\/**< 设备ID *\/$/;"	m	struct:__anon166	access:public
__anon166::groupID	imp_common.h	/^	int			groupID;		\/**< 组ID *\/$/;"	m	struct:__anon166	access:public
__anon166::outputID	imp_common.h	/^	int			outputID;		\/**< 输出ID *\/$/;"	m	struct:__anon166	access:public
__anon167::direct_phyAddr	imp_common.h	/^	uint32_t direct_phyAddr; 	\/**< 帧的直通地址 *\/$/;"	m	struct:__anon167	access:public
__anon167::height	imp_common.h	/^	uint32_t height;		\/**< 帧高 *\/$/;"	m	struct:__anon167	access:public
__anon167::index	imp_common.h	/^	int index;			\/**< 帧序号 *\/$/;"	m	struct:__anon167	access:public
__anon167::phyAddr	imp_common.h	/^	uint32_t phyAddr;		\/**< 帧的物理地址 *\/$/;"	m	struct:__anon167	access:public
__anon167::pixfmt	imp_common.h	/^	uint32_t pixfmt;		\/**< 帧的图像格式 *\/$/;"	m	struct:__anon167	access:public
__anon167::pool	imp_common.h	/^	void *pool;$/;"	m	struct:__anon167	access:public
__anon167::pool_idx	imp_common.h	/^	int pool_idx;			\/**< 帧所在的Pool的ID *\/$/;"	m	struct:__anon167	access:public
__anon167::priv	imp_common.h	/^	uint32_t priv[0];		\/* 私有数据 *\/$/;"	m	struct:__anon167	access:public
__anon167::size	imp_common.h	/^	uint32_t size;			\/**< 帧所占用空间大小 *\/$/;"	m	struct:__anon167	access:public
__anon167::timeStamp	imp_common.h	/^	int64_t timeStamp;		\/**< 帧的时间戳 *\/$/;"	m	struct:__anon167	access:public
__anon167::virAddr	imp_common.h	/^	uint32_t virAddr;		\/**< 帧的虚拟地址 *\/$/;"	m	struct:__anon167	access:public
__anon167::width	imp_common.h	/^	uint32_t width;			\/**< 帧宽 *\/$/;"	m	struct:__anon167	access:public
__anon168::minus	imp_common.h	/^	uint64_t minus;						\/**< 下限 *\/$/;"	m	struct:__anon168	access:public
__anon168::plus	imp_common.h	/^	uint64_t plus;						\/**< 上限 *\/$/;"	m	struct:__anon168	access:public
__anon168::ts	imp_common.h	/^	uint64_t ts;						\/**< 时间 *\/$/;"	m	struct:__anon168	access:public
__anon171::x	imp_common.h	/^	int		x;			\/**<横坐标  *\/$/;"	m	struct:__anon171	access:public
__anon171::y	imp_common.h	/^	int		y;			\/**<纵坐标  *\/$/;"	m	struct:__anon171	access:public
__anon172::p0	imp_common.h	/^	IMPPoint		p0;		\/**<左上角点坐标信息  *\/$/;"	m	struct:__anon172	access:public
__anon172::p1	imp_common.h	/^	IMPPoint		p1;		\/**<右下角点坐标信息  *\/$/;"	m	struct:__anon172	access:public
__anon173::p0	imp_common.h	/^	IMPPoint		p0;		\/**<横线：直线的左端点 竖线：直线的右端点 *\/$/;"	m	struct:__anon173	access:public
__anon174::enable	imp_framesource.h	/^	int enable;		\/**< 使能裁剪功能 *\/$/;"	m	struct:__anon174	access:public
__anon174::height	imp_framesource.h	/^	int height;		\/**< 图片裁剪高度 *\/$/;"	m	struct:__anon174	access:public
__anon174::left	imp_framesource.h	/^	int left;		\/**< 裁剪左起始点 *\/$/;"	m	struct:__anon174	access:public
__anon174::top	imp_framesource.h	/^	int top;		\/**< 裁剪上起始点 *\/$/;"	m	struct:__anon174	access:public
__anon174::width	imp_framesource.h	/^	int width;		\/**< 图片裁剪宽度 *\/$/;"	m	struct:__anon174	access:public
__anon175::enable	imp_framesource.h	/^	int enable;		\/**< 使能缩放功能 *\/$/;"	m	struct:__anon175	access:public
__anon175::outheight	imp_framesource.h	/^	int outheight;	\/**< 缩放后图片高度 *\/$/;"	m	struct:__anon175	access:public
__anon175::outwidth	imp_framesource.h	/^	int outwidth;	\/**< 缩放后图片宽度 *\/$/;"	m	struct:__anon175	access:public
__anon178::maxdepth	imp_framesource.h	/^	int maxdepth;				\/**< FIFO 最大深度 *\/$/;"	m	struct:__anon178	access:public
__anon178::type	imp_framesource.h	/^	IMPFSChnFifoType type;			\/**< 通道FIFO类型 *\/$/;"	m	struct:__anon178	access:public
__anon179::crop	imp_framesource.h	/^	IMPFSChnCrop crop;			\/**< 图片裁剪属性 *\/$/;"	m	struct:__anon179	access:public
__anon179::fcrop	imp_framesource.h	/^	IMPFSChnCrop fcrop;			\/**< 图片裁剪属性 *\/$/;"	m	struct:__anon179	access:public
__anon179::i2dattr	imp_framesource.h	/^    IMPFSI2DAttr i2dattr;       \/**< i2d属性*\/$/;"	m	struct:__anon179	access:public
__anon179::mirr_enable	imp_framesource.h	/^	int mirr_enable;			\/**< 图片镜像属性 *\/$/;"	m	struct:__anon179	access:public
__anon179::nrVBs	imp_framesource.h	/^	int nrVBs;					\/**< Video buffer数量 *\/$/;"	m	struct:__anon179	access:public
__anon179::outFrmRateDen	imp_framesource.h	/^	int outFrmRateDen;			\/**< 通道的输出帧率分母 *\/$/;"	m	struct:__anon179	access:public
__anon179::outFrmRateNum	imp_framesource.h	/^	int outFrmRateNum;			\/**< 通道的输出帧率分子 *\/$/;"	m	struct:__anon179	access:public
__anon179::picHeight	imp_framesource.h	/^	int picHeight;				\/**< 图片高度 *\/$/;"	m	struct:__anon179	access:public
__anon179::picWidth	imp_framesource.h	/^	int picWidth;				\/**< 图片宽度 *\/$/;"	m	struct:__anon179	access:public
__anon179::pixFmt	imp_framesource.h	/^	IMPPixelFormat pixFmt;		\/**< 图片格式 *\/$/;"	m	struct:__anon179	access:public
__anon179::scaler	imp_framesource.h	/^	IMPFSChnScaler scaler;		\/**< 图片缩放属性 *\/$/;"	m	struct:__anon179	access:public
__anon179::type	imp_framesource.h	/^	IMPFSChnType type;			\/**< 通道类型 *\/$/;"	m	struct:__anon179	access:public
__anon17::freq	imp_isp.h	/^	uint8_t freq;                           \/**< 设置抗闪的工频 *\/$/;"	m	struct:__anon17	access:public
__anon17::mode	imp_isp.h	/^	IMPISPAntiflickerMode mode;             \/**< ISP抗闪频功能模式选择 *\/$/;"	m	struct:__anon17	access:public
__anon19::isp_mode	imp_isp.h	/^	IMPISPHVFLIP isp_mode[3];	\/**< ISP每个通道对应的flip模式 *\/$/;"	m	struct:__anon19	access:public
__anon19::sensor_mode	imp_isp.h	/^	IMPISPHVFLIP sensor_mode;   \/**< sensor对应的flip模式 *\/$/;"	m	struct:__anon19	access:public
__anon21::__anon22::bitBypassADR	imp_isp.h	/^		uint32_t bitBypassADR : 1;      \/**< [7] *\/$/;"	m	struct:__anon21::__anon22	access:public
__anon21::__anon22::bitBypassAWB0	imp_isp.h	/^		uint32_t bitBypassAWB0 : 1;     \/**< [2] *\/$/;"	m	struct:__anon21::__anon22	access:public
__anon21::__anon22::bitBypassAWB1	imp_isp.h	/^		uint32_t bitBypassAWB1 : 1;     \/**< [6] *\/$/;"	m	struct:__anon21::__anon22	access:public
__anon21::__anon22::bitBypassBCSH	imp_isp.h	/^		uint32_t bitBypassBCSH : 1;     \/**< [15] *\/$/;"	m	struct:__anon21::__anon22	access:public
__anon21::__anon22::bitBypassBLC	imp_isp.h	/^		uint32_t bitBypassBLC : 1;      \/**< [0] *\/$/;"	m	struct:__anon21::__anon22	access:public
__anon21::__anon22::bitBypassCCM	imp_isp.h	/^		uint32_t bitBypassCCM : 1;      \/**< [9] *\/$/;"	m	struct:__anon21::__anon22	access:public
__anon21::__anon22::bitBypassCDNS	imp_isp.h	/^		uint32_t bitBypassCDNS : 1;     \/**< [19] *\/$/;"	m	struct:__anon21::__anon22	access:public
__anon21::__anon22::bitBypassCLM	imp_isp.h	/^		uint32_t bitBypassCLM : 1;      \/**< [16] *\/$/;"	m	struct:__anon21::__anon22	access:public
__anon21::__anon22::bitBypassCSC	imp_isp.h	/^		uint32_t bitBypassCSC : 1;      \/**< [12] *\/$/;"	m	struct:__anon21::__anon22	access:public
__anon21::__anon22::bitBypassDEFOG	imp_isp.h	/^		uint32_t bitBypassDEFOG : 1;    \/**< [11] *\/$/;"	m	struct:__anon21::__anon22	access:public
__anon21::__anon22::bitBypassDMSC	imp_isp.h	/^		uint32_t bitBypassDMSC : 1;     \/**< [8] *\/$/;"	m	struct:__anon21::__anon22	access:public
__anon21::__anon22::bitBypassDPC	imp_isp.h	/^		uint32_t bitBypassDPC : 1;      \/**< [4] *\/$/;"	m	struct:__anon21::__anon22	access:public
__anon21::__anon22::bitBypassGAMMA	imp_isp.h	/^		uint32_t bitBypassGAMMA : 1;    \/**< [10] *\/$/;"	m	struct:__anon21::__anon22	access:public
__anon21::__anon22::bitBypassGIB	imp_isp.h	/^		uint32_t bitBypassGIB : 1;      \/**< [5] *\/$/;"	m	struct:__anon21::__anon22	access:public
__anon21::__anon22::bitBypassHLDC	imp_isp.h	/^		uint32_t bitBypassHLDC : 1;     \/**< [20] *\/$/;"	m	struct:__anon21::__anon22	access:public
__anon21::__anon22::bitBypassLCE	imp_isp.h	/^		uint32_t bitBypassLCE : 1;      \/**< [21] *\/$/;"	m	struct:__anon21::__anon22	access:public
__anon21::__anon22::bitBypassLSC	imp_isp.h	/^		uint32_t bitBypassLSC : 1;      \/**< [1] *\/$/;"	m	struct:__anon21::__anon22	access:public
__anon21::__anon22::bitBypassMDNS	imp_isp.h	/^		uint32_t bitBypassMDNS : 1;     \/**< [13] *\/$/;"	m	struct:__anon21::__anon22	access:public
__anon21::__anon22::bitBypassSDNS	imp_isp.h	/^		uint32_t bitBypassSDNS : 1;     \/**< [18] *\/$/;"	m	struct:__anon21::__anon22	access:public
__anon21::__anon22::bitBypassWDR	imp_isp.h	/^		uint32_t bitBypassWDR : 1;      \/**< [3] *\/$/;"	m	struct:__anon21::__anon22	access:public
__anon21::__anon22::bitBypassYDNS	imp_isp.h	/^		uint32_t bitBypassYDNS : 1;     \/**< [14] *\/$/;"	m	struct:__anon21::__anon22	access:public
__anon21::__anon22::bitBypassYSP	imp_isp.h	/^		uint32_t bitBypassYSP : 1;      \/**< [17] *\/$/;"	m	struct:__anon21::__anon22	access:public
__anon21::__anon22::bitRsv	imp_isp.h	/^		uint32_t bitRsv : 10;           \/**< [22 ~ 30] *\/$/;"	m	struct:__anon21::__anon22	access:public
__anon21::key	imp_isp.h	/^	uint32_t key;                          \/**< 各个模块旁路开关 *\/$/;"	m	union:__anon21	access:public
__anon24::en	imp_isp.h	/^	IMPISPTuningOpsMode en;     \/**< 模块强度配置功能使能 *\/$/;"	m	struct:__anon24	access:public
__anon24::ratio	imp_isp.h	/^	uint8_t ratio;              \/**< 模块强度配置功能强度，128为默认强度，大于128增加强度，小于128降低强度 *\/$/;"	m	struct:__anon24	access:public
__anon25::ratio_attr	imp_isp.h	/^	IMPISPRatioUnit ratio_attr[16];  \/**< 各个模块强度配置功能属性 *\/$/;"	m	struct:__anon25	access:public
__anon27::CscClip	imp_isp.h	/^	unsigned char CscClip[4];       \/**< 分别为Y最大值，Y最大值，UV最大值，UV最小值 *\/$/;"	m	struct:__anon27	access:public
__anon27::CscCoef	imp_isp.h	/^	float CscCoef[9];               \/**< 3x3矩阵 *\/$/;"	m	struct:__anon27	access:public
__anon27::CscOffset	imp_isp.h	/^	unsigned char CscOffset[2];     \/**< [0] UV偏移值 [1] Y偏移值*\/$/;"	m	struct:__anon27	access:public
__anon28::ColorGamut	imp_isp.h	/^	IMPISPCSCColorGamut ColorGamut;     \/**< RGB转YUV的标准矩阵 *\/$/;"	m	struct:__anon28	access:public
__anon28::Matrix	imp_isp.h	/^	IMPISPCscMatrix Matrix;             \/**< 客户自定义的转换矩阵 *\/$/;"	m	struct:__anon28	access:public
__anon29::ColorMatrix	imp_isp.h	/^	float ColorMatrix[9];               \/**< 颜色矩阵 *\/$/;"	m	struct:__anon29	access:public
__anon29::ManualEn	imp_isp.h	/^	IMPISPTuningOpsMode ManualEn;       \/**< 手动CCM使能 *\/$/;"	m	struct:__anon29	access:public
__anon29::SatEn	imp_isp.h	/^	IMPISPTuningOpsMode SatEn;          \/**< 手动模式下饱和度使能 *\/$/;"	m	struct:__anon29	access:public
__anon31::Curve_type	imp_isp.h	/^	IMPISPGammaCurveType Curve_type; \/**< gamma模式 *\/$/;"	m	struct:__anon31	access:public
__anon31::gamma	imp_isp.h	/^	uint16_t gamma[129];		\/**< gamma参数数组，有129个点 *\/$/;"	m	struct:__anon31	access:public
__anon33::node_h	imp_isp.h	/^	unsigned char node_h;   \/**< 横向统计区域块数 [12 ~ 15]*\/$/;"	m	struct:__anon33	access:public
__anon33::node_v	imp_isp.h	/^	unsigned char node_v;   \/**< 纵向统计区域块数 [12 ~ 15]*\/$/;"	m	struct:__anon33	access:public
__anon33::start_h	imp_isp.h	/^	unsigned int start_h;   \/**< 横向起始点，单位为pixel AF统计值横向起始点：[1 ~ width]，且取奇数 *\/$/;"	m	struct:__anon33	access:public
__anon33::start_v	imp_isp.h	/^	unsigned int start_v;   \/**< 纵向起始点，单位为pixel AF统计值垂直起始点 ：[3 ~ height]，且取奇数 *\/$/;"	m	struct:__anon33	access:public
__anon34::ae_sta_en	imp_isp.h	/^	IMPISPTuningOpsMode ae_sta_en;  \/**< AE统计功能开关*\/$/;"	m	struct:__anon34	access:public
__anon34::histThresh	imp_isp.h	/^	unsigned char histThresh[4];    \/**< AE直方图的分段 *\/$/;"	m	struct:__anon34	access:public
__anon34::hist_domain	imp_isp.h	/^	IMPISPHistDomain hist_domain;   \/**< AE统计色域(预留) *\/$/;"	m	struct:__anon34	access:public
__anon34::local	imp_isp.h	/^	IMPISP3AStatisLocation local;   \/**< AE统计位置(预留) *\/$/;"	m	struct:__anon34	access:public
__anon36::awb_sta_en	imp_isp.h	/^	IMPISPTuningOpsMode awb_sta_en;         \/**< AWB统计功能开关*\/$/;"	m	struct:__anon36	access:public
__anon36::local	imp_isp.h	/^	IMPISP3AStatisLocation local;		\/**< AWB统计范围 *\/$/;"	m	struct:__anon36	access:public
__anon36::mode	imp_isp.h	/^	IMPISPAWBStatisMode mode;		\/**< AWB统计属性(预留) *\/$/;"	m	struct:__anon36	access:public
__anon37::af_alpha_alt	imp_isp.h	/^	unsigned short af_alpha_alt;        \/**< AF统计低通滤波器的水平与垂直方向的权重 [0 ~ 64]*\/$/;"	m	struct:__anon37	access:public
__anon37::af_belta_alt	imp_isp.h	/^	unsigned short af_belta_alt;        \/**< AF统计低通滤波器的水平与垂直方向的权重 [0 ~ 64]*\/$/;"	m	struct:__anon37	access:public
__anon37::af_delta	imp_isp.h	/^	unsigned short af_delta;            \/**< AF统计低通滤波器的权重 [0 ~ 64]*\/$/;"	m	struct:__anon37	access:public
__anon37::af_hilight_th	imp_isp.h	/^	unsigned short af_hilight_th;       \/**< AF高亮点统计阈值 [0 ~ 255]*\/$/;"	m	struct:__anon37	access:public
__anon37::af_metrics_shift	imp_isp.h	/^	unsigned char af_metrics_shift;     \/**< AF统计值缩小参数 默认是0，1代表缩小2倍*\/$/;"	m	struct:__anon37	access:public
__anon37::af_sta_en	imp_isp.h	/^	IMPISPTuningOpsMode af_sta_en;      \/**< AF统计功能开关*\/$/;"	m	struct:__anon37	access:public
__anon37::af_theta	imp_isp.h	/^	unsigned short af_theta;            \/**< AF统计高通滤波器的权重 [0 ~ 64]*\/$/;"	m	struct:__anon37	access:public
__anon37::local	imp_isp.h	/^	IMPISP3AStatisLocation local;       \/**< AF统计范围 *\/$/;"	m	struct:__anon37	access:public
__anon38::ae	imp_isp.h	/^	IMPISPAEStatisAttr ae;      \/**< AE 统计信息属性 *\/$/;"	m	struct:__anon38	access:public
__anon38::af	imp_isp.h	/^	IMPISPAFStatisAttr af;      \/**< AF 统计信息属性 *\/$/;"	m	struct:__anon38	access:public
__anon38::awb	imp_isp.h	/^	IMPISPAWBStatisAttr awb;    \/**< AWB 统计信息属性 *\/$/;"	m	struct:__anon38	access:public
__anon39::weight	imp_isp.h	/^	unsigned char weight[15][15];    \/**< 各区域权重信息 [0 ~ 8]*\/$/;"	m	struct:__anon39	access:public
__anon40::ae_roi	imp_isp.h	/^	IMPISPWeight ae_roi;               \/**< 感兴趣区域权重值(0 ~ 8)(预留) *\/$/;"	m	struct:__anon40	access:public
__anon40::ae_weight	imp_isp.h	/^	IMPISPWeight ae_weight;            \/**< 全局权重值(0~ 8) *\/$/;"	m	struct:__anon40	access:public
__anon40::roi_enable	imp_isp.h	/^	IMPISPTuningOpsMode roi_enable;    \/**< 感兴趣区域权重设置使能(预留) *\/$/;"	m	struct:__anon40	access:public
__anon40::weight_enable	imp_isp.h	/^	IMPISPTuningOpsMode weight_enable; \/**< 全局权重设置使能 *\/$/;"	m	struct:__anon40	access:public
__anon41::statis	imp_isp.h	/^	uint32_t statis[15][15];    \/**< 各区域统计信息*\/$/;"	m	struct:__anon41	access:public
__anon42::ae_hist_256bin	imp_isp.h	/^	uint32_t ae_hist_256bin[256];           \/**< AE统计直方图bin值, 为每个bin的实际pixel数量*\/$/;"	m	struct:__anon42	access:public
__anon42::ae_hist_5bin	imp_isp.h	/^	unsigned short ae_hist_5bin[5];         \/**< AE统计直方图bin值 [0 ~ 65535]*\/$/;"	m	struct:__anon42	access:public
__anon42::ae_statis	imp_isp.h	/^	IMPISPStatisZone ae_statis;             \/**< AE统计信息 *\/$/;"	m	struct:__anon42	access:public
__anon44::AeAGain	imp_isp.h	/^	uint32_t AeAGain;                                   \/**< AE Sensor 模拟增益值，单位是倍数 x 1024 *\/$/;"	m	struct:__anon44	access:public
__anon44::AeAGainManualMode	imp_isp.h	/^	IMPISPTuningOpsType AeAGainManualMode;              \/**< AE Sensor 模拟增益手动模式使能 *\/$/;"	m	struct:__anon44	access:public
__anon44::AeDGain	imp_isp.h	/^	uint32_t AeDGain;                                   \/**< AE Sensor数字增益值，单位是倍数 x 1024 *\/$/;"	m	struct:__anon44	access:public
__anon44::AeDGainManualMode	imp_isp.h	/^	IMPISPTuningOpsType AeDGainManualMode;              \/**< AE Sensor数字增益手动模式使能 *\/$/;"	m	struct:__anon44	access:public
__anon44::AeIntegrationTime	imp_isp.h	/^	uint32_t AeIntegrationTime;                         \/**< AE手动模式下的曝光值 *\/$/;"	m	struct:__anon44	access:public
__anon44::AeIntegrationTimeMode	imp_isp.h	/^	IMPISPTuningOpsType AeIntegrationTimeMode;          \/**< AE曝光手动模式使能 *\/$/;"	m	struct:__anon44	access:public
__anon44::AeIntegrationTimeUnit	imp_isp.h	/^	IMPISPAEIntegrationTimeUnit AeIntegrationTimeUnit;  \/**< AE曝光时间单位 *\/$/;"	m	struct:__anon44	access:public
__anon44::AeIspDGain	imp_isp.h	/^	uint32_t AeIspDGain;                                \/**< AE ISP 数字增益值，单位倍数 x 1024*\/$/;"	m	struct:__anon44	access:public
__anon44::AeIspDGainManualMode	imp_isp.h	/^	IMPISPTuningOpsType AeIspDGainManualMode;	    \/**< AE ISP 数字增益手动模式使能 *\/$/;"	m	struct:__anon44	access:public
__anon44::AeMaxAGain	imp_isp.h	/^	uint32_t AeMaxAGain;                                \/**< AE最大sensor模拟增益，单位是倍数 x 1024 *\/$/;"	m	struct:__anon44	access:public
__anon44::AeMaxAGainMode	imp_isp.h	/^	IMPISPTuningOpsType AeMaxAGainMode;                 \/**< AE最大sensor模拟增益使能位 *\/$/;"	m	struct:__anon44	access:public
__anon44::AeMaxDgain	imp_isp.h	/^	uint32_t AeMaxDgain;                                \/**< AE最大sensor数字增益，单位是倍数 x 1024 *\/$/;"	m	struct:__anon44	access:public
__anon44::AeMaxDgainMode	imp_isp.h	/^	IMPISPTuningOpsType AeMaxDgainMode;                 \/**< AE最大sensor数字增益使能位 *\/$/;"	m	struct:__anon44	access:public
__anon44::AeMaxIntegrationTime	imp_isp.h	/^	uint32_t AeMaxIntegrationTime;                      \/**< AE最大曝光时间 *\/$/;"	m	struct:__anon44	access:public
__anon44::AeMaxIntegrationTimeMode	imp_isp.h	/^	IMPISPTuningOpsType AeMaxIntegrationTimeMode;       \/**< AE最大曝光使能位 *\/$/;"	m	struct:__anon44	access:public
__anon44::AeMaxIspDGain	imp_isp.h	/^	uint32_t AeMaxIspDGain;                             \/**< AE最大ISP数字增益，单位是倍数 x 1024 *\/$/;"	m	struct:__anon44	access:public
__anon44::AeMaxIspDGainMode	imp_isp.h	/^	IMPISPTuningOpsType AeMaxIspDGainMode;              \/**< AE最大ISP数字增益使能位 *\/$/;"	m	struct:__anon44	access:public
__anon44::AeMinAGain	imp_isp.h	/^	uint32_t AeMinAGain;                                \/**< AE最小sensor模拟增益，单位是倍数 x 1024 *\/$/;"	m	struct:__anon44	access:public
__anon44::AeMinAGainMode	imp_isp.h	/^	IMPISPTuningOpsType AeMinAGainMode;                 \/**< AE最小模拟增益使能位 *\/$/;"	m	struct:__anon44	access:public
__anon44::AeMinDgain	imp_isp.h	/^	uint32_t AeMinDgain;                                \/**< AE最小sensor数字增益，单位是倍数 x 1024 *\/$/;"	m	struct:__anon44	access:public
__anon44::AeMinDgainMode	imp_isp.h	/^	IMPISPTuningOpsType AeMinDgainMode;                 \/**< AE最小数字增益使能位(预留) *\/$/;"	m	struct:__anon44	access:public
__anon44::AeMinIntegrationTime	imp_isp.h	/^	uint32_t AeMinIntegrationTime;                      \/**< AE最小曝光时间 *\/$/;"	m	struct:__anon44	access:public
__anon44::AeMinIntegrationTimeMode	imp_isp.h	/^	IMPISPTuningOpsType AeMinIntegrationTimeMode;       \/**< AE最小曝光使能位(预留) *\/$/;"	m	struct:__anon44	access:public
__anon44::AeMinIspDGain	imp_isp.h	/^	uint32_t AeMinIspDGain;                             \/**< AE最小ISP数字增益，单位是倍数 x 1024 *\/$/;"	m	struct:__anon44	access:public
__anon44::AeMinIspDGainMode	imp_isp.h	/^	IMPISPTuningOpsType AeMinIspDGainMode;              \/**< AE最小ISP数字增益使能位(预留) *\/$/;"	m	struct:__anon44	access:public
__anon44::AeMode	imp_isp.h	/^	IMPISPTuningOpsType AeMode;                         \/**< AE Freezen使能 *\/$/;"	m	struct:__anon44	access:public
__anon44::AeShortAGain	imp_isp.h	/^	uint32_t AeShortAGain;                              \/**< AE Sensor 模拟增益值，单位是倍数 x 1024 *\/$/;"	m	struct:__anon44	access:public
__anon44::AeShortAGainManualMode	imp_isp.h	/^	IMPISPTuningOpsType AeShortAGainManualMode;         \/**< AE Sensor 模拟增益手动模式使能 *\/$/;"	m	struct:__anon44	access:public
__anon44::AeShortDGain	imp_isp.h	/^	uint32_t AeShortDGain;                              \/**< AE Sensor数字增益值，单位是倍数 x 1024 *\/$/;"	m	struct:__anon44	access:public
__anon44::AeShortDGainManualMode	imp_isp.h	/^	IMPISPTuningOpsType AeShortDGainManualMode;         \/**< AE Sensor数字增益手动模式使能 *\/$/;"	m	struct:__anon44	access:public
__anon44::AeShortIntegrationTime	imp_isp.h	/^	uint32_t AeShortIntegrationTime;                    \/**< AE手动模式下的曝光值 *\/$/;"	m	struct:__anon44	access:public
__anon44::AeShortIntegrationTimeMode	imp_isp.h	/^	IMPISPTuningOpsType AeShortIntegrationTimeMode;     \/**< AE曝光手动模式使能 *\/$/;"	m	struct:__anon44	access:public
__anon44::AeShortIspDGain	imp_isp.h	/^	uint32_t AeShortIspDGain;                           \/**< AE ISP 数字增益值，单位倍数 x 1024*\/$/;"	m	struct:__anon44	access:public
__anon44::AeShortIspDGainManualMode	imp_isp.h	/^	IMPISPTuningOpsType AeShortIspDGainManualMode;      \/**< AE ISP 数字增益手动模式使能 *\/$/;"	m	struct:__anon44	access:public
__anon44::AeShortMaxAGain	imp_isp.h	/^	uint32_t AeShortMaxAGain;                           \/**< AE最大sensor模拟增益 *\/$/;"	m	struct:__anon44	access:public
__anon44::AeShortMaxAGainMode	imp_isp.h	/^	IMPISPTuningOpsType AeShortMaxAGainMode;            \/**< AE最大sensor模拟增益使能位 *\/$/;"	m	struct:__anon44	access:public
__anon44::AeShortMaxDgain	imp_isp.h	/^	uint32_t AeShortMaxDgain;                           \/**< AE最大sensor数字增益 *\/$/;"	m	struct:__anon44	access:public
__anon44::AeShortMaxDgainMode	imp_isp.h	/^	IMPISPTuningOpsType AeShortMaxDgainMode;            \/**< AE最大sensor数字增益使能位 *\/$/;"	m	struct:__anon44	access:public
__anon44::AeShortMaxIntegrationTime	imp_isp.h	/^	uint32_t AeShortMaxIntegrationTime;                 \/**< AE最大曝光时间 *\/$/;"	m	struct:__anon44	access:public
__anon44::AeShortMaxIntegrationTimeMode	imp_isp.h	/^	IMPISPTuningOpsType AeShortMaxIntegrationTimeMode;  \/**< AE最大曝光使能位 *\/$/;"	m	struct:__anon44	access:public
__anon44::AeShortMaxIspDGain	imp_isp.h	/^	uint32_t AeShortMaxIspDGain;                        \/**< AE最大ISP数字增益 *\/$/;"	m	struct:__anon44	access:public
__anon44::AeShortMaxIspDGainMode	imp_isp.h	/^	IMPISPTuningOpsType AeShortMaxIspDGainMode;         \/**< AE最大ISP数字增益使能位 *\/$/;"	m	struct:__anon44	access:public
__anon44::AeShortMinAGain	imp_isp.h	/^	uint32_t AeShortMinAGain;                           \/**< AE最小sensor模拟增益 *\/$/;"	m	struct:__anon44	access:public
__anon44::AeShortMinAGainMode	imp_isp.h	/^	IMPISPTuningOpsType AeShortMinAGainMode;            \/**< AE最小模拟增益使能位 *\/$/;"	m	struct:__anon44	access:public
__anon44::AeShortMinDgain	imp_isp.h	/^	uint32_t AeShortMinDgain;                           \/**< AE最小sensor数字增益 *\/$/;"	m	struct:__anon44	access:public
__anon44::AeShortMinDgainMode	imp_isp.h	/^	IMPISPTuningOpsType AeShortMinDgainMode;            \/**< AE最小数字增益使能位(预留) *\/$/;"	m	struct:__anon44	access:public
__anon44::AeShortMinIntegrationTime	imp_isp.h	/^	uint32_t AeShortMinIntegrationTime;                 \/**< AE最小曝光时间 *\/$/;"	m	struct:__anon44	access:public
__anon44::AeShortMinIntegrationTimeMode	imp_isp.h	/^	IMPISPTuningOpsType AeShortMinIntegrationTimeMode;  \/**< AE最小曝光使能位(预留) *\/$/;"	m	struct:__anon44	access:public
__anon44::AeShortMinIspDGain	imp_isp.h	/^	uint32_t AeShortMinIspDGain;                        \/**< AE最小ISP数字增益 *\/$/;"	m	struct:__anon44	access:public
__anon44::AeShortMinIspDGainMode	imp_isp.h	/^	IMPISPTuningOpsType AeShortMinIspDGainMode;         \/**< AE最小ISP数字增益使能位(预留) *\/$/;"	m	struct:__anon44	access:public
__anon44::AeShortMode	imp_isp.h	/^	IMPISPTuningOpsType AeShortMode;                    \/**< AE Freezen使能 *\/$/;"	m	struct:__anon44	access:public
__anon44::EVLog2	imp_isp.h	/^	uint32_t EVLog2;                                    \/**< AE 曝光值，此值经过log运算 *\/$/;"	m	struct:__anon44	access:public
__anon44::ExposureValue	imp_isp.h	/^	uint64_t ExposureValue;                             \/**< AE 曝光值，为integration time x again x dgain *\/$/;"	m	struct:__anon44	access:public
__anon44::TotalGainDb	imp_isp.h	/^	uint32_t TotalGainDb;                               \/**< AE total gain，单位为db(只读) *\/$/;"	m	struct:__anon44	access:public
__anon44::TotalGainDbShort	imp_isp.h	/^	uint32_t TotalGainDbShort;                          \/**< AE 短帧 total gain, 单位为db *\/$/;"	m	struct:__anon44	access:public
__anon46::AeBLCEn	imp_isp.h	/^	IMPISPAEScenceMode AeBLCEn;            \/**< AE 背光补偿功能使能 *\/$/;"	m	struct:__anon46	access:public
__anon46::AeBLCStrength	imp_isp.h	/^	unsigned char AeBLCStrength;           \/**< AE 背光补偿强度（0 ~ 10） *\/$/;"	m	struct:__anon46	access:public
__anon46::AeHLCEn	imp_isp.h	/^	IMPISPAEScenceMode AeHLCEn;            \/**< AE 强光抑制功能使能 *\/$/;"	m	struct:__anon46	access:public
__anon46::AeHLCStrength	imp_isp.h	/^	unsigned char AeHLCStrength;           \/**< AE 强光抑制强度（0 ~ 10）*\/$/;"	m	struct:__anon46	access:public
__anon46::AeStartEn	imp_isp.h	/^	IMPISPAEScenceMode AeStartEn;          \/**< AE 起始点功能使能 *\/$/;"	m	struct:__anon46	access:public
__anon46::AeStartEv	imp_isp.h	/^	uint32_t AeStartEv;                    \/**< AE 起始点EV值 *\/$/;"	m	struct:__anon46	access:public
__anon46::AeTargetComp	imp_isp.h	/^	uint32_t AeTargetComp;                 \/**< AE 目标亮度调节强度（0 ~ 255，小于128变暗，大于128变亮） *\/$/;"	m	struct:__anon46	access:public
__anon46::AeTargetCompEn	imp_isp.h	/^	IMPISPAEScenceMode AeTargetCompEn;     \/**< AE 目标亮度补偿使能 *\/$/;"	m	struct:__anon46	access:public
__anon46::luma	imp_isp.h	/^	uint32_t luma;                         \/**< AE Luma值 *\/$/;"	m	struct:__anon46	access:public
__anon46::luma_scence	imp_isp.h	/^	uint32_t luma_scence;                  \/**< AE 场景Luma值 *\/$/;"	m	struct:__anon46	access:public
__anon47::awb_b	imp_isp.h	/^	IMPISPStatisZone awb_b;    \/**< AWB B通道统计值 *\/$/;"	m	struct:__anon47	access:public
__anon47::awb_g	imp_isp.h	/^	IMPISPStatisZone awb_g;    \/**< AWB G通道统计值 *\/$/;"	m	struct:__anon47	access:public
__anon47::awb_r	imp_isp.h	/^	IMPISPStatisZone awb_r;    \/**< AWB R通道统计值 *\/$/;"	m	struct:__anon47	access:public
__anon48::bgain	imp_isp.h	/^	uint32_t bgain;     \/**< 白平衡B通道增益 *\/$/;"	m	struct:__anon48	access:public
__anon48::rgain	imp_isp.h	/^	uint32_t rgain;     \/**< 白平衡R通道增益 *\/$/;"	m	struct:__anon48	access:public
__anon49::statis_gol_gain	imp_isp.h	/^	IMPISPAWBGain statis_gol_gain;		\/**< 白平衡全局统计值 *\/$/;"	m	struct:__anon49	access:public
__anon49::statis_weight_gain	imp_isp.h	/^	IMPISPAWBGain statis_weight_gain;	\/**< 白平衡全局加权统计值 *\/$/;"	m	struct:__anon49	access:public
__anon51::ct_node	imp_isp.h	/^	uint32_t ct_node[4];            \/**< 白平衡通道增益偏移的节点 *\/$/;"	m	struct:__anon51	access:public
__anon51::customEn	imp_isp.h	/^	IMPISPTuningOpsMode customEn;   \/**< 白平衡自定义模式使能 *\/$/;"	m	struct:__anon51	access:public
__anon51::gainH	imp_isp.h	/^	IMPISPAWBGain gainH;            \/**< 白平衡高色温通道增益偏移 *\/$/;"	m	struct:__anon51	access:public
__anon51::gainL	imp_isp.h	/^	IMPISPAWBGain gainL;            \/**< 白平衡低色温通道增益偏移 *\/$/;"	m	struct:__anon51	access:public
__anon51::gainM	imp_isp.h	/^	IMPISPAWBGain gainM;            \/**< 白平衡中色温通道增益偏移 *\/$/;"	m	struct:__anon51	access:public
__anon52::Af_Fir0	imp_isp.h	/^	IMPISPStatisZone Af_Fir0;$/;"	m	struct:__anon52	access:public
__anon52::Af_Fir1	imp_isp.h	/^	IMPISPStatisZone Af_Fir1;$/;"	m	struct:__anon52	access:public
__anon52::Af_HighLumaCnt	imp_isp.h	/^	IMPISPStatisZone Af_HighLumaCnt;$/;"	m	struct:__anon52	access:public
__anon52::Af_Iir0	imp_isp.h	/^	IMPISPStatisZone Af_Iir0;$/;"	m	struct:__anon52	access:public
__anon52::Af_Iir1	imp_isp.h	/^	IMPISPStatisZone Af_Iir1;$/;"	m	struct:__anon52	access:public
__anon52::Af_YSum	imp_isp.h	/^	IMPISPStatisZone Af_YSum;$/;"	m	struct:__anon52	access:public
__anon53::af_frame_num	imp_isp.h	/^	 uint8_t af_frame_num;		\/**< AF帧数*\/$/;"	m	struct:__anon53	access:public
__anon53::af_metrics	imp_isp.h	/^	 uint32_t af_metrics;       \/**< AF主统计值*\/$/;"	m	struct:__anon53	access:public
__anon53::af_metrics_alt	imp_isp.h	/^	 uint32_t af_metrics_alt;   \/**< AF次统计值*\/$/;"	m	struct:__anon53	access:public
__anon54::zoom_chx_en	imp_isp.h	/^	int32_t zoom_chx_en[3];     \/**< 数字自动对焦功能通道使能 *\/$/;"	m	struct:__anon54	access:public
__anon54::zoom_height	imp_isp.h	/^	int32_t zoom_height[3];     \/**< 自动对焦区域的高度 *\/$/;"	m	struct:__anon54	access:public
__anon54::zoom_left	imp_isp.h	/^	int32_t zoom_left[3];       \/**< 自动对焦区域横向起始点，需要小于原始图像的宽度 *\/$/;"	m	struct:__anon54	access:public
__anon54::zoom_top	imp_isp.h	/^	int32_t zoom_top[3];        \/**< 自动对焦区域纵向起始点，需要小于原始图像的高度 *\/$/;"	m	struct:__anon54	access:public
__anon54::zoom_width	imp_isp.h	/^	int32_t zoom_width[3];      \/**< 自动对焦区域的宽度 *\/$/;"	m	struct:__anon54	access:public
__anon5::addr	imp_isp.h	/^	int32_t addr;		\/**< I2C地址 *\/$/;"	m	struct:__anon5	access:public
__anon5::i2c_adapter_id	imp_isp.h	/^	int32_t i2c_adapter_id;	\/**< I2C控制器 *\/$/;"	m	struct:__anon5	access:public
__anon5::type	imp_isp.h	/^	char type[20];		\/**< I2C设备名字，必须与摄像头驱动中struct i2c_device_id中name变量一致 *\/$/;"	m	struct:__anon5	access:public
__anon60::osd_enable	imp_isp.h	/^	uint8_t  osd_enable;    \/**< 填充功能使能 *\/$/;"	m	struct:__anon60	access:public
__anon60::osd_height	imp_isp.h	/^	uint16_t osd_height;    \/**< 填充高度 *\/$/;"	m	struct:__anon60	access:public
__anon60::osd_image	imp_isp.h	/^	char *osd_image;	\/**< 填充图片首地址 *\/$/;"	m	struct:__anon60	access:public
__anon60::osd_left	imp_isp.h	/^	uint16_t osd_left;      \/**< 填充横向起始点 *\/$/;"	m	struct:__anon60	access:public
__anon60::osd_stride	imp_isp.h	/^	uint16_t osd_stride;    \/**< 填充图片的对其宽度, 以字节为单位，例如320x240的RGBA8888图片osd_stride=320*4 *\/$/;"	m	struct:__anon60	access:public
__anon60::osd_top	imp_isp.h	/^	uint16_t osd_top;       \/**< 填充纵向起始点 *\/$/;"	m	struct:__anon60	access:public
__anon60::osd_width	imp_isp.h	/^	uint16_t osd_width;     \/**< 填充宽度 *\/$/;"	m	struct:__anon60	access:public
__anon60::pinum	imp_isp.h	/^    uint8_t  pinum;			\/**< 块号(范围: 0~7) *\/$/;"	m	struct:__anon60	access:public
__anon61::osd_argb_type	imp_isp.h	/^	IMPISPARGBType osd_argb_type;                  \/**< 填充格式  *\/$/;"	m	struct:__anon61	access:public
__anon61::osd_pixel_alpha_disable	imp_isp.h	/^	IMPISPTuningOpsMode osd_pixel_alpha_disable;   \/**< 填充像素Alpha禁用功能使能  *\/$/;"	m	struct:__anon61	access:public
__anon61::osd_type	imp_isp.h	/^	IMPISPPICTYPE osd_type;                        \/**< 填充图片类型  *\/$/;"	m	struct:__anon61	access:public
__anon62::alpha	imp_isp.h	/^	uint8_t  alpha;            \/**< 宽口边框alpha（3bit） *\/$/;"	m	struct:__anon62	access:public
__anon62::color	imp_isp.h	/^	IMP_ISP_COLOR_VALUE color; \/**< 画窗颜色 *\/$/;"	m	struct:__anon62	access:public
__anon62::enable	imp_isp.h	/^	uint8_t  enable;           \/**< 画窗功能使能 *\/$/;"	m	struct:__anon62	access:public
__anon62::height	imp_isp.h	/^	uint16_t height;           \/**< 画窗高度 *\/$/;"	m	struct:__anon62	access:public
__anon62::left	imp_isp.h	/^	uint16_t left;             \/**< 画窗功能横向起始点 *\/$/;"	m	struct:__anon62	access:public
__anon62::line_width	imp_isp.h	/^	uint8_t  line_width;	   \/**< 窗口边框宽度 *\/$/;"	m	struct:__anon62	access:public
__anon62::top	imp_isp.h	/^	uint16_t top;              \/**< 画窗功能纵向起始点 *\/$/;"	m	struct:__anon62	access:public
__anon62::width	imp_isp.h	/^	uint16_t width;            \/**< 画窗宽度 *\/$/;"	m	struct:__anon62	access:public
__anon63::alpha	imp_isp.h	/^	uint8_t  alpha;            \/**< 四角窗边框alpha （3bit） *\/$/;"	m	struct:__anon63	access:public
__anon63::color	imp_isp.h	/^	IMP_ISP_COLOR_VALUE color; \/**< 画四角窗颜色 *\/$/;"	m	struct:__anon63	access:public
__anon63::enable	imp_isp.h	/^	uint8_t  enable;           \/**< 画四角窗功能使能 *\/$/;"	m	struct:__anon63	access:public
__anon63::extend	imp_isp.h	/^	uint16_t extend;           \/**< 四角窗边框长度 *\/$/;"	m	struct:__anon63	access:public
__anon63::height	imp_isp.h	/^	uint16_t height;           \/**< 画四角窗高度 *\/$/;"	m	struct:__anon63	access:public
__anon63::left	imp_isp.h	/^	uint16_t left;             \/**< 画四角窗功能横向起始点 *\/$/;"	m	struct:__anon63	access:public
__anon63::line_width	imp_isp.h	/^	uint8_t  line_width;       \/**< 画四角窗边框宽度 *\/$/;"	m	struct:__anon63	access:public
__anon63::top	imp_isp.h	/^	uint16_t top;              \/**< 画四角窗功能纵向起始点 *\/$/;"	m	struct:__anon63	access:public
__anon63::width	imp_isp.h	/^	uint16_t width;            \/**< 画四角窗宽度 *\/$/;"	m	struct:__anon63	access:public
__anon64::alpha	imp_isp.h	/^	uint8_t  alpha;                \/**< 线条Alpha值 *\/$/;"	m	struct:__anon64	access:public
__anon64::color	imp_isp.h	/^	IMP_ISP_COLOR_VALUE color;     \/**< 线条颜色 *\/$/;"	m	struct:__anon64	access:public
__anon64::enable	imp_isp.h	/^	uint8_t  enable;               \/**< 画线功能使能 *\/$/;"	m	struct:__anon64	access:public
__anon64::endx	imp_isp.h	/^	uint16_t endx;                 \/**< 画线横向结束点 *\/$/;"	m	struct:__anon64	access:public
__anon64::endy	imp_isp.h	/^	uint16_t endy;                 \/**< 画线纵向结束点 *\/$/;"	m	struct:__anon64	access:public
__anon64::startx	imp_isp.h	/^	uint16_t startx;               \/**< 画线横向起始点 *\/$/;"	m	struct:__anon64	access:public
__anon64::starty	imp_isp.h	/^	uint16_t starty;               \/**< 画线纵向起始点 *\/$/;"	m	struct:__anon64	access:public
__anon64::width	imp_isp.h	/^	uint8_t  width;                \/**< 线宽 *\/$/;"	m	struct:__anon64	access:public
__anon66::__anon67::line	imp_isp.h	/^		IMPISPDrawLineAttr line;		\/**< 画线属性 *\/$/;"	m	union:__anon66::__anon67	access:public
__anon66::__anon67::rang	imp_isp.h	/^		IMPISPDrawRangAttr rang;		\/**< 画四角窗属性 *\/$/;"	m	union:__anon66::__anon67	access:public
__anon66::__anon67::wind	imp_isp.h	/^		IMPISPDrawWindAttr wind;		\/**< 画框属性 *\/$/;"	m	union:__anon66::__anon67	access:public
__anon66::cfg	imp_isp.h	/^	} cfg;								\/**< 画图属性 *\/$/;"	m	struct:__anon66	typeref:union:__anon66::__anon67	access:public
__anon66::color_type	imp_isp.h	/^	IMPISP_MASK_TYPE color_type;		\/**< 填充数据类型 *\/$/;"	m	struct:__anon66	access:public
__anon66::pinum	imp_isp.h	/^	uint8_t pinum;                      \/**< 块号(范围: 0~19) *\/$/;"	m	struct:__anon66	access:public
__anon66::type	imp_isp.h	/^	IMPISPDrawType type;                \/**< 画图类型 *\/$/;"	m	struct:__anon66	access:public
__anon68::AeAGain	imp_isp.h	/^	uint32_t AeAGain;                                   \/**< AE Sensor模拟增益值，单位是倍数 x 1024 *\/$/;"	m	struct:__anon68	access:public
__anon68::AeDGain	imp_isp.h	/^	uint32_t AeDGain;                                   \/**< AE Sensor数字增益值，单位是倍数 x 1024 *\/$/;"	m	struct:__anon68	access:public
__anon68::AeIntegrationTime	imp_isp.h	/^	uint32_t AeIntegrationTime;                         \/**< AE的曝光值 *\/$/;"	m	struct:__anon68	access:public
__anon68::AeIntegrationTimeUnit	imp_isp.h	/^	IMPISPAEIntegrationTimeUnit AeIntegrationTimeUnit;  \/**< AE曝光时间单位 *\/$/;"	m	struct:__anon68	access:public
__anon68::AeIspDGain	imp_isp.h	/^	uint32_t AeIspDGain;                                \/**< AE ISP 数字增益值，单位倍数 x 1024*\/$/;"	m	struct:__anon68	access:public
__anon68::AeMaxAGain	imp_isp.h	/^	uint32_t AeMaxAGain;                                \/**< AE最大sensor模拟增益 *\/$/;"	m	struct:__anon68	access:public
__anon68::AeMaxDgain	imp_isp.h	/^	uint32_t AeMaxDgain;                                \/**< AE最大sensor数字增益 *\/$/;"	m	struct:__anon68	access:public
__anon68::AeMaxIntegrationTime	imp_isp.h	/^	uint32_t AeMaxIntegrationTime;                      \/**< AE最大曝光时间 *\/$/;"	m	struct:__anon68	access:public
__anon68::AeMaxIspDGain	imp_isp.h	/^	uint32_t AeMaxIspDGain;                             \/**< AE最大ISP数字增益 *\/$/;"	m	struct:__anon68	access:public
__anon68::AeMinAGain	imp_isp.h	/^	uint32_t AeMinAGain;                                \/**< AE最小sensor模拟增益 *\/$/;"	m	struct:__anon68	access:public
__anon68::AeMinDgain	imp_isp.h	/^	uint32_t AeMinDgain;                                \/**< AE最小sensor数字增益 *\/$/;"	m	struct:__anon68	access:public
__anon68::AeMinIntegrationTime	imp_isp.h	/^	uint32_t AeMinIntegrationTime;                      \/**< AE最小曝光时间 *\/$/;"	m	struct:__anon68	access:public
__anon68::AeMinIspDGain	imp_isp.h	/^	uint32_t AeMinIspDGain;                             \/**< AE最小ISP数字增益 *\/$/;"	m	struct:__anon68	access:public
__anon68::AeShortAGain	imp_isp.h	/^	uint32_t AeShortAGain;                              \/**< AE Sensor模拟增益值，单位是倍数 x 1024 *\/$/;"	m	struct:__anon68	access:public
__anon68::AeShortDGain	imp_isp.h	/^	uint32_t AeShortDGain;                              \/**< AE Sensor数字增益值，单位是倍数 x 1024 *\/$/;"	m	struct:__anon68	access:public
__anon68::AeShortIntegrationTime	imp_isp.h	/^	uint32_t AeShortIntegrationTime;                    \/**< AE的曝光值 *\/$/;"	m	struct:__anon68	access:public
__anon68::AeShortIspDGain	imp_isp.h	/^	uint32_t AeShortIspDGain;                           \/**< AE ISP 数字增益值，单位倍数 x 1024*\/$/;"	m	struct:__anon68	access:public
__anon68::AeShortMaxAGain	imp_isp.h	/^	uint32_t AeShortMaxAGain;                           \/**< AE最大sensor模拟增益 *\/$/;"	m	struct:__anon68	access:public
__anon68::AeShortMaxDgain	imp_isp.h	/^	uint32_t AeShortMaxDgain;                           \/**< AE最大sensor数字增益 *\/$/;"	m	struct:__anon68	access:public
__anon68::AeShortMaxIntegrationTime	imp_isp.h	/^	uint32_t AeShortMaxIntegrationTime;                 \/**< AE最大曝光时间 *\/$/;"	m	struct:__anon68	access:public
__anon68::AeShortMaxIspDGain	imp_isp.h	/^	uint32_t AeShortMaxIspDGain;                        \/**< AE最大ISP数字增益 *\/$/;"	m	struct:__anon68	access:public
__anon68::AeShortMinAGain	imp_isp.h	/^	uint32_t AeShortMinAGain;                           \/**< AE最小sensor模拟增益 *\/$/;"	m	struct:__anon68	access:public
__anon68::AeShortMinDgain	imp_isp.h	/^	uint32_t AeShortMinDgain;                           \/**< AE最小sensor数字增益 *\/$/;"	m	struct:__anon68	access:public
__anon68::AeShortMinIntegrationTime	imp_isp.h	/^	uint32_t AeShortMinIntegrationTime;                 \/**< AE最小曝光时间 *\/$/;"	m	struct:__anon68	access:public
__anon68::AeShortMinIspDGain	imp_isp.h	/^	uint32_t AeShortMinIspDGain;                        \/**< AE最小ISP数字增益 *\/$/;"	m	struct:__anon68	access:public
__anon68::AeStatis	imp_isp.h	/^	IMPISPAEStatisAttr AeStatis;						\/**< AE统计属性 *\/$/;"	m	struct:__anon68	access:public
__anon68::fps	imp_isp.h	/^	uint32_t fps;                                       \/**< sensor 帧率 *\/$/;"	m	struct:__anon68	access:public
__anon69::AeAGain	imp_isp.h	/^	uint32_t AeAGain;                                   \/**< AE Sensor 模拟增益值，单位是倍数 x 1024 *\/$/;"	m	struct:__anon69	access:public
__anon69::AeDGain	imp_isp.h	/^	uint32_t AeDGain;                                   \/**< AE Sensor数字增益值，单位是倍数 x 1024 *\/$/;"	m	struct:__anon69	access:public
__anon69::AeIntegrationTime	imp_isp.h	/^	uint32_t AeIntegrationTime;                         \/**< AE的曝光值 *\/$/;"	m	struct:__anon69	access:public
__anon69::AeIntegrationTimeUnit	imp_isp.h	/^	IMPISPAEIntegrationTimeUnit AeIntegrationTimeUnit;  \/**< AE曝光时间单位 *\/$/;"	m	struct:__anon69	access:public
__anon69::AeIspDGain	imp_isp.h	/^	uint32_t AeIspDGain;                                \/**< AE ISP 数字增益值，单位倍数 x 1024*\/$/;"	m	struct:__anon69	access:public
__anon69::AeShortAGain	imp_isp.h	/^	uint32_t AeShortAGain;                              \/**< AE Sensor 模拟增益值，单位是倍数 x 1024 *\/$/;"	m	struct:__anon69	access:public
__anon69::AeShortDGain	imp_isp.h	/^	uint32_t AeShortDGain;                              \/**< AE Sensor数字增益值，单位是倍数 x 1024 *\/$/;"	m	struct:__anon69	access:public
__anon69::AeShortIntegrationTime	imp_isp.h	/^	uint32_t AeShortIntegrationTime;                    \/**< AE的曝光值 *\/$/;"	m	struct:__anon69	access:public
__anon69::AeShortIspDGain	imp_isp.h	/^	uint32_t AeShortIspDGain;                           \/**< AE ISP 数字增益值，单位倍数 x 1024*\/$/;"	m	struct:__anon69	access:public
__anon69::Wdr_mode	imp_isp.h	/^	uint32_t Wdr_mode;									\/**< 当前是否WDR模式*\/$/;"	m	struct:__anon69	access:public
__anon69::ae_info	imp_isp.h	/^	IMPISPAEStatisInfo ae_info;							\/**< AE统计值 *\/$/;"	m	struct:__anon69	access:public
__anon69::sensor_attr	imp_isp.h	/^	IMPISPSENSORAttr sensor_attr;						\/**< Sensor基本属性*\/$/;"	m	struct:__anon69	access:public
__anon6::bus_num	imp_isp.h	/^	int32_t bus_num;        \/**< SPI总线地址 *\/$/;"	m	struct:__anon6	access:public
__anon6::modalias	imp_isp.h	/^	char modalias[32];      \/**< SPI设备名字，必须与摄像头驱动中struct spi_device_id中name变量一致 *\/$/;"	m	struct:__anon6	access:public
__anon70::AeAGain	imp_isp.h	/^	uint32_t AeAGain;                                   \/**< AE Sensor 模拟增益值，单位是倍数 x 1024 *\/$/;"	m	struct:__anon70	access:public
__anon70::AeDGain	imp_isp.h	/^	uint32_t AeDGain;                                   \/**< AE Sensor数字增益值，单位是倍数 x 1024 *\/$/;"	m	struct:__anon70	access:public
__anon70::AeIntegrationTime	imp_isp.h	/^	uint32_t AeIntegrationTime;                         \/**< AE的曝光值 *\/$/;"	m	struct:__anon70	access:public
__anon70::AeIntegrationTimeUnit	imp_isp.h	/^	IMPISPAEIntegrationTimeUnit AeIntegrationTimeUnit;  \/**< AE曝光时间单位 *\/$/;"	m	struct:__anon70	access:public
__anon70::AeIspDGain	imp_isp.h	/^	uint32_t AeIspDGain;                                \/**< AE ISP 数字增益值，单位倍数 x 1024*\/$/;"	m	struct:__anon70	access:public
__anon70::AeShortAGain	imp_isp.h	/^	uint32_t AeShortAGain;                              \/**< AE Sensor 模拟增益值，单位是倍数 x 1024 *\/$/;"	m	struct:__anon70	access:public
__anon70::AeShortDGain	imp_isp.h	/^	uint32_t AeShortDGain;                              \/**< AE Sensor数字增益值，单位是倍数 x 1024 *\/$/;"	m	struct:__anon70	access:public
__anon70::AeShortIntegrationTime	imp_isp.h	/^	uint32_t AeShortIntegrationTime;                    \/**< AE手动模式下的曝光值 *\/$/;"	m	struct:__anon70	access:public
__anon70::AeShortIspDGain	imp_isp.h	/^	uint32_t AeShortIspDGain;                           \/**< AE ISP 数字增益值，单位倍数 x 1024*\/$/;"	m	struct:__anon70	access:public
__anon70::change	imp_isp.h	/^	uint32_t change;                                    \/**< 是否更新AE参数 *\/$/;"	m	struct:__anon70	access:public
__anon70::luma	imp_isp.h	/^	uint32_t luma;			       				\/**< AE Luma值 *\/$/;"	m	struct:__anon70	access:public
__anon70::luma_scence	imp_isp.h	/^	uint32_t luma_scence;		       				\/**< AE 场景Luma值 *\/$/;"	m	struct:__anon70	access:public
__anon72::close	imp_isp.h	/^	void (*close)(void *priv_data);													    \/**< 自定义AE库关闭接口 *\/$/;"	m	struct:__anon72	access:public
__anon72::handle	imp_isp.h	/^	void (*handle)(void *priv_data, const IMPISPAeInfo *AeInfo, IMPISPAeAttr *AeAttr);  \/**< 自定义AE库的处理接口 *\/$/;"	m	struct:__anon72	access:public
__anon72::notify	imp_isp.h	/^	int (*notify)(void *priv_data, IMPISPAeNotify notify, void *data);                  \/**< 自定义AE库的通知接口 *\/$/;"	m	struct:__anon72	access:public
__anon72::open	imp_isp.h	/^	int (*open)(void *priv_data, IMPISPAeInitAttr *AeInitAttr);                         \/**< 自定义AE库开始接口 *\/$/;"	m	struct:__anon72	access:public
__anon72::priv_data	imp_isp.h	/^	void *priv_data;																	\/**< 私有数据地址 *\/$/;"	m	struct:__anon72	access:public
__anon73::AwbStatis	imp_isp.h	/^	IMPISPAWBStatisAttr AwbStatis;							\/**< AWB的初始统计属性 *\/$/;"	m	struct:__anon73	access:public
__anon74::awb_statis	imp_isp.h	/^	IMPISPAWBStatisInfo awb_statis;						\/**< 白平衡区域统计值 *\/$/;"	m	struct:__anon74	access:public
__anon74::b_gain_statis	imp_isp.h	/^	uint32_t b_gain_statis;								\/**< 白平衡全局加权统计值b_gain *\/$/;"	m	struct:__anon74	access:public
__anon74::b_gain_wei_statis	imp_isp.h	/^	uint32_t b_gain_wei_statis;							\/**< 白平衡全局加权统计值b_gain *\/$/;"	m	struct:__anon74	access:public
__anon74::cur_b_gain	imp_isp.h	/^	uint32_t cur_b_gain;								\/**< 白平衡B通道增益 *\/$/;"	m	struct:__anon74	access:public
__anon74::cur_r_gain	imp_isp.h	/^	uint32_t cur_r_gain;								\/**< 白平衡R通道增益 *\/$/;"	m	struct:__anon74	access:public
__anon74::r_gain_statis	imp_isp.h	/^	uint32_t r_gain_statis;								\/**< 白平衡全局统计值r_gain *\/$/;"	m	struct:__anon74	access:public
__anon74::r_gain_wei_statis	imp_isp.h	/^	uint32_t r_gain_wei_statis;							\/**< 白平衡全局加权统计值r_gain *\/$/;"	m	struct:__anon74	access:public
__anon75::b_gain	imp_isp.h	/^	uint32_t b_gain;						\/**< AWB参数 b_gain *\/$/;"	m	struct:__anon75	access:public
__anon75::change	imp_isp.h	/^	uint32_t change;					\/**< 是否更新AWB参数 *\/$/;"	m	struct:__anon75	access:public
__anon75::ct	imp_isp.h	/^	uint32_t ct;						    \/**< 当前色温 *\/$/;"	m	struct:__anon75	access:public
__anon75::r_gain	imp_isp.h	/^	uint32_t r_gain;						\/**< AWB参数 r_gain *\/$/;"	m	struct:__anon75	access:public
__anon77::close	imp_isp.h	/^	void (*close)(void *priv_data);                                                         \/**< 自定义AWB库关闭接口 *\/$/;"	m	struct:__anon77	access:public
__anon77::handle	imp_isp.h	/^	void (*handle)(void *priv_data, const IMPISPAwbInfo *AwbInfo, IMPISPAwbAttr *AwbAttr);  \/**< 自定义AWB库的处理接口 *\/$/;"	m	struct:__anon77	access:public
__anon77::notify	imp_isp.h	/^	int (*notify)(void *priv_data, IMPISPAwbNotify notify, void *data);                     \/**< 自定义AWB库的通知接口 *\/$/;"	m	struct:__anon77	access:public
__anon77::open	imp_isp.h	/^	int (*open)(void *priv_data, IMPISPAwbInitAttr *AwbInitAttr);                           \/**< 自定义AWB库开始接口 *\/$/;"	m	struct:__anon77	access:public
__anon77::priv_data	imp_isp.h	/^	void *priv_data;																		\/**< 私有数据地址 *\/$/;"	m	struct:__anon77	access:public
__anon78::bname	imp_isp.h	/^	char bname[64];				 \/**< bin文件的绝对路径 *\/$/;"	m	struct:__anon78	access:public
__anon78::enable	imp_isp.h	/^	IMPISPTuningOpsMode enable;	 \/**< Switch bin功能开关 *\/$/;"	m	struct:__anon78	access:public
__anon80::enable	imp_isp.h	/^	IMPISPTuningOpsMode enable;	\/**< 使能标志 *\/$/;"	m	struct:__anon80	access:public
__anon80::fmark	imp_isp.h	/^        uint32_t fmark;			\/**< 位标志(1输出，0丢失) *\/$/;"	m	struct:__anon80	access:public
__anon80::lsize	imp_isp.h	/^        uint8_t lsize;			\/**< 总数量(范围:0~31) *\/$/;"	m	struct:__anon80	access:public
__anon81::fdrop	imp_isp.h	/^	IMPISPFrameDrop fdrop[3];	\/**< 各个通道的丢帧参数 *\/$/;"	m	struct:__anon81	access:public
__anon83::chx	imp_isp.h	/^        uint8_t chx;		\/*通道 0~2*\/$/;"	m	struct:__anon83	access:public
__anon83::level	imp_isp.h	/^        uint8_t level;		\/*缩放清晰度等级 范围0~128*\/$/;"	m	struct:__anon83	access:public
__anon83::mode	imp_isp.h	/^        IMPISPScalerMode mode;	\/*缩放方法*\/$/;"	m	struct:__anon83	access:public
__anon86::chnOSDAttr	imp_isp.h	/^	IMPISPOSDAttr chnOSDAttr;					  \/**< 填充功能通道属性 *\/$/;"	m	struct:__anon86	access:public
__anon86::pic	imp_isp.h	/^	IMPISPOSDBlockAttr pic;                       \/**< 填充图片属性，每个通道最多可以填充8张图片 *\/$/;"	m	struct:__anon86	access:public
__anon87::__anon88::stsinglepicAttr	imp_isp.h	/^	IMPISPOSDSingleAttr stsinglepicAttr;\/*pic 类型的ISPOSD*\/$/;"	m	union:__anon87::__anon88	access:public
__anon87::type	imp_isp.h	/^	IMPISPOSDType type;$/;"	m	struct:__anon87	access:public
__anon89::frameInfo	imp_ivs_move.h	/^	IMPFrameInfo    frameInfo;                         \/**< 帧尺寸信息,只需要配置width和height *\/$/;"	m	struct:__anon89	access:public
__anon89::roiRect	imp_ivs_move.h	/^	IMPRect         roiRect[IMP_IVS_MOVE_MAX_ROI_CNT]; \/*< 需要检测的roi区域坐标信息 *\/$/;"	m	struct:__anon89	access:public
__anon89::roiRectCnt	imp_ivs_move.h	/^	int             roiRectCnt;                        \/*< 需要检测的roi区域数量，范围为0-51，若为0：则不检测，1：检测roiRect 0$/;"	m	struct:__anon89	access:public
__anon89::sense	imp_ivs_move.h	/^	int             sense[IMP_IVS_MOVE_MAX_ROI_CNT];   \/**< 移动侦测的灵敏度, 对正常摄像机范围是0-4，对全景摄像机范围是0-8 *\/$/;"	m	struct:__anon89	access:public
__anon89::skipFrameCnt	imp_ivs_move.h	/^	int             skipFrameCnt;                      \/*< 隔帧检测的个数 *\/$/;"	m	struct:__anon89	access:public
__anon90::retRoi	imp_ivs_move.h	/^	int retRoi[IMP_IVS_MOVE_MAX_ROI_CNT];				\/*< 区域检测移动结果，与roiRect坐标信息严格对应,0:表示未检测到运动，1：表示检测到运动 *\/$/;"	m	struct:__anon90	access:public
__anon94::color	imp_osd.h	/^	uint32_t		color;			\/**< 颜色，支持IMPOsdColour枚举类型颜色 *\/$/;"	m	struct:__anon94	access:public
__anon94::linelength	imp_osd.h	/^	uint32_t		linelength;		\/**< 线长 *\/$/;"	m	struct:__anon94	access:public
__anon94::linewidth	imp_osd.h	/^	uint32_t		linewidth;		\/**< 线宽 *\/$/;"	m	struct:__anon94	access:public
__anon94::rectlinelength	imp_osd.h	/^	uint32_t		rectlinelength; \/**< 半边框的线长*\/$/;"	m	struct:__anon94	access:public
__anon95::color	imp_osd.h	/^	uint32_t		color;			\/**< 颜色，只支持bgra颜色格式 *\/$/;"	m	struct:__anon95	access:public
__anon96::pData	imp_osd.h	/^	void				*pData;			\/**< 图片数据指针 *\/$/;"	m	struct:__anon96	access:public
__anon97::bitmapData	imp_osd.h	/^	void				*bitmapData;		\/**< 点阵数据 *\/$/;"	m	union:__anon97	access:public
__anon97::coverData	imp_osd.h	/^	coverData			coverData;		\/**< 遮挡数据 *\/$/;"	m	union:__anon97	access:public
__anon97::lineRectData	imp_osd.h	/^	lineRectData			lineRectData;		\/**< 线、矩形数据 *\/$/;"	m	union:__anon97	access:public
__anon97::picData	imp_osd.h	/^	picData				picData;		\/**< 图片数据 *\/$/;"	m	union:__anon97	access:public
__anon98::fontHeight	imp_osd.h	/^	unsigned int fontHeight;$/;"	m	struct:__anon98	access:public
__anon98::fontWidth	imp_osd.h	/^	unsigned int fontWidth;$/;"	m	struct:__anon98	access:public
__anon99::colType	imp_osd.h	/^	unsigned int			colType[20];			\/**< 主码流时间戳各字符反色标识 *\/$/;"	m	struct:__anon99	access:public
__anon99::data	imp_osd.h	/^	IMPOSDFontSizeAttrData  data;					\/**< 时间戳字符尺寸属性数据 *\/$/;"	m	struct:__anon99	access:public
__anon99::invertColorSwitch	imp_osd.h	/^	unsigned int			invertColorSwitch;		\/**< 时间戳反色使能开关 *\/$/;"	m	struct:__anon99	access:public
__anon99::istimestamp	imp_osd.h	/^	unsigned int			istimestamp;			\/**< 图片数据是否为时间戳 *\/$/;"	m	struct:__anon99	access:public
__anon99::length	imp_osd.h	/^	unsigned int			length;					\/**< 字体长度*\/$/;"	m	struct:__anon99	access:public
__anon99::luminance	imp_osd.h	/^	unsigned int			luminance;				\/**< 亮度参考 默认190*\/$/;"	m	struct:__anon99	access:public
__anon9::__anon10::i2c	imp_isp.h	/^		IMPI2CInfo i2c;			\/**< I2C总线信息 *\/$/;"	m	union:__anon9::__anon10	access:public
__anon9::__anon10::spi	imp_isp.h	/^		IMPSPIInfo spi;			\/**< SPI总线信息 *\/$/;"	m	union:__anon9::__anon10	access:public
__anon9::cbus_type	imp_isp.h	/^	IMPSensorControlBusType cbus_type;      \/**< 摄像头控制总线类型 *\/$/;"	m	struct:__anon9	access:public
__anon9::default_boot	imp_isp.h	/^	int default_boot;			\/**< 摄像头默认启动setting *\/$/;"	m	struct:__anon9	access:public
__anon9::mclk	imp_isp.h	/^	IMPSensorMclk mclk;			\/**< 摄像头Mclk时钟源 *\/$/;"	m	struct:__anon9	access:public
__anon9::name	imp_isp.h	/^	char name[32];				\/**< 摄像头名字 *\/$/;"	m	struct:__anon9	access:public
__anon9::power_gpio	imp_isp.h	/^	int power_gpio;		                \/**< 摄像头power 接口链接的GPIO，注意：现在没有启用该参数 *\/$/;"	m	struct:__anon9	access:public
__anon9::pwdn_gpio	imp_isp.h	/^	int pwdn_gpio;		                \/**< 摄像头power down接口链接的GPIO *\/$/;"	m	struct:__anon9	access:public
__anon9::rst_gpio	imp_isp.h	/^	int rst_gpio;		                \/**< 摄像头reset接口链接的GPIO *\/$/;"	m	struct:__anon9	access:public
__anon9::sensor_id	imp_isp.h	/^	unsigned short sensor_id;               \/**< 摄像头ID号 *\/$/;"	m	struct:__anon9	access:public
__anon9::video_interface	imp_isp.h	/^	IMPSensorVinType video_interface;	\/**< 摄像头数据输入接口 *\/$/;"	m	struct:__anon9	access:public
aVersion	imp_system.h	/^	char aVersion[64];	\/**< IMP系统版本号 *\/$/;"	m	struct:__anon160	access:public
addr	imp_isp.h	/^	int32_t addr;		\/**< I2C地址 *\/$/;"	m	struct:__anon5	access:public
addr	imp_isp.h	/^        uint32_t addr;   \/**< 寄存器地址 *\/$/;"	m	struct:__anon11	access:public
ae	imp_isp.h	/^	IMPISPAEStatisAttr ae;      \/**< AE 统计信息属性 *\/$/;"	m	struct:__anon38	access:public
ae_hist_256bin	imp_isp.h	/^	uint32_t ae_hist_256bin[256];           \/**< AE统计直方图bin值, 为每个bin的实际pixel数量*\/$/;"	m	struct:__anon42	access:public
ae_hist_5bin	imp_isp.h	/^	unsigned short ae_hist_5bin[5];         \/**< AE统计直方图bin值 [0 ~ 65535]*\/$/;"	m	struct:__anon42	access:public
ae_info	imp_isp.h	/^	IMPISPAEStatisInfo ae_info;							\/**< AE统计值 *\/$/;"	m	struct:__anon69	access:public
ae_roi	imp_isp.h	/^	IMPISPWeight ae_roi;               \/**< 感兴趣区域权重值(0 ~ 8)(预留) *\/$/;"	m	struct:__anon40	access:public
ae_sta_en	imp_isp.h	/^	IMPISPTuningOpsMode ae_sta_en;  \/**< AE统计功能开关*\/$/;"	m	struct:__anon34	access:public
ae_statis	imp_isp.h	/^	IMPISPStatisZone ae_statis;             \/**< AE统计信息 *\/$/;"	m	struct:__anon42	access:public
ae_weight	imp_isp.h	/^	IMPISPWeight ae_weight;            \/**< 全局权重值(0~ 8) *\/$/;"	m	struct:__anon40	access:public
aecChn	imp_audio.h	/^	IMPAudioAecChn aecChn;				\/**< 选择回音消除的通道*\/$/;"	m	struct:__anon141	access:public
aecFrame	imp_dmic.h	/^	IMPDmicFrame aecFrame;  \/\/选取其中一路AEC处理后的数据;$/;"	m	struct:__anon157	access:public
af	imp_isp.h	/^	IMPISPAFStatisAttr af;      \/**< AF 统计信息属性 *\/$/;"	m	struct:__anon38	access:public
af_alpha_alt	imp_isp.h	/^	unsigned short af_alpha_alt;        \/**< AF统计低通滤波器的水平与垂直方向的权重 [0 ~ 64]*\/$/;"	m	struct:__anon37	access:public
af_belta_alt	imp_isp.h	/^	unsigned short af_belta_alt;        \/**< AF统计低通滤波器的水平与垂直方向的权重 [0 ~ 64]*\/$/;"	m	struct:__anon37	access:public
af_delta	imp_isp.h	/^	unsigned short af_delta;            \/**< AF统计低通滤波器的权重 [0 ~ 64]*\/$/;"	m	struct:__anon37	access:public
af_frame_num	imp_isp.h	/^	 uint8_t af_frame_num;		\/**< AF帧数*\/$/;"	m	struct:__anon53	access:public
af_hilight_th	imp_isp.h	/^	unsigned short af_hilight_th;       \/**< AF高亮点统计阈值 [0 ~ 255]*\/$/;"	m	struct:__anon37	access:public
af_metrics	imp_isp.h	/^	 uint32_t af_metrics;       \/**< AF主统计值*\/$/;"	m	struct:__anon53	access:public
af_metrics_alt	imp_isp.h	/^	 uint32_t af_metrics_alt;   \/**< AF次统计值*\/$/;"	m	struct:__anon53	access:public
af_metrics_shift	imp_isp.h	/^	unsigned char af_metrics_shift;     \/**< AF统计值缩小参数 默认是0，1代表缩小2倍*\/$/;"	m	struct:__anon37	access:public
af_sta_en	imp_isp.h	/^	IMPISPTuningOpsMode af_sta_en;      \/**< AF统计功能开关*\/$/;"	m	struct:__anon37	access:public
af_theta	imp_isp.h	/^	unsigned short af_theta;            \/**< AF统计高通滤波器的权重 [0 ~ 64]*\/$/;"	m	struct:__anon37	access:public
alpha	imp_isp.h	/^	uint8_t  alpha;                \/**< 线条Alpha值 *\/$/;"	m	struct:__anon64	access:public
alpha	imp_isp.h	/^	uint8_t  alpha;            \/**< 四角窗边框alpha （3bit） *\/$/;"	m	struct:__anon63	access:public
alpha	imp_isp.h	/^	uint8_t  alpha;            \/**< 宽口边框alpha（3bit） *\/$/;"	m	struct:__anon62	access:public
argb	imp_isp.h	/^	} argb; 			\/**< RGB *\/$/;"	m	struct:color_value	typeref:struct:color_value::__anon56	access:public
attrCappedQuality	imp_encoder.h	/^		IMPEncoderAttrCappedQuality    attrCappedQuality;$/;"	m	union:__anon125::__anon126	access:public
attrCappedVbr	imp_encoder.h	/^		IMPEncoderAttrCappedVbr        attrCappedVbr;$/;"	m	union:__anon125::__anon126	access:public
attrCbr	imp_encoder.h	/^		IMPEncoderAttrCbr              attrCbr;$/;"	m	union:__anon125::__anon126	access:public
attrFixQp	imp_encoder.h	/^		IMPEncoderAttrFixQP            attrFixQp;$/;"	m	union:__anon125::__anon126	access:public
attrRcMode	imp_encoder.h	/^	IMPEncoderAttrRcMode    attrRcMode;$/;"	m	struct:__anon128	access:public
attrVbr	imp_encoder.h	/^		IMPEncoderAttrVbr              attrVbr;$/;"	m	union:__anon125::__anon126	access:public
awb	imp_isp.h	/^	IMPISPAWBStatisAttr awb;    \/**< AWB 统计信息属性 *\/$/;"	m	struct:__anon38	access:public
awb_b	imp_isp.h	/^	IMPISPStatisZone awb_b;    \/**< AWB B通道统计值 *\/$/;"	m	struct:__anon47	access:public
awb_frz	imp_isp.h	/^	IMPISPTuningOpsMode awb_frz;            \/**< 白平衡frzzen 使能*\/$/;"	m	struct:isp_core_wb_attr	access:public
awb_g	imp_isp.h	/^	IMPISPStatisZone awb_g;    \/**< AWB G通道统计值 *\/$/;"	m	struct:__anon47	access:public
awb_r	imp_isp.h	/^	IMPISPStatisZone awb_r;    \/**< AWB R通道统计值 *\/$/;"	m	struct:__anon47	access:public
awb_sta_en	imp_isp.h	/^	IMPISPTuningOpsMode awb_sta_en;         \/**< AWB统计功能开关*\/$/;"	m	struct:__anon36	access:public
awb_start	imp_isp.h	/^	IMPISPAWBGain awb_start;                \/**< 白平衡收敛起始点 *\/$/;"	m	struct:isp_core_wb_attr	access:public
awb_start_en	imp_isp.h	/^	IMPISPTuningOpsMode awb_start_en;       \/**< 白平衡收敛起始点使能 *\/$/;"	m	struct:isp_core_wb_attr	access:public
awb_statis	imp_isp.h	/^	IMPISPAWBStatisInfo awb_statis;						\/**< 白平衡区域统计值 *\/$/;"	m	struct:__anon74	access:public
ayuv	imp_isp.h	/^	} ayuv;	        		\/**< YUV *\/$/;"	m	struct:color_value	typeref:struct:color_value::__anon57	access:public
bEnableIvdc	imp_encoder.h	/^	bool                    bEnableIvdc;    \/**< ISP VPU Direct Connect使能标志*\/$/;"	m	struct:__anon129	access:public
bEnableLT	imp_encoder.h	/^	bool                    bEnableLT;$/;"	m	struct:__anon119	access:public
bLTRC	imp_encoder.h	/^	bool                    bLTRC;$/;"	m	struct:__anon119	access:public
b_gain	imp_isp.h	/^	uint32_t b_gain;						\/**< AWB参数 b_gain *\/$/;"	m	struct:__anon75	access:public
b_gain_statis	imp_isp.h	/^	uint32_t b_gain_statis;								\/**< 白平衡全局加权统计值b_gain *\/$/;"	m	struct:__anon74	access:public
b_gain_wei_statis	imp_isp.h	/^	uint32_t b_gain_wei_statis;							\/**< 白平衡全局加权统计值b_gain *\/$/;"	m	struct:__anon74	access:public
b_value	imp_isp.h	/^		unsigned char b_value;	\/**< B 值 *\/$/;"	m	struct:color_value::__anon56	access:public
bgAlhpa	imp_osd.h	/^	int					bgAlhpa;		\/**< 背景Alpha *\/$/;"	m	struct:__anon103	access:public
bgain	imp_isp.h	/^	uint32_t bgain;     \/**< 白平衡B通道增益 *\/$/;"	m	struct:__anon48	access:public
bitBypassADR	imp_isp.h	/^		uint32_t bitBypassADR : 1;      \/**< [7] *\/$/;"	m	struct:__anon21::__anon22	access:public
bitBypassAWB0	imp_isp.h	/^		uint32_t bitBypassAWB0 : 1;     \/**< [2] *\/$/;"	m	struct:__anon21::__anon22	access:public
bitBypassAWB1	imp_isp.h	/^		uint32_t bitBypassAWB1 : 1;     \/**< [6] *\/$/;"	m	struct:__anon21::__anon22	access:public
bitBypassBCSH	imp_isp.h	/^		uint32_t bitBypassBCSH : 1;     \/**< [15] *\/$/;"	m	struct:__anon21::__anon22	access:public
bitBypassBLC	imp_isp.h	/^		uint32_t bitBypassBLC : 1;      \/**< [0] *\/$/;"	m	struct:__anon21::__anon22	access:public
bitBypassCCM	imp_isp.h	/^		uint32_t bitBypassCCM : 1;      \/**< [9] *\/$/;"	m	struct:__anon21::__anon22	access:public
bitBypassCDNS	imp_isp.h	/^		uint32_t bitBypassCDNS : 1;     \/**< [19] *\/$/;"	m	struct:__anon21::__anon22	access:public
bitBypassCLM	imp_isp.h	/^		uint32_t bitBypassCLM : 1;      \/**< [16] *\/$/;"	m	struct:__anon21::__anon22	access:public
bitBypassCSC	imp_isp.h	/^		uint32_t bitBypassCSC : 1;      \/**< [12] *\/$/;"	m	struct:__anon21::__anon22	access:public
bitBypassDEFOG	imp_isp.h	/^		uint32_t bitBypassDEFOG : 1;    \/**< [11] *\/$/;"	m	struct:__anon21::__anon22	access:public
bitBypassDMSC	imp_isp.h	/^		uint32_t bitBypassDMSC : 1;     \/**< [8] *\/$/;"	m	struct:__anon21::__anon22	access:public
bitBypassDPC	imp_isp.h	/^		uint32_t bitBypassDPC : 1;      \/**< [4] *\/$/;"	m	struct:__anon21::__anon22	access:public
bitBypassGAMMA	imp_isp.h	/^		uint32_t bitBypassGAMMA : 1;    \/**< [10] *\/$/;"	m	struct:__anon21::__anon22	access:public
bitBypassGIB	imp_isp.h	/^		uint32_t bitBypassGIB : 1;      \/**< [5] *\/$/;"	m	struct:__anon21::__anon22	access:public
bitBypassHLDC	imp_isp.h	/^		uint32_t bitBypassHLDC : 1;     \/**< [20] *\/$/;"	m	struct:__anon21::__anon22	access:public
bitBypassLCE	imp_isp.h	/^		uint32_t bitBypassLCE : 1;      \/**< [21] *\/$/;"	m	struct:__anon21::__anon22	access:public
bitBypassLSC	imp_isp.h	/^		uint32_t bitBypassLSC : 1;      \/**< [1] *\/$/;"	m	struct:__anon21::__anon22	access:public
bitBypassMDNS	imp_isp.h	/^		uint32_t bitBypassMDNS : 1;     \/**< [13] *\/$/;"	m	struct:__anon21::__anon22	access:public
bitBypassSDNS	imp_isp.h	/^		uint32_t bitBypassSDNS : 1;     \/**< [18] *\/$/;"	m	struct:__anon21::__anon22	access:public
bitBypassWDR	imp_isp.h	/^		uint32_t bitBypassWDR : 1;      \/**< [3] *\/$/;"	m	struct:__anon21::__anon22	access:public
bitBypassYDNS	imp_isp.h	/^		uint32_t bitBypassYDNS : 1;     \/**< [14] *\/$/;"	m	struct:__anon21::__anon22	access:public
bitBypassYSP	imp_isp.h	/^		uint32_t bitBypassYSP : 1;      \/**< [17] *\/$/;"	m	struct:__anon21::__anon22	access:public
bitRsv	imp_isp.h	/^		uint32_t bitRsv : 10;           \/**< [22 ~ 30] *\/$/;"	m	struct:__anon21::__anon22	access:public
bitmapData	imp_osd.h	/^	void				*bitmapData;		\/**< 点阵数据 *\/$/;"	m	union:__anon97	access:public
bitwidth	imp_audio.h	/^	IMPAudioBitWidth bitwidth;			\/**< 音频采样精度 *\/$/;"	m	struct:__anon139	access:public
bitwidth	imp_audio.h	/^	IMPAudioBitWidth bitwidth;			\/**< 音频采样精度 *\/$/;"	m	struct:__anon140	access:public
bitwidth	imp_dmic.h	/^	IMPDmicBitWidth bitwidth;    \/**<DMIC采样精度 *\/$/;"	m	struct:__anon155	access:public
bitwidth	imp_dmic.h	/^	IMPDmicBitWidth bitwidth;$/;"	m	struct:__anon156	access:public
bname	imp_isp.h	/^	char bname[64];				 \/**< bin文件的绝对路径 *\/$/;"	m	struct:__anon78	access:public
bufSize	imp_audio.h	/^	int bufSize;							\/**<  buf 大小，以帧为单位，[2～MAX_AUDIO_FRAME_NUM] *\/$/;"	m	struct:__anon144	access:public
bufSize	imp_audio.h	/^	int bufSize;						\/**< 音频解码缓存大小 *\/$/;"	m	struct:__anon146	access:public
bufSize	imp_encoder.h	/^	uint32_t                bufSize;        \/**< 配置 buffer 大小，取值范围:不小于图像宽高乘积的1.5倍。设置通道编码属性时，将此参数设置为0，IMP内部会自动计算大小 *\/$/;"	m	struct:__anon117	access:public
bus_num	imp_isp.h	/^	int32_t bus_num;        \/**< SPI总线地址 *\/$/;"	m	struct:__anon6	access:public
calc_pic_size	imp_common.h	/^static inline int calc_pic_size(int width, int height, IMPPixelFormat imp_pixfmt)$/;"	f	signature:(int width, int height, IMPPixelFormat imp_pixfmt)
cbus_type	imp_isp.h	/^	IMPSensorControlBusType cbus_type;      \/**< 摄像头控制总线类型 *\/$/;"	m	struct:__anon9	access:public
cfg	imp_isp.h	/^	} cfg;								\/**< 画图属性 *\/$/;"	m	struct:__anon66	typeref:union:__anon66::__anon67	access:public
change	imp_isp.h	/^	uint32_t change;					\/**< 是否更新AWB参数 *\/$/;"	m	struct:__anon75	access:public
change	imp_isp.h	/^	uint32_t change;                                    \/**< 是否更新AE参数 *\/$/;"	m	struct:__anon70	access:public
chnBusyNum	imp_audio.h	/^	int chnBusyNum;					\/**< 被占用的缓存块数 *\/$/;"	m	struct:__anon142	access:public
chnCnt	imp_audio.h	/^	int chnCnt;							\/**< 支持的通道数目 *\/$/;"	m	struct:__anon139	access:public
chnCnt	imp_dmic.h	/^	int chnCnt;  \/\/支持的最大声道数目;$/;"	m	struct:__anon155	access:public
chnFreeNum	imp_audio.h	/^	int chnFreeNum;					\/**< 空闲缓存块数 *\/$/;"	m	struct:__anon142	access:public
chnOSDAttr	imp_isp.h	/^	IMPISPOSDAttr chnOSDAttr;					  \/**< 填充功能通道属性 *\/$/;"	m	struct:__anon86	access:public
chnTotalNum	imp_audio.h	/^	int chnTotalNum;				\/**< 输出通道总的缓存块数 *\/$/;"	m	struct:__anon142	access:public
chx	imp_isp.h	/^	uint8_t chx;              \/**< 通道号(范围: 0~2) *\/$/;"	m	struct:isp_mask_block_par	access:public
chx	imp_isp.h	/^        uint8_t chx;		\/*通道 0~2*\/$/;"	m	struct:__anon83	access:public
close	imp_isp.h	/^	void (*close)(void *priv_data);													    \/**< 自定义AE库关闭接口 *\/$/;"	m	struct:__anon72	access:public
close	imp_isp.h	/^	void (*close)(void *priv_data);                                                         \/**< 自定义AWB库关闭接口 *\/$/;"	m	struct:__anon77	access:public
closeDecoder	imp_audio.h	/^	int (*closeDecoder)(void *decoder);$/;"	m	struct:__anon147	access:public
closeEncoder	imp_audio.h	/^	int (*closeEncoder)(void *encoder);$/;"	m	struct:__anon145	access:public
cnt	imp_isp.h	/^	uint64_t cnt;			\/**< Frame统计(该参数设置无效，只能获取) *\/$/;"	m	struct:__anon15	access:public
colType	imp_osd.h	/^	unsigned int			colType[20];			\/**< 主码流时间戳各字符反色标识 *\/$/;"	m	struct:__anon99	access:public
color	imp_isp.h	/^	IMP_ISP_COLOR_VALUE color;     \/**< 线条颜色 *\/$/;"	m	struct:__anon64	access:public
color	imp_isp.h	/^	IMP_ISP_COLOR_VALUE color; \/**< 画四角窗颜色 *\/$/;"	m	struct:__anon63	access:public
color	imp_isp.h	/^	IMP_ISP_COLOR_VALUE color; \/**< 画窗颜色 *\/$/;"	m	struct:__anon62	access:public
color	imp_osd.h	/^	uint32_t		color;			\/**< 颜色，只支持bgra颜色格式 *\/$/;"	m	struct:__anon95	access:public
color	imp_osd.h	/^	uint32_t		color;			\/**< 颜色，支持IMPOsdColour枚举类型颜色 *\/$/;"	m	struct:__anon94	access:public
color_type	imp_isp.h	/^	IMPISP_MASK_TYPE color_type;		\/**< 填充数据类型 *\/$/;"	m	struct:__anon66	access:public
color_value	imp_isp.h	/^typedef struct color_value {$/;"	s
color_value::__anon56::b_value	imp_isp.h	/^		unsigned char b_value;	\/**< B 值 *\/$/;"	m	struct:color_value::__anon56	access:public
color_value::__anon56::g_value	imp_isp.h	/^		unsigned char g_value;	\/**< G 值 *\/$/;"	m	struct:color_value::__anon56	access:public
color_value::__anon56::r_value	imp_isp.h	/^		unsigned char r_value;	\/**< R 值 *\/$/;"	m	struct:color_value::__anon56	access:public
color_value::__anon57::u_value	imp_isp.h	/^		unsigned char u_value;	\/**< U 值 *\/$/;"	m	struct:color_value::__anon57	access:public
color_value::__anon57::v_value	imp_isp.h	/^		unsigned char v_value;	\/**< V 值 *\/$/;"	m	struct:color_value::__anon57	access:public
color_value::__anon57::y_value	imp_isp.h	/^		unsigned char y_value;	\/**< Y 值 *\/$/;"	m	struct:color_value::__anon57	access:public
color_value::argb	imp_isp.h	/^	} argb; 			\/**< RGB *\/$/;"	m	struct:color_value	typeref:struct:color_value::__anon56	access:public
color_value::ayuv	imp_isp.h	/^	} ayuv;	        		\/**< YUV *\/$/;"	m	struct:color_value	typeref:struct:color_value::__anon57	access:public
container_of	imp_utils.h	38;"	d
coverData	imp_osd.h	/^	coverData			coverData;		\/**< 遮挡数据 *\/$/;"	m	union:__anon97	access:public
coverData	imp_osd.h	/^} coverData;$/;"	t	typeref:struct:__anon95
crop	imp_encoder.h	/^	IMPEncoderCropCfg       crop;           \/**< 编码器裁剪属性 *\/$/;"	m	struct:__anon117	access:public
crop	imp_framesource.h	/^	IMPFSChnCrop crop;			\/**< 图片裁剪属性 *\/$/;"	m	struct:__anon179	access:public
ct	imp_isp.h	/^	uint32_t ct;						    \/**< 当前色温 *\/$/;"	m	struct:__anon75	access:public
ct	imp_isp.h	/^	unsigned int ct;                        \/**< 白平衡当前色温值 *\/$/;"	m	struct:isp_core_wb_attr	access:public
ct_node	imp_isp.h	/^	uint32_t ct_node[4];            \/**< 白平衡通道增益偏移的节点 *\/$/;"	m	struct:__anon51	access:public
curPacks	imp_encoder.h	/^	uint32_t    curPacks;               \/**< 当前帧的码流包个数 *\/$/;"	m	struct:__anon130	access:public
cur_b_gain	imp_isp.h	/^	uint32_t cur_b_gain;								\/**< 白平衡B通道增益 *\/$/;"	m	struct:__anon74	access:public
cur_r_gain	imp_isp.h	/^	uint32_t cur_r_gain;								\/**< 白平衡R通道增益 *\/$/;"	m	struct:__anon74	access:public
custom	imp_isp.h	/^	IMPISPAWBCustomModeAttr custom;         \/**< 白平衡自定义模式属性 *\/$/;"	m	struct:isp_core_wb_attr	access:public
customEn	imp_isp.h	/^	IMPISPTuningOpsMode customEn;   \/**< 白平衡自定义模式使能 *\/$/;"	m	struct:__anon51	access:public
data	imp_ivs_base_move.h	/^	uint8_t* data;$/;"	m	struct:__anon151	access:public
data	imp_osd.h	/^	IMPOSDFontSizeAttrData  data;					\/**< 时间戳字符尺寸属性数据 *\/$/;"	m	struct:__anon99	access:public
data	imp_osd.h	/^	IMPOSDRgnAttrData	data;			\/**< OSD区域属性数据 *\/$/;"	m	struct:__anon101	access:public
datalen	imp_ivs_base_move.h	/^	int datalen;$/;"	m	struct:__anon151	access:public
decAttr	imp_decoder.h	/^	IMPDecoderAttr		decAttr;		\/**< 解码器属性 *\/$/;"	m	struct:__anon162	access:public
decType	imp_decoder.h	/^	IMPPayloadType		decType;		\/**< 解码帧原数据协议类型 *\/$/;"	m	struct:__anon161	access:public
decodeFrm	imp_audio.h	/^	int (*decodeFrm)(void *decoder, unsigned char$/;"	m	struct:__anon147	access:public
decoderNal	imp_decoder.h	/^	IMPDecoderNal	decoderNal; \/**< 解码帧数据结构体 *\/$/;"	m	struct:__anon164	access:public
default_boot	imp_isp.h	/^	int default_boot;			\/**< 摄像头默认启动setting *\/$/;"	m	struct:__anon9	access:public
den	imp_isp.h	/^        uint32_t den;  \/**< 帧率的分母参数 *\/$/;"	m	struct:__anon13	access:public
deviceID	imp_common.h	/^	IMPDeviceID	deviceID;		\/**< 设备ID *\/$/;"	m	struct:__anon166	access:public
direct_phyAddr	imp_common.h	/^	uint32_t direct_phyAddr; 	\/**< 帧的直通地址 *\/$/;"	m	struct:__anon167	access:public
dmic_en	imp_dmic.h	/^	int dmic_en;$/;"	m	struct:__anon159	access:public
dmic_id	imp_dmic.h	/^	int dmic_id;$/;"	m	struct:__anon159	access:public
eEncOptions	imp_encoder.h	/^	uint32_t                eEncOptions;$/;"	m	struct:__anon117	access:public
eEncTools	imp_encoder.h	/^	uint32_t                eEncTools;$/;"	m	struct:__anon117	access:public
ePicFormat	imp_encoder.h	/^	IMPEncoderPicFormat     ePicFormat;$/;"	m	struct:__anon117	access:public
eProfile	imp_encoder.h	/^	IMPEncoderProfile       eProfile;$/;"	m	struct:__anon117	access:public
eRcOptions	imp_encoder.h	/^	uint32_t              eRcOptions;$/;"	m	struct:__anon122	access:public
eRcOptions	imp_encoder.h	/^	uint32_t              eRcOptions;$/;"	m	struct:__anon123	access:public
eRcOptions	imp_encoder.h	/^	uint32_t              eRcOptions;$/;"	m	struct:__anon124	access:public
en	imp_isp.h	/^	IMPISPTuningOpsMode en;     \/**< 模块强度配置功能使能 *\/$/;"	m	struct:__anon24	access:public
enable	imp_encoder.h	/^	bool        enable;     \/**< 是否进行裁剪,取值范围:[FALSE, TRUE],TRUE:使能裁剪,FALSE:不使能裁剪 *\/$/;"	m	struct:__anon115	access:public
enable	imp_framesource.h	/^	int enable;		\/**< 使能缩放功能 *\/$/;"	m	struct:__anon175	access:public
enable	imp_framesource.h	/^	int enable;		\/**< 使能裁剪功能 *\/$/;"	m	struct:__anon174	access:public
enable	imp_isp.h	/^	IMPISPTuningOpsMode enable;	 \/**< Switch bin功能开关 *\/$/;"	m	struct:__anon78	access:public
enable	imp_isp.h	/^	IMPISPTuningOpsMode enable;	\/**< 使能标志 *\/$/;"	m	struct:__anon80	access:public
enable	imp_isp.h	/^	uint8_t  enable;               \/**< 画线功能使能 *\/$/;"	m	struct:__anon64	access:public
enable	imp_isp.h	/^	uint8_t  enable;           \/**< 画四角窗功能使能 *\/$/;"	m	struct:__anon63	access:public
enable	imp_isp.h	/^	uint8_t  enable;           \/**< 画窗功能使能 *\/$/;"	m	struct:__anon62	access:public
encAttr	imp_encoder.h	/^	IMPEncoderEncAttr       encAttr;    \/**< 编码器属性结构体 *\/$/;"	m	struct:__anon129	access:public
encVputype	imp_encoder.h	/^	IMPEncoderVpuType       encVputype;$/;"	m	struct:__anon117	access:public
encoderFrm	imp_audio.h	/^	int (*encoderFrm)(void *encoder, IMPAudioFrame$/;"	m	struct:__anon145	access:public
endx	imp_isp.h	/^	uint16_t endx;                 \/**< 画线横向结束点 *\/$/;"	m	struct:__anon64	access:public
endy	imp_isp.h	/^	uint16_t endy;                 \/**< 画线纵向结束点 *\/$/;"	m	struct:__anon64	access:public
exit	imp_ivs.h	/^	void (*exit)(IMPIVSInterface *inf);								\/**< 注销函数 *\/$/;"	m	struct:IMPIVSInterface	access:public
extend	imp_isp.h	/^	uint16_t extend;           \/**< 四角窗边框长度 *\/$/;"	m	struct:__anon63	access:public
fcrop	imp_framesource.h	/^	IMPFSChnCrop fcrop;			\/**< 图片裁剪属性 *\/$/;"	m	struct:__anon179	access:public
fdrop	imp_isp.h	/^	IMPISPFrameDrop fdrop[3];	\/**< 各个通道的丢帧参数 *\/$/;"	m	struct:__anon81	access:public
fgAlhpa	imp_osd.h	/^	int					fgAlhpa;		\/**< 前景Alpha *\/$/;"	m	struct:__anon103	access:public
flip_enable	imp_framesource.h	/^    int flip_enable;            \/**< 图片翻转使能 *\/$/;"	m	struct:i2dattr	access:public
flushFrame	imp_ivs.h	/^	int	 (*flushFrame)(IMPIVSInterface *inf);						\/**< 释放由外部通过processAsync输入给算法后被缓存的所有frame *\/$/;"	m	struct:IMPIVSInterface	access:public
fmark	imp_isp.h	/^        uint32_t fmark;			\/**< 位标志(1输出，0丢失) *\/$/;"	m	struct:__anon80	access:public
fmt	imp_osd.h	/^	IMPPixelFormat		fmt;			\/**< 点格式 *\/$/;"	m	struct:__anon101	access:public
fmt_to_string	imp_common.h	/^static inline const char *fmt_to_string(IMPPixelFormat imp_pixfmt)$/;"	f	signature:(IMPPixelFormat imp_pixfmt)
fontData	imp_osd.h	/^	IMPOSDFontAttrData  fontData;		\/**< OSD Font属性数据 *\/$/;"	m	struct:__anon101	access:public
fontHeight	imp_osd.h	/^	unsigned int fontHeight;$/;"	m	struct:__anon98	access:public
fontWidth	imp_osd.h	/^	unsigned int fontWidth;$/;"	m	struct:__anon98	access:public
fps	imp_isp.h	/^	uint32_t fps;                                       \/**< sensor 帧率 *\/$/;"	m	struct:__anon68	access:public
fps	imp_isp.h	/^	uint32_t fps;       \/**< sensor 帧率 *\/$/;"	m	struct:__anon12	access:public
frameEnd	imp_encoder.h	/^	bool	                frameEnd;           \/**< 帧结束标识 *\/$/;"	m	struct:__anon108	access:public
frameInfo	imp_ivs_base_move.h	/^	IMPFrameInfo    frameInfo;                         \/**< 帧尺寸信息,只需要配置width和height *\/$/;"	m	struct:__anon150	access:public
frameInfo	imp_ivs_move.h	/^	IMPFrameInfo    frameInfo;                         \/**< 帧尺寸信息,只需要配置width和height *\/$/;"	m	struct:__anon89	access:public
frame_height	imp_osd.h	/^	int frame_height;		\/* 通道分辨率高度 *\/$/;"	m	struct:mosaicPointAttr	access:public
frame_width	imp_osd.h	/^	int frame_width;		\/* 通道分辨率宽度 *\/$/;"	m	struct:mosaicPointAttr	access:public
freq	imp_isp.h	/^	uint8_t freq;                           \/**< 设置抗闪的工频 *\/$/;"	m	struct:__anon17	access:public
frmNum	imp_audio.h	/^	int frmNum;							\/**< 缓存帧的数目, 取值范围:[2, MAX_AUDIO_FRAME_NUM] *\/$/;"	m	struct:__anon139	access:public
frmNum	imp_dmic.h	/^	int frmNum;					\/**<DMIC录音缓存帧的数目*\/$/;"	m	struct:__anon155	access:public
frmRateDen	imp_decoder.h	/^	uint32_t			frmRateDen;		\/**< 在一帧内的时间单元的数量, 以时间单元为单位。即帧率的分母 *\/$/;"	m	struct:__anon161	access:public
frmRateDen	imp_encoder.h	/^	uint32_t    frmRateDen;             \/**< 在一帧内的时间单元的数量, 以时间单元为单位。即帧率的分母 *\/$/;"	m	struct:__anon127	access:public
frmRateNum	imp_decoder.h	/^	uint32_t			frmRateNum;		\/**< 在一秒钟内的时间单元的数量, 以时间单元为单位。即帧率的分子 *\/$/;"	m	struct:__anon161	access:public
frmRateNum	imp_encoder.h	/^	uint32_t    frmRateNum;             \/**< 在一秒钟内的时间单元的数量, 以时间单元为单位。即帧率的分子 *\/$/;"	m	struct:__anon127	access:public
gAlphaEn	imp_osd.h	/^	int					gAlphaEn;		\/**< Alpha开关 *\/$/;"	m	struct:__anon103	access:public
g_value	imp_isp.h	/^		unsigned char g_value;	\/**< G 值 *\/$/;"	m	struct:color_value::__anon56	access:public
gainH	imp_isp.h	/^	IMPISPAWBGain gainH;            \/**< 白平衡高色温通道增益偏移 *\/$/;"	m	struct:__anon51	access:public
gainL	imp_isp.h	/^	IMPISPAWBGain gainL;            \/**< 白平衡低色温通道增益偏移 *\/$/;"	m	struct:__anon51	access:public
gainM	imp_isp.h	/^	IMPISPAWBGain gainM;            \/**< 白平衡中色温通道增益偏移 *\/$/;"	m	struct:__anon51	access:public
gain_val	imp_isp.h	/^	IMPISPAWBGain gain_val;			\/**< 白平衡通道增益，手动模式时有效 *\/$/;"	m	struct:isp_core_wb_attr	access:public
gamma	imp_isp.h	/^	uint16_t gamma[129];		\/**< gamma参数数组，有129个点 *\/$/;"	m	struct:__anon31	access:public
getFrmInfo	imp_audio.h	/^	int (*getFrmInfo)(void *decoder, void *info);$/;"	m	struct:__anon147	access:public
getParam	imp_ivs.h	/^	int	 (*getParam)(IMPIVSInterface *inf, void *param);			\/**< 获得算法参数 *\/$/;"	m	struct:IMPIVSInterface	access:public
getResult	imp_ivs.h	/^	int  (*getResult)(IMPIVSInterface *inf, void **result);			\/**< 获取结果资源 *\/$/;"	m	struct:IMPIVSInterface	access:public
gopAttr	imp_encoder.h	/^	IMPEncoderGopAttr       gopAttr;    \/**< 编码器属性结构体 *\/$/;"	m	struct:__anon129	access:public
groupID	imp_common.h	/^	int			groupID;		\/**< 组ID *\/$/;"	m	struct:__anon166	access:public
h	imp_encoder.h	/^	uint32_t    h;          \/**< 裁剪的区域,高 *\/$/;"	m	struct:__anon115	access:public
h264NalType	imp_encoder.h	/^	IMPEncoderH264NaluType    h264NalType;      \/**< H264E NALU 码流包类型 *\/$/;"	m	union:__anon106	access:public
h265NalType	imp_encoder.h	/^	IMPEncoderH265NaluType    h265NalType;      \/**< H265E NALU 码流包类型 *\/$/;"	m	union:__anon106	access:public
handle	imp_isp.h	/^	void (*handle)(void *priv_data, const IMPISPAeInfo *AeInfo, IMPISPAeAttr *AeAttr);  \/**< 自定义AE库的处理接口 *\/$/;"	m	struct:__anon72	access:public
handle	imp_isp.h	/^	void (*handle)(void *priv_data, const IMPISPAwbInfo *AwbInfo, IMPISPAwbAttr *AwbAttr);  \/**< 自定义AWB库的处理接口 *\/$/;"	m	struct:__anon77	access:public
height	imp_common.h	/^	uint32_t height;		\/**< 帧高 *\/$/;"	m	struct:__anon167	access:public
height	imp_framesource.h	/^	int height;		\/**< 图片裁剪高度 *\/$/;"	m	struct:__anon174	access:public
height	imp_isp.h	/^	uint16_t height;           \/**< 画四角窗高度 *\/$/;"	m	struct:__anon63	access:public
height	imp_isp.h	/^	uint16_t height;           \/**< 画窗高度 *\/$/;"	m	struct:__anon62	access:public
height	imp_isp.h	/^	uint32_t height;    \/**< sensor输出的高度 *\/$/;"	m	struct:__anon12	access:public
histThresh	imp_isp.h	/^	unsigned char histThresh[4];    \/**< AE直方图的分段 *\/$/;"	m	struct:__anon34	access:public
hist_domain	imp_isp.h	/^	IMPISPHistDomain hist_domain;   \/**< AE统计色域(预留) *\/$/;"	m	struct:__anon34	access:public
hts	imp_isp.h	/^	uint32_t hts;       \/**< sensor hts *\/$/;"	m	struct:__anon12	access:public
i2c	imp_isp.h	/^		IMPI2CInfo i2c;			\/**< I2C总线信息 *\/$/;"	m	union:__anon9::__anon10	access:public
i2c_adapter_id	imp_isp.h	/^	int32_t i2c_adapter_id;	\/**< I2C控制器 *\/$/;"	m	struct:__anon5	access:public
i2d_enable	imp_framesource.h	/^    int i2d_enable;             \/**< 图片旋转使能 *\/$/;"	m	struct:i2dattr	access:public
i2dattr	imp_framesource.h	/^    IMPFSI2DAttr i2dattr;       \/**< i2d属性*\/$/;"	m	struct:__anon179	access:public
i2dattr	imp_framesource.h	/^typedef struct i2dattr{$/;"	s
i2dattr::flip_enable	imp_framesource.h	/^    int flip_enable;            \/**< 图片翻转使能 *\/$/;"	m	struct:i2dattr	access:public
i2dattr::i2d_enable	imp_framesource.h	/^    int i2d_enable;             \/**< 图片旋转使能 *\/$/;"	m	struct:i2dattr	access:public
i2dattr::mirr_enable	imp_framesource.h	/^    int mirr_enable;            \/**< 图片镜像使能 *\/$/;"	m	struct:i2dattr	access:public
i2dattr::rotate_angle	imp_framesource.h	/^    int rotate_angle;           \/**< 图片旋转角度 *\/$/;"	m	struct:i2dattr	access:public
i2dattr::rotate_enable	imp_framesource.h	/^    int rotate_enable;          \/**< 图片旋转使能 *\/$/;"	m	struct:i2dattr	access:public
iIPDelta	imp_encoder.h	/^	int16_t               iIPDelta;$/;"	m	struct:__anon122	access:public
iIPDelta	imp_encoder.h	/^	int16_t               iIPDelta;$/;"	m	struct:__anon123	access:public
iIPDelta	imp_encoder.h	/^	int16_t               iIPDelta;$/;"	m	struct:__anon124	access:public
iInitialQP	imp_encoder.h	/^	int16_t               iInitialQP;$/;"	m	struct:__anon121	access:public
iInitialQP	imp_encoder.h	/^	int16_t               iInitialQP;$/;"	m	struct:__anon122	access:public
iInitialQP	imp_encoder.h	/^	int16_t               iInitialQP;$/;"	m	struct:__anon123	access:public
iInitialQP	imp_encoder.h	/^	int16_t               iInitialQP;$/;"	m	struct:__anon124	access:public
iMaxQP	imp_encoder.h	/^	int16_t               iMaxQP;$/;"	m	struct:__anon121	access:public
iMaxQP	imp_encoder.h	/^	int16_t               iMaxQP;$/;"	m	struct:__anon122	access:public
iMaxQP	imp_encoder.h	/^	int16_t               iMaxQP;$/;"	m	struct:__anon123	access:public
iMaxQP	imp_encoder.h	/^	int16_t               iMaxQP;$/;"	m	struct:__anon124	access:public
iMinQP	imp_encoder.h	/^	int16_t               iMinQP;$/;"	m	struct:__anon121	access:public
iMinQP	imp_encoder.h	/^	int16_t               iMinQP;$/;"	m	struct:__anon122	access:public
iMinQP	imp_encoder.h	/^	int16_t               iMinQP;$/;"	m	struct:__anon123	access:public
iMinQP	imp_encoder.h	/^	int16_t               iMinQP;$/;"	m	struct:__anon124	access:public
iPBDelta	imp_encoder.h	/^	int16_t               iPBDelta;$/;"	m	struct:__anon122	access:public
iPBDelta	imp_encoder.h	/^	int16_t               iPBDelta;$/;"	m	struct:__anon123	access:public
iPBDelta	imp_encoder.h	/^	int16_t               iPBDelta;$/;"	m	struct:__anon124	access:public
i_payload	imp_decoder.h	/^	int					i_payload;		\/**< 解码帧的数据长度 *\/$/;"	m	struct:__anon163	access:public
imp_log_fun	imp_log.h	/^void imp_log_fun(int le, int op, int out, const char* tag, const char* file, int line, const char* func, const char* fmt, ...);$/;"	p	signature:(int le, int op, int out, const char* tag, const char* file, int line, const char* func, const char* fmt, ...)
index	imp_common.h	/^	int index;			\/**< 帧序号 *\/$/;"	m	struct:__anon167	access:public
init	imp_ivs.h	/^	int  (*init)(IMPIVSInterface *inf);								\/**< 初始化函数 *\/$/;"	m	struct:IMPIVSInterface	access:public
invertColorSwitch	imp_osd.h	/^	unsigned int			invertColorSwitch;		\/**< 时间戳反色使能开关 *\/$/;"	m	struct:__anon99	access:public
irqtype	imp_isp.h	/^	IMPISPIrqType irqtype;          \/**< Frame中断类型(该参数设置无效，只能获取)*\/$/;"	m	struct:__anon15	access:public
isp_core_wb_attr	imp_isp.h	/^typedef struct isp_core_wb_attr{$/;"	s
isp_core_wb_attr::awb_frz	imp_isp.h	/^	IMPISPTuningOpsMode awb_frz;            \/**< 白平衡frzzen 使能*\/$/;"	m	struct:isp_core_wb_attr	access:public
isp_core_wb_attr::awb_start	imp_isp.h	/^	IMPISPAWBGain awb_start;                \/**< 白平衡收敛起始点 *\/$/;"	m	struct:isp_core_wb_attr	access:public
isp_core_wb_attr::awb_start_en	imp_isp.h	/^	IMPISPTuningOpsMode awb_start_en;       \/**< 白平衡收敛起始点使能 *\/$/;"	m	struct:isp_core_wb_attr	access:public
isp_core_wb_attr::ct	imp_isp.h	/^	unsigned int ct;                        \/**< 白平衡当前色温值 *\/$/;"	m	struct:isp_core_wb_attr	access:public
isp_core_wb_attr::custom	imp_isp.h	/^	IMPISPAWBCustomModeAttr custom;         \/**< 白平衡自定义模式属性 *\/$/;"	m	struct:isp_core_wb_attr	access:public
isp_core_wb_attr::gain_val	imp_isp.h	/^	IMPISPAWBGain gain_val;			\/**< 白平衡通道增益，手动模式时有效 *\/$/;"	m	struct:isp_core_wb_attr	access:public
isp_core_wb_attr::mode	imp_isp.h	/^	IMPISPAWBMode mode;                     \/**< 白平衡模式 *\/$/;"	m	struct:isp_core_wb_attr	access:public
isp_mask_block_par	imp_isp.h	/^typedef struct isp_mask_block_par {$/;"	s
isp_mask_block_par::chx	imp_isp.h	/^	uint8_t chx;              \/**< 通道号(范围: 0~2) *\/$/;"	m	struct:isp_mask_block_par	access:public
isp_mask_block_par::mask_en	imp_isp.h	/^	uint8_t mask_en;          \/**< 填充使能 *\/$/;"	m	struct:isp_mask_block_par	access:public
isp_mask_block_par::mask_height	imp_isp.h	/^	uint16_t mask_height;     \/**< 填充数据高度 *\/$/;"	m	struct:isp_mask_block_par	access:public
isp_mask_block_par::mask_pos_left	imp_isp.h	/^	uint16_t mask_pos_left;   \/**< 填充位置x坐标  *\/$/;"	m	struct:isp_mask_block_par	access:public
isp_mask_block_par::mask_pos_top	imp_isp.h	/^	uint16_t mask_pos_top;    \/**< 填充位置y坐标*\/$/;"	m	struct:isp_mask_block_par	access:public
isp_mask_block_par::mask_type	imp_isp.h	/^	IMPISP_MASK_TYPE mask_type;		\/**< 填充数据类型 *\/$/;"	m	struct:isp_mask_block_par	access:public
isp_mask_block_par::mask_value	imp_isp.h	/^	IMP_ISP_COLOR_VALUE mask_value;  \/**< 填充数据值 *\/$/;"	m	struct:isp_mask_block_par	access:public
isp_mask_block_par::mask_width	imp_isp.h	/^	uint16_t mask_width;      \/**< 填充数据宽度 *\/$/;"	m	struct:isp_mask_block_par	access:public
isp_mask_block_par::pinum	imp_isp.h	/^	uint8_t pinum;            \/**< 块号(范围: 0~3) *\/$/;"	m	struct:isp_mask_block_par	access:public
isp_mode	imp_isp.h	/^	IMPISPHVFLIP isp_mode[3];	\/**< ISP每个通道对应的flip模式 *\/$/;"	m	struct:__anon19	access:public
istimestamp	imp_osd.h	/^	unsigned int			istimestamp;			\/**< 图片数据是否为时间戳 *\/$/;"	m	struct:__anon99	access:public
key	imp_isp.h	/^	uint32_t key;                          \/**< 各个模块旁路开关 *\/$/;"	m	union:__anon21	access:public
layer	imp_osd.h	/^	int					layer;			\/**< 显示层 *\/$/;"	m	struct:__anon103	access:public
left	imp_framesource.h	/^	int left;		\/**< 裁剪左起始点 *\/$/;"	m	struct:__anon174	access:public
left	imp_isp.h	/^	uint16_t left;             \/**< 画四角窗功能横向起始点 *\/$/;"	m	struct:__anon63	access:public
left	imp_isp.h	/^	uint16_t left;             \/**< 画窗功能横向起始点 *\/$/;"	m	struct:__anon62	access:public
leftPics	imp_encoder.h	/^	uint32_t    leftPics;               \/**< 待编码的图像数 *\/$/;"	m	struct:__anon130	access:public
leftStreamBytes	imp_encoder.h	/^	uint32_t    leftStreamBytes;        \/**< 码流buffer剩余的byte数 *\/$/;"	m	struct:__anon130	access:public
leftStreamFrames	imp_encoder.h	/^	uint32_t    leftStreamFrames;       \/**< 码流buffer剩余的帧数 *\/$/;"	m	struct:__anon130	access:public
len	imp_audio.h	/^	int len;							\/**< 音频帧长度 *\/$/;"	m	struct:__anon140	access:public
len	imp_audio.h	/^	int len;						\/**< 音频码流长度 *\/$/;"	m	struct:__anon143	access:public
len	imp_dmic.h	/^	int len;$/;"	m	struct:__anon156	access:public
length	imp_encoder.h	/^	uint32_t                length;             \/**< 码流包长度 *\/$/;"	m	struct:__anon108	access:public
length	imp_osd.h	/^	unsigned int			length;					\/**< 字体长度*\/$/;"	m	struct:__anon99	access:public
level	imp_isp.h	/^        uint8_t level;		\/*缩放清晰度等级 范围0~128*\/$/;"	m	struct:__anon83	access:public
line	imp_isp.h	/^		IMPISPDrawLineAttr line;		\/**< 画线属性 *\/$/;"	m	union:__anon66::__anon67	access:public
line	imp_osd.h	/^	IMPLine				line;			\/**< 直线数据*\/$/;"	m	struct:__anon101	access:public
lineRectData	imp_osd.h	/^	lineRectData			lineRectData;		\/**< 线、矩形数据 *\/$/;"	m	union:__anon97	access:public
lineRectData	imp_osd.h	/^} lineRectData;$/;"	t	typeref:struct:__anon94
line_width	imp_isp.h	/^	uint8_t  line_width;	   \/**< 窗口边框宽度 *\/$/;"	m	struct:__anon62	access:public
line_width	imp_isp.h	/^	uint8_t  line_width;       \/**< 画四角窗边框宽度 *\/$/;"	m	struct:__anon63	access:public
linelength	imp_osd.h	/^	uint32_t		linelength;		\/**< 线长 *\/$/;"	m	struct:__anon94	access:public
linewidth	imp_osd.h	/^	uint32_t		linewidth;		\/**< 线宽 *\/$/;"	m	struct:__anon94	access:public
local	imp_isp.h	/^	IMPISP3AStatisLocation local;		\/**< AWB统计范围 *\/$/;"	m	struct:__anon36	access:public
local	imp_isp.h	/^	IMPISP3AStatisLocation local;       \/**< AF统计范围 *\/$/;"	m	struct:__anon37	access:public
local	imp_isp.h	/^	IMPISP3AStatisLocation local;   \/**< AE统计位置(预留) *\/$/;"	m	struct:__anon34	access:public
lsize	imp_isp.h	/^        uint8_t lsize;			\/**< 总数量(范围:0~31) *\/$/;"	m	struct:__anon80	access:public
luma	imp_isp.h	/^	uint32_t luma;			       				\/**< AE Luma值 *\/$/;"	m	struct:__anon70	access:public
luma	imp_isp.h	/^	uint32_t luma;                         \/**< AE Luma值 *\/$/;"	m	struct:__anon46	access:public
luma_scence	imp_isp.h	/^	uint32_t luma_scence;		       				\/**< AE 场景Luma值 *\/$/;"	m	struct:__anon70	access:public
luma_scence	imp_isp.h	/^	uint32_t luma_scence;                  \/**< AE 场景Luma值 *\/$/;"	m	struct:__anon46	access:public
luminance	imp_osd.h	/^	unsigned int			luminance;				\/**< 亮度参考 默认190*\/$/;"	m	struct:__anon99	access:public
mask_en	imp_isp.h	/^	uint8_t mask_en;          \/**< 填充使能 *\/$/;"	m	struct:isp_mask_block_par	access:public
mask_height	imp_isp.h	/^	uint16_t mask_height;     \/**< 填充数据高度 *\/$/;"	m	struct:isp_mask_block_par	access:public
mask_pos_left	imp_isp.h	/^	uint16_t mask_pos_left;   \/**< 填充位置x坐标  *\/$/;"	m	struct:isp_mask_block_par	access:public
mask_pos_top	imp_isp.h	/^	uint16_t mask_pos_top;    \/**< 填充位置y坐标*\/$/;"	m	struct:isp_mask_block_par	access:public
mask_type	imp_isp.h	/^	IMPISP_MASK_TYPE mask_type;		\/**< 填充数据类型 *\/$/;"	m	struct:isp_mask_block_par	access:public
mask_value	imp_isp.h	/^	IMP_ISP_COLOR_VALUE mask_value;  \/**< 填充数据值 *\/$/;"	m	struct:isp_mask_block_par	access:public
mask_width	imp_isp.h	/^	uint16_t mask_width;      \/**< 填充数据宽度 *\/$/;"	m	struct:isp_mask_block_par	access:public
maxFrmLen	imp_audio.h	/^	int maxFrmLen;					\/**< 最大码流长度 *\/$/;"	m	struct:__anon145	access:public
maxHeight	imp_decoder.h	/^	uint32_t			maxHeight;		\/**< 解码帧最大的高度 *\/$/;"	m	struct:__anon161	access:public
maxWidth	imp_decoder.h	/^	uint32_t			maxWidth;		\/**< 解码帧最大的宽度 *\/$/;"	m	struct:__anon161	access:public
maxdepth	imp_framesource.h	/^	int maxdepth;				\/**< FIFO 最大深度 *\/$/;"	m	struct:__anon178	access:public
mclk	imp_isp.h	/^	IMPSensorMclk mclk;			\/**< 摄像头Mclk时钟源 *\/$/;"	m	struct:__anon9	access:public
minus	imp_common.h	/^	uint64_t minus;						\/**< 下限 *\/$/;"	m	struct:__anon168	access:public
minus	imp_osd.h	/^	uint64_t minus;						\/**< 下限 *\/$/;"	m	struct:__anon102	access:public
mirr_enable	imp_framesource.h	/^	int mirr_enable;			\/**< 图片镜像属性 *\/$/;"	m	struct:__anon179	access:public
mirr_enable	imp_framesource.h	/^    int mirr_enable;            \/**< 图片镜像使能 *\/$/;"	m	struct:i2dattr	access:public
modalias	imp_isp.h	/^	char modalias[32];      \/**< SPI设备名字，必须与摄像头驱动中struct spi_device_id中name变量一致 *\/$/;"	m	struct:__anon6	access:public
mode	imp_audio.h	/^	IMPAudioDecMode mode;				\/**< 解码方式 *\/$/;"	m	struct:__anon146	access:public
mode	imp_isp.h	/^	IMPISPAWBMode mode;                     \/**< 白平衡模式 *\/$/;"	m	struct:isp_core_wb_attr	access:public
mode	imp_isp.h	/^	IMPISPAWBStatisMode mode;		\/**< AWB统计属性(预留) *\/$/;"	m	struct:__anon36	access:public
mode	imp_isp.h	/^	IMPISPAntiflickerMode mode;             \/**< ISP抗闪频功能模式选择 *\/$/;"	m	struct:__anon17	access:public
mode	imp_isp.h	/^        IMPISPScalerMode mode;	\/*缩放方法*\/$/;"	m	struct:__anon83	access:public
mosaicAttr	imp_osd.h	/^	IMPOSDMosaicAttr	mosaicAttr;		\/**< 马赛克数据 *\/$/;"	m	struct:__anon101	access:public
mosaicPointAttr	imp_osd.h	/^typedef struct mosaicPointAttr{$/;"	s
mosaicPointAttr::frame_height	imp_osd.h	/^	int frame_height;		\/* 通道分辨率高度 *\/$/;"	m	struct:mosaicPointAttr	access:public
mosaicPointAttr::frame_width	imp_osd.h	/^	int frame_width;		\/* 通道分辨率宽度 *\/$/;"	m	struct:mosaicPointAttr	access:public
mosaicPointAttr::mosaic_height	imp_osd.h	/^	int mosaic_height;		\/* 所需马赛克高度 (2对齐且加上y坐标不超过通道总高)*\/$/;"	m	struct:mosaicPointAttr	access:public
mosaicPointAttr::mosaic_min_size	imp_osd.h	/^	int mosaic_min_size;	\/* 最小马赛克单位 (2对齐)*\/$/;"	m	struct:mosaicPointAttr	access:public
mosaicPointAttr::mosaic_width	imp_osd.h	/^	int mosaic_width;		\/* 所需马赛克宽度 (2对齐且加上x坐标不超过通道总宽)*\/$/;"	m	struct:mosaicPointAttr	access:public
mosaicPointAttr::x	imp_osd.h	/^	int x;					\/* 马赛克起始x坐标 (2对齐)*\/$/;"	m	struct:mosaicPointAttr	access:public
mosaicPointAttr::y	imp_osd.h	/^	int y;					\/* 马赛克起始y坐标 (2对齐)*\/$/;"	m	struct:mosaicPointAttr	access:public
mosaic_height	imp_osd.h	/^	int mosaic_height;		\/* 所需马赛克高度 (2对齐且加上y坐标不超过通道总高)*\/$/;"	m	struct:mosaicPointAttr	access:public
mosaic_min_size	imp_osd.h	/^	int mosaic_min_size;	\/* 最小马赛克单位 (2对齐)*\/$/;"	m	struct:mosaicPointAttr	access:public
mosaic_width	imp_osd.h	/^	int mosaic_width;		\/* 所需马赛克宽度 (2对齐且加上x坐标不超过通道总宽)*\/$/;"	m	struct:mosaicPointAttr	access:public
nalType	imp_encoder.h	/^	IMPEncoderNalType       nalType;            \/**< H.264和H.265编码Channel码流NAL类型 *\/$/;"	m	struct:__anon108	access:public
name	imp_audio.h	/^	char name[16];					\/**< 编码器名称 *\/$/;"	m	struct:__anon145	access:public
name	imp_audio.h	/^	char name[16];					\/**< 音频解码器名字 *\/$/;"	m	struct:__anon147	access:public
name	imp_isp.h	/^	char name[32];				\/**< 摄像头名字 *\/$/;"	m	struct:__anon9	access:public
node_h	imp_isp.h	/^	unsigned char node_h;   \/**< 横向统计区域块数 [12 ~ 15]*\/$/;"	m	struct:__anon33	access:public
node_v	imp_isp.h	/^	unsigned char node_v;   \/**< 纵向统计区域块数 [12 ~ 15]*\/$/;"	m	struct:__anon33	access:public
notify	imp_isp.h	/^	int (*notify)(void *priv_data, IMPISPAeNotify notify, void *data);                  \/**< 自定义AE库的通知接口 *\/$/;"	m	struct:__anon72	access:public
notify	imp_isp.h	/^	int (*notify)(void *priv_data, IMPISPAwbNotify notify, void *data);                     \/**< 自定义AWB库的通知接口 *\/$/;"	m	struct:__anon77	access:public
nrKeepStream	imp_decoder.h	/^	uint32_t			nrKeepStream;	\/**< 解码器缓存帧个数 *\/$/;"	m	struct:__anon161	access:public
nrVBs	imp_framesource.h	/^	int nrVBs;					\/**< Video buffer数量 *\/$/;"	m	struct:__anon179	access:public
num	imp_isp.h	/^        uint32_t num;  \/**< 帧率的分子参数 *\/$/;"	m	struct:__anon13	access:public
numPerFrm	imp_audio.h	/^	int numPerFrm;						\/**< 每帧的采样点个数 *\/$/;"	m	struct:__anon139	access:public
numPerFrm	imp_dmic.h	/^	int numPerFrm;$/;"	m	struct:__anon155	access:public
nv12dump_continues	imp_common.h	/^void nv12dump_continues(IMPFrameInfo *frame,char *pst);$/;"	p	signature:(IMPFrameInfo *frame,char *pst)
offPos	imp_osd.h	/^	IMPPoint			offPos;			\/**< 显示起始坐标 *\/$/;"	m	struct:__anon103	access:public
offset	imp_encoder.h	/^	uint32_t                offset;             \/**< 码流包地址偏移 *\/$/;"	m	struct:__anon108	access:public
offsetof	imp_utils.h	23;"	d
offsetof	imp_utils.h	25;"	d
offsetof	imp_utils.h	27;"	d
open	imp_isp.h	/^	int (*open)(void *priv_data, IMPISPAeInitAttr *AeInitAttr);                         \/**< 自定义AE库开始接口 *\/$/;"	m	struct:__anon72	access:public
open	imp_isp.h	/^	int (*open)(void *priv_data, IMPISPAwbInitAttr *AwbInitAttr);                           \/**< 自定义AWB库开始接口 *\/$/;"	m	struct:__anon77	access:public
openDecoder	imp_audio.h	/^	int (*openDecoder)(void *decoderAttr, void$/;"	m	struct:__anon147	access:public
openEncoder	imp_audio.h	/^	int (*openEncoder)(void *encoderAttr, void$/;"	m	struct:__anon145	access:public
osd_argb_type	imp_isp.h	/^	IMPISPARGBType osd_argb_type;                  \/**< 填充格式  *\/$/;"	m	struct:__anon61	access:public
osd_enable	imp_isp.h	/^	uint8_t  osd_enable;    \/**< 填充功能使能 *\/$/;"	m	struct:__anon60	access:public
osd_height	imp_isp.h	/^	uint16_t osd_height;    \/**< 填充高度 *\/$/;"	m	struct:__anon60	access:public
osd_image	imp_isp.h	/^	char *osd_image;	\/**< 填充图片首地址 *\/$/;"	m	struct:__anon60	access:public
osd_left	imp_isp.h	/^	uint16_t osd_left;      \/**< 填充横向起始点 *\/$/;"	m	struct:__anon60	access:public
osd_pixel_alpha_disable	imp_isp.h	/^	IMPISPTuningOpsMode osd_pixel_alpha_disable;   \/**< 填充像素Alpha禁用功能使能  *\/$/;"	m	struct:__anon61	access:public
osd_stride	imp_isp.h	/^	uint16_t osd_stride;    \/**< 填充图片的对其宽度, 以字节为单位，例如320x240的RGBA8888图片osd_stride=320*4 *\/$/;"	m	struct:__anon60	access:public
osd_top	imp_isp.h	/^	uint16_t osd_top;       \/**< 填充纵向起始点 *\/$/;"	m	struct:__anon60	access:public
osd_type	imp_isp.h	/^	IMPISPPICTYPE osd_type;                        \/**< 填充图片类型  *\/$/;"	m	struct:__anon61	access:public
osd_width	imp_isp.h	/^	uint16_t osd_width;     \/**< 填充宽度 *\/$/;"	m	struct:__anon60	access:public
osdispdraw	imp_osd.h	/^	IMPOSDIspDraw       osdispdraw;     \/**< ISP绘制OSD的相关属性*\/$/;"	m	struct:__anon101	access:public
outFrmRate	imp_encoder.h	/^	IMPEncoderFrmRate       outFrmRate;$/;"	m	struct:__anon128	access:public
outFrmRateDen	imp_framesource.h	/^	int outFrmRateDen;			\/**< 通道的输出帧率分母 *\/$/;"	m	struct:__anon179	access:public
outFrmRateNum	imp_framesource.h	/^	int outFrmRateNum;			\/**< 通道的输出帧率分子 *\/$/;"	m	struct:__anon179	access:public
outheight	imp_framesource.h	/^	int outheight;	\/**< 缩放后图片高度 *\/$/;"	m	struct:__anon175	access:public
outputID	imp_common.h	/^	int			outputID;		\/**< 输出ID *\/$/;"	m	struct:__anon166	access:public
outwidth	imp_framesource.h	/^	int outwidth;	\/**< 缩放后图片宽度 *\/$/;"	m	struct:__anon175	access:public
p0	imp_common.h	/^	IMPPoint		p0;		\/**<左上角点坐标信息  *\/$/;"	m	struct:__anon172	access:public
p0	imp_common.h	/^	IMPPoint		p0;		\/**<横线：直线的左端点 竖线：直线的右端点 *\/$/;"	m	struct:__anon173	access:public
p1	imp_common.h	/^	IMPPoint		p1;		\/**<右下角点坐标信息  *\/$/;"	m	struct:__anon172	access:public
pData	imp_osd.h	/^	void				*pData;			\/**< 图片数据指针 *\/$/;"	m	struct:__anon96	access:public
p_payload	imp_decoder.h	/^	uint8_t				*p_payload;		\/**< 解码帧的数据指针 *\/$/;"	m	struct:__anon163	access:public
pack	imp_encoder.h	/^	IMPEncoderPack          *pack;              \/**< 帧码流包结构 *\/$/;"	m	struct:__anon109	access:public
packCount	imp_encoder.h	/^	uint32_t                packCount;          \/**< 一帧码流的所有包的个数 *\/$/;"	m	struct:__anon109	access:public
param	imp_ivs.h	/^	void  *param;													\/**< 输入参数 *\/$/;"	m	struct:IMPIVSInterface	access:public
paramSize	imp_ivs.h	/^	int   paramSize;												\/**< 参数空间大小 *\/$/;"	m	struct:IMPIVSInterface	access:public
phyAddr	imp_audio.h	/^	uint32_t phyAddr;					\/**< 音频帧数据物理地址 *\/$/;"	m	struct:__anon140	access:public
phyAddr	imp_audio.h	/^	uint32_t phyAddr;				\/**< 数据流物理地址 *\/$/;"	m	struct:__anon143	access:public
phyAddr	imp_common.h	/^	uint32_t phyAddr;		\/**< 帧的物理地址 *\/$/;"	m	struct:__anon167	access:public
phyAddr	imp_dmic.h	/^	uint32_t phyAddr;$/;"	m	struct:__anon156	access:public
phyAddr	imp_encoder.h	/^	uint32_t                phyAddr;            \/**< 帧码流物理地址 *\/$/;"	m	struct:__anon109	access:public
pic	imp_isp.h	/^	IMPISPOSDBlockAttr pic;                       \/**< 填充图片属性，每个通道最多可以填充8张图片 *\/$/;"	m	struct:__anon86	access:public
picData	imp_osd.h	/^	picData				picData;		\/**< 图片数据 *\/$/;"	m	union:__anon97	access:public
picData	imp_osd.h	/^} picData;$/;"	t	typeref:struct:__anon96
picHeight	imp_framesource.h	/^	int picHeight;				\/**< 图片高度 *\/$/;"	m	struct:__anon179	access:public
picWidth	imp_framesource.h	/^	int picWidth;				\/**< 图片宽度 *\/$/;"	m	struct:__anon179	access:public
pinum	imp_isp.h	/^	uint8_t pinum;                      \/**< 块号(范围: 0~19) *\/$/;"	m	struct:__anon66	access:public
pinum	imp_isp.h	/^	uint8_t pinum;            \/**< 块号(范围: 0~3) *\/$/;"	m	struct:isp_mask_block_par	access:public
pinum	imp_isp.h	/^    uint8_t  pinum;			\/**< 块号(范围: 0~7) *\/$/;"	m	struct:__anon60	access:public
pixFmt	imp_framesource.h	/^	IMPPixelFormat pixFmt;		\/**< 图片格式 *\/$/;"	m	struct:__anon179	access:public
pixelFormat	imp_decoder.h	/^	IMPPixelFormat		pixelFormat;	\/**< 解码帧目标数据协议类型 *\/$/;"	m	struct:__anon161	access:public
pixfmt	imp_common.h	/^	uint32_t pixfmt;		\/**< 帧的图像格式 *\/$/;"	m	struct:__anon167	access:public
pixfmt	imp_ivs.h	/^	IMPPixelFormat pixfmt;											\/**< 算法需要数据格式 *\/$/;"	m	struct:IMPIVSInterface	access:public
plus	imp_common.h	/^	uint64_t plus;						\/**< 上限 *\/$/;"	m	struct:__anon168	access:public
plus	imp_osd.h	/^	uint64_t plus;						\/**< 上限 *\/$/;"	m	struct:__anon102	access:public
pool	imp_common.h	/^	void *pool;$/;"	m	struct:__anon167	access:public
pool_idx	imp_common.h	/^	int pool_idx;			\/**< 帧所在的Pool的ID *\/$/;"	m	struct:__anon167	access:public
power_gpio	imp_isp.h	/^	int power_gpio;		                \/**< 摄像头power 接口链接的GPIO，注意：现在没有启用该参数 *\/$/;"	m	struct:__anon9	access:public
preProcessSync	imp_ivs.h	/^	int  (*preProcessSync)(IMPIVSInterface *inf, IMPFrameInfo *frame);\/**< 预处理函数，不对传入此函数的frame额外加锁，故无需free frame，返回值：>=0 正确，<0：错误 *\/$/;"	m	struct:IMPIVSInterface	access:public
priv	imp_common.h	/^	uint32_t priv[0];		\/* 私有数据 *\/$/;"	m	struct:__anon167	access:public
priv	imp_ivs.h	/^	void *priv;														\/**< 私有变量 *\/$/;"	m	struct:IMPIVSInterface	access:public
priv_data	imp_isp.h	/^	void *priv_data;																		\/**< 私有数据地址 *\/$/;"	m	struct:__anon77	access:public
priv_data	imp_isp.h	/^	void *priv_data;																	\/**< 私有数据地址 *\/$/;"	m	struct:__anon72	access:public
processAsync	imp_ivs.h	/^	int  (*processAsync)(IMPIVSInterface *inf, IMPFrameInfo *frame);\/**< 处理函数, SDK IVS 模块对传入此函数的frame 额外加了锁，故此函数必须在该frame使用完毕后尽快使用free_data函数解锁; 此函数是必须实现的函数,算法结果由此函数产生;返回值:0->实际检测正常返回,1->跳帧检测正常返回,-1->错误 *\/$/;"	m	struct:IMPIVSInterface	access:public
pwdn_gpio	imp_isp.h	/^	int pwdn_gpio;		                \/**< 摄像头power down接口链接的GPIO *\/$/;"	m	struct:__anon9	access:public
qmem_table	imp_encoder.h	/^	uint8_t     qmem_table[128];        \/**< 用户自定义量化表*\/$/;"	m	struct:__anon131	access:public
r_gain	imp_isp.h	/^	uint32_t r_gain;						\/**< AWB参数 r_gain *\/$/;"	m	struct:__anon75	access:public
r_gain_statis	imp_isp.h	/^	uint32_t r_gain_statis;								\/**< 白平衡全局统计值r_gain *\/$/;"	m	struct:__anon74	access:public
r_gain_wei_statis	imp_isp.h	/^	uint32_t r_gain_wei_statis;							\/**< 白平衡全局加权统计值r_gain *\/$/;"	m	struct:__anon74	access:public
r_value	imp_isp.h	/^		unsigned char r_value;	\/**< R 值 *\/$/;"	m	struct:color_value::__anon56	access:public
rang	imp_isp.h	/^		IMPISPDrawRangAttr rang;		\/**< 画四角窗属性 *\/$/;"	m	union:__anon66::__anon67	access:public
ratio	imp_isp.h	/^	uint8_t ratio;              \/**< 模块强度配置功能强度，128为默认强度，大于128增加强度，小于128降低强度 *\/$/;"	m	struct:__anon24	access:public
ratio_attr	imp_isp.h	/^	IMPISPRatioUnit ratio_attr[16];  \/**< 各个模块强度配置功能属性 *\/$/;"	m	struct:__anon25	access:public
rawFrame	imp_dmic.h	/^	IMPDmicFrame rawFrame;  \/\/原始数据;$/;"	m	struct:__anon157	access:public
rcAttr	imp_encoder.h	/^	IMPEncoderRcAttr        rcAttr;     \/**< 码率控制器属性结构体,只针对H264和h265 *\/$/;"	m	struct:__anon129	access:public
rcMode	imp_encoder.h	/^	IMPEncoderRcMode                   rcMode;$/;"	m	struct:__anon125	access:public
rect	imp_osd.h	/^	IMPRect				rect;			\/**< 矩形数据 *\/$/;"	m	struct:__anon101	access:public
rectlinelength	imp_osd.h	/^	uint32_t		rectlinelength; \/**< 半边框的线长*\/$/;"	m	struct:__anon94	access:public
referenceNum	imp_ivs_base_move.h	/^	int             referenceNum;                      \/*<指定相对于当前帧的第-referenceNum帧为参考帧*\/$/;"	m	struct:__anon150	access:public
registered	imp_encoder.h	/^	bool        registered;             \/**< 注册到Group标志，取值范围:{TRUE, FALSE}，TRUE:注册，FALSE:未注册 *\/$/;"	m	struct:__anon130	access:public
releaseResult	imp_ivs.h	/^	int  (*releaseResult)(IMPIVSInterface *inf, void *result);		\/**< 释放结果资源 *\/$/;"	m	struct:IMPIVSInterface	access:public
ret	imp_ivs_base_move.h	/^	int ret;$/;"	m	struct:__anon151	access:public
retRoi	imp_ivs_move.h	/^	int retRoi[IMP_IVS_MOVE_MAX_ROI_CNT];				\/*< 区域检测移动结果，与roiRect坐标信息严格对应,0:表示未检测到运动，1：表示检测到运动 *\/$/;"	m	struct:__anon90	access:public
rgain	imp_isp.h	/^	uint32_t rgain;     \/**< 白平衡R通道增益 *\/$/;"	m	struct:__anon48	access:public
roiRect	imp_ivs_move.h	/^	IMPRect         roiRect[IMP_IVS_MOVE_MAX_ROI_CNT]; \/*< 需要检测的roi区域坐标信息 *\/$/;"	m	struct:__anon89	access:public
roiRectCnt	imp_ivs_move.h	/^	int             roiRectCnt;                        \/*< 需要检测的roi区域数量，范围为0-51，若为0：则不检测，1：检测roiRect 0$/;"	m	struct:__anon89	access:public
roi_enable	imp_isp.h	/^	IMPISPTuningOpsMode roi_enable;    \/**< 感兴趣区域权重设置使能(预留) *\/$/;"	m	struct:__anon40	access:public
rotate_angle	imp_framesource.h	/^    int rotate_angle;           \/**< 图片旋转角度 *\/$/;"	m	struct:i2dattr	access:public
rotate_enable	imp_framesource.h	/^    int rotate_enable;          \/**< 图片旋转使能 *\/$/;"	m	struct:i2dattr	access:public
rst_gpio	imp_isp.h	/^	int rst_gpio;		                \/**< 摄像头reset接口链接的GPIO *\/$/;"	m	struct:__anon9	access:public
sadMode	imp_ivs_base_move.h	/^	int             sadMode;                           \/*< SAD模式,0表示8*8*\/$/;"	m	struct:__anon150	access:public
sample_gettimeus	imp_common.h	/^int64_t sample_gettimeus(void);$/;"	p	signature:(void)
samplerate	imp_audio.h	/^	IMPAudioSampleRate samplerate;		\/**< 音频采样率 *\/$/;"	m	struct:__anon139	access:public
samplerate	imp_dmic.h	/^	IMPDmicSampleRate samplerate; \/**< DMIC采样率 *\/$/;"	m	struct:__anon155	access:public
scaler	imp_framesource.h	/^	IMPFSChnScaler scaler;		\/**< 图片缩放属性 *\/$/;"	m	struct:__anon179	access:public
scalex	imp_osd.h	/^	float				scalex;			\/**< 缩放x参数 *\/$/;"	m	struct:__anon103	access:public
scaley	imp_osd.h	/^	float				scaley;			\/**< 缩放y参数 *\/$/;"	m	struct:__anon103	access:public
sense	imp_ivs_base_move.h	/^	int             sense;                             \/*<灵敏度,0-3,值越大灵敏度越大*\/$/;"	m	struct:__anon150	access:public
sense	imp_ivs_move.h	/^	int             sense[IMP_IVS_MOVE_MAX_ROI_CNT];   \/**< 移动侦测的灵敏度, 对正常摄像机范围是0-4，对全景摄像机范围是0-8 *\/$/;"	m	struct:__anon89	access:public
sensor_attr	imp_isp.h	/^	IMPISPSENSORAttr sensor_attr;						\/**< Sensor基本属性*\/$/;"	m	struct:__anon69	access:public
sensor_id	imp_isp.h	/^	unsigned short sensor_id;               \/**< 摄像头ID号 *\/$/;"	m	struct:__anon9	access:public
sensor_mode	imp_isp.h	/^	IMPISPHVFLIP sensor_mode;   \/**< sensor对应的flip模式 *\/$/;"	m	struct:__anon19	access:public
seq	imp_audio.h	/^	int seq;							\/**< 音频帧序号 *\/$/;"	m	struct:__anon140	access:public
seq	imp_audio.h	/^	int seq;						\/**< 音频码流序号 *\/$/;"	m	struct:__anon143	access:public
seq	imp_dmic.h	/^	int seq;$/;"	m	struct:__anon156	access:public
seq	imp_encoder.h	/^	uint32_t                seq;                \/**< 编码帧码流序列号 *\/$/;"	m	struct:__anon109	access:public
setParam	imp_ivs.h	/^	int	 (*setParam)(IMPIVSInterface *inf, void *param);			\/**< 设置算法参数 *\/$/;"	m	struct:IMPIVSInterface	access:public
show	imp_osd.h	/^	int					show;			\/**< 是否显示 *\/$/;"	m	struct:__anon103	access:public
size	imp_common.h	/^	uint32_t size;			\/**< 帧所占用空间大小 *\/$/;"	m	struct:__anon167	access:public
skipFrameCnt	imp_ivs_base_move.h	/^	int             skipFrameCnt;                       \/*< 隔帧检测的个数 *\/$/;"	m	struct:__anon150	access:public
skipFrameCnt	imp_ivs_move.h	/^	int             skipFrameCnt;                      \/*< 隔帧检测的个数 *\/$/;"	m	struct:__anon89	access:public
sliceType	imp_encoder.h	/^	IMPEncoderSliceType     sliceType;$/;"	m	struct:__anon108	access:public
soundmode	imp_audio.h	/^	IMPAudioSoundMode soundmode;		\/**< 音频声道模式 *\/$/;"	m	struct:__anon139	access:public
soundmode	imp_audio.h	/^	IMPAudioSoundMode soundmode;		\/**< 音频声道模式 *\/$/;"	m	struct:__anon140	access:public
soundmode	imp_dmic.h	/^	IMPDmicSoundMode soundmode;   \/*声音模式*\/$/;"	m	struct:__anon155	access:public
soundmode	imp_dmic.h	/^	IMPDmicSoundMode soundmode;$/;"	m	struct:__anon156	access:public
spi	imp_isp.h	/^		IMPSPIInfo spi;			\/**< SPI总线信息 *\/$/;"	m	union:__anon9::__anon10	access:public
stCoverAttr	imp_osd.h	/^	IMPISPMaskBlockAttr stCoverAttr;     \/*ISP绘制矩形遮挡*\/$/;"	m	struct:__anon100	access:public
stDrawAttr	imp_osd.h	/^	IMPISPDrawBlockAttr stDrawAttr;      \/*ISP绘制线、框属性*\/$/;"	m	struct:__anon100	access:public
stRgnCreateStat	imp_osd.h	/^typedef struct stRgnCreateStat{$/;"	s
stRgnCreateStat::status	imp_osd.h	/^    int status;                         \/**< osd区域创建的状态：0、未创建，1、区域已创建 *\/$/;"	m	struct:stRgnCreateStat	access:public
stRgnRigsterStat	imp_osd.h	/^typedef struct stRgnRigsterStat{$/;"	s
stRgnRigsterStat::status	imp_osd.h	/^	int status;                         \/**< osd组区域注册的状态：0、未注册，1、区域已注册 *\/$/;"	m	struct:stRgnRigsterStat	access:public
start_h	imp_isp.h	/^	unsigned int start_h;   \/**< 横向起始点，单位为pixel AF统计值横向起始点：[1 ~ width]，且取奇数 *\/$/;"	m	struct:__anon33	access:public
start_v	imp_isp.h	/^	unsigned int start_v;   \/**< 纵向起始点，单位为pixel AF统计值垂直起始点 ：[3 ~ height]，且取奇数 *\/$/;"	m	struct:__anon33	access:public
startx	imp_isp.h	/^	uint16_t startx;               \/**< 画线横向起始点 *\/$/;"	m	struct:__anon64	access:public
starty	imp_isp.h	/^	uint16_t starty;               \/**< 画线纵向起始点 *\/$/;"	m	struct:__anon64	access:public
statis	imp_isp.h	/^	uint32_t statis[15][15];    \/**< 各区域统计信息*\/$/;"	m	struct:__anon41	access:public
statis_gol_gain	imp_isp.h	/^	IMPISPAWBGain statis_gol_gain;		\/**< 白平衡全局统计值 *\/$/;"	m	struct:__anon49	access:public
statis_weight_gain	imp_isp.h	/^	IMPISPAWBGain statis_weight_gain;	\/**< 白平衡全局加权统计值 *\/$/;"	m	struct:__anon49	access:public
status	imp_osd.h	/^	int status;                         \/**< osd组区域注册的状态：0、未注册，1、区域已注册 *\/$/;"	m	struct:stRgnRigsterStat	access:public
status	imp_osd.h	/^    int status;                         \/**< osd区域创建的状态：0、未创建，1、区域已创建 *\/$/;"	m	struct:stRgnCreateStat	access:public
stpicAttr	imp_osd.h	/^	IMPISPOSDBlockAttr  stpicAttr;       \/*ISP绘制图片属性*\/$/;"	m	struct:__anon100	access:public
stream	imp_audio.h	/^	uint8_t *stream;				\/**< 数据流指针 *\/$/;"	m	struct:__anon143	access:public
streamSize	imp_encoder.h	/^	uint32_t                streamSize;         \/**< virAddr对应分配的地址空间大小 *\/$/;"	m	struct:__anon109	access:public
stsinglepicAttr	imp_isp.h	/^	IMPISPOSDSingleAttr stsinglepicAttr;\/*pic 类型的ISPOSD*\/$/;"	m	union:__anon87::__anon88	access:public
timeStamp	imp_audio.h	/^	int64_t timeStamp;					\/**< 音频帧数据时间戳 *\/$/;"	m	struct:__anon140	access:public
timeStamp	imp_audio.h	/^	int64_t timeStamp;				\/**< 时间戳 *\/$/;"	m	struct:__anon143	access:public
timeStamp	imp_common.h	/^	int64_t timeStamp;		\/**< 帧的时间戳 *\/$/;"	m	struct:__anon167	access:public
timeStamp	imp_decoder.h	/^	int64_t				timeStamp;		\/**< 解码帧的时间戳 *\/$/;"	m	struct:__anon163	access:public
timeStamp	imp_dmic.h	/^	int64_t timeStamp;$/;"	m	struct:__anon156	access:public
timeStamp	imp_ivs_base_move.h	/^	int64_t timeStamp;	\/**< 帧的时间戳 *\/$/;"	m	struct:__anon151	access:public
timeout	imp_isp.h	/^	uint32_t timeout;		\/**< 超时时间，单位ms *\/$/;"	m	struct:__anon15	access:public
timestamp	imp_encoder.h	/^	int64_t                 timestamp;          \/**< 时间戳，单位us *\/$/;"	m	struct:__anon108	access:public
top	imp_framesource.h	/^	int top;		\/**< 裁剪上起始点 *\/$/;"	m	struct:__anon174	access:public
top	imp_isp.h	/^	uint16_t top;              \/**< 画四角窗功能纵向起始点 *\/$/;"	m	struct:__anon63	access:public
top	imp_isp.h	/^	uint16_t top;              \/**< 画窗功能纵向起始点 *\/$/;"	m	struct:__anon62	access:public
ts	imp_common.h	/^	uint64_t ts;						\/**< 时间 *\/$/;"	m	struct:__anon168	access:public
ts	imp_osd.h	/^	uint64_t ts;						\/**< 时间戳 *\/$/;"	m	struct:__anon102	access:public
type	imp_audio.h	/^	IMPAudioPalyloadType type;				\/**< 音频净荷数据类型 *\/$/;"	m	struct:__anon144	access:public
type	imp_audio.h	/^	IMPAudioPalyloadType type;			\/**< 音频解码协议类型 *\/$/;"	m	struct:__anon146	access:public
type	imp_audio.h	/^	IMPAudioPalyloadType type;		\/**< 编码协议类型 *\/$/;"	m	struct:__anon145	access:public
type	imp_audio.h	/^	IMPAudioPalyloadType type;		\/**< 音频解码协议类型 *\/$/;"	m	struct:__anon147	access:public
type	imp_framesource.h	/^	IMPFSChnFifoType type;			\/**< 通道FIFO类型 *\/$/;"	m	struct:__anon178	access:public
type	imp_framesource.h	/^	IMPFSChnType type;			\/**< 通道类型 *\/$/;"	m	struct:__anon179	access:public
type	imp_isp.h	/^	IMPISPDrawType type;                \/**< 画图类型 *\/$/;"	m	struct:__anon66	access:public
type	imp_isp.h	/^	IMPISPOSDType type;$/;"	m	struct:__anon87	access:public
type	imp_isp.h	/^	char type[20];		\/**< I2C设备名字，必须与摄像头驱动中struct i2c_device_id中name变量一致 *\/$/;"	m	struct:__anon5	access:public
type	imp_osd.h	/^	IMPOsdRgnType		type;			\/**< OSD区域类型 *\/$/;"	m	struct:__anon101	access:public
uFreqLT	imp_encoder.h	/^	uint32_t                uFreqLT;$/;"	m	struct:__anon119	access:public
uGopCtrlMode	imp_encoder.h	/^	IMPEncoderGopCtrlMode   uGopCtrlMode;$/;"	m	struct:__anon119	access:public
uGopLength	imp_encoder.h	/^	uint16_t                uGopLength;$/;"	m	struct:__anon119	access:public
uHeight	imp_encoder.h	/^	uint16_t                uHeight;$/;"	m	struct:__anon117	access:public
uLevel	imp_encoder.h	/^	uint8_t                 uLevel;$/;"	m	struct:__anon117	access:public
uMaxBitRate	imp_encoder.h	/^	uint32_t              uMaxBitRate;$/;"	m	struct:__anon123	access:public
uMaxBitRate	imp_encoder.h	/^	uint32_t              uMaxBitRate;$/;"	m	struct:__anon124	access:public
uMaxPSNR	imp_encoder.h	/^	uint16_t              uMaxPSNR;$/;"	m	struct:__anon124	access:public
uMaxPictureSize	imp_encoder.h	/^	uint32_t              uMaxPictureSize;$/;"	m	struct:__anon122	access:public
uMaxPictureSize	imp_encoder.h	/^	uint32_t              uMaxPictureSize;$/;"	m	struct:__anon123	access:public
uMaxPictureSize	imp_encoder.h	/^	uint32_t              uMaxPictureSize;$/;"	m	struct:__anon124	access:public
uMaxSameSenceCnt	imp_encoder.h	/^	uint32_t                uMaxSameSenceCnt;$/;"	m	struct:__anon119	access:public
uNotifyUserLTInter	imp_encoder.h	/^	uint8_t                 uNotifyUserLTInter;$/;"	m	struct:__anon119	access:public
uTargetBitRate	imp_encoder.h	/^	uint32_t              uTargetBitRate;$/;"	m	struct:__anon122	access:public
uTargetBitRate	imp_encoder.h	/^	uint32_t              uTargetBitRate;$/;"	m	struct:__anon123	access:public
uTargetBitRate	imp_encoder.h	/^	uint32_t              uTargetBitRate;$/;"	m	struct:__anon124	access:public
uTier	imp_encoder.h	/^	uint8_t                 uTier;$/;"	m	struct:__anon117	access:public
uWidth	imp_encoder.h	/^	uint16_t                uWidth;$/;"	m	struct:__anon117	access:public
u_value	imp_isp.h	/^		unsigned char u_value;	\/**< U 值 *\/$/;"	m	struct:color_value::__anon57	access:public
user_ql_en	imp_encoder.h	/^	bool        user_ql_en;             \/**< 0: 使用默认量化表; 1:使用用户量化表*\/$/;"	m	struct:__anon131	access:public
usrFrmDepth	imp_audio.h	/^	int usrFrmDepth;					\/**< 音频帧缓存深度 *\/$/;"	m	struct:__anon141	access:public
usrFrmDepth	imp_dmic.h	/^	int usrFrmDepth;  \/**<DMIC 音频帧缓存深度*\/$/;"	m	struct:__anon158	access:public
v_value	imp_isp.h	/^		unsigned char v_value;	\/**< V 值 *\/$/;"	m	struct:color_value::__anon57	access:public
value	imp_audio.h	/^	uint32_t *value;						\/**< 协议属性指针 *\/$/;"	m	struct:__anon144	access:public
value	imp_audio.h	/^	void *value;						\/**< 具体协议属性指针 *\/$/;"	m	struct:__anon146	access:public
value	imp_isp.h	/^        uint32_t value;  \/**< 寄存器值 *\/$/;"	m	struct:__anon11	access:public
video_interface	imp_isp.h	/^	IMPSensorVinType video_interface;	\/**< 摄像头数据输入接口 *\/$/;"	m	struct:__anon9	access:public
virAddr	imp_audio.h	/^	uint32_t *virAddr;					\/**< 音频帧数据虚拟地址 *\/$/;"	m	struct:__anon140	access:public
virAddr	imp_common.h	/^	uint32_t virAddr;		\/**< 帧的虚拟地址 *\/$/;"	m	struct:__anon167	access:public
virAddr	imp_dmic.h	/^	uint32_t *virAddr;$/;"	m	struct:__anon156	access:public
virAddr	imp_encoder.h	/^	uint32_t                virAddr;            \/**< 帧码流包虚拟地址 *\/$/;"	m	struct:__anon109	access:public
vts	imp_isp.h	/^	uint32_t vts;       \/**< sensor vts *\/$/;"	m	struct:__anon12	access:public
w	imp_encoder.h	/^	uint32_t    w;          \/**< 裁剪的区域,宽 *\/$/;"	m	struct:__anon115	access:public
weight	imp_isp.h	/^	unsigned char weight[15][15];    \/**< 各区域权重信息 [0 ~ 8]*\/$/;"	m	struct:__anon39	access:public
weight_enable	imp_isp.h	/^	IMPISPTuningOpsMode weight_enable; \/**< 全局权重设置使能 *\/$/;"	m	struct:__anon40	access:public
width	imp_common.h	/^	uint32_t width;			\/**< 帧宽 *\/$/;"	m	struct:__anon167	access:public
width	imp_framesource.h	/^	int width;		\/**< 图片裁剪宽度 *\/$/;"	m	struct:__anon174	access:public
width	imp_isp.h	/^	uint16_t width;            \/**< 画四角窗宽度 *\/$/;"	m	struct:__anon63	access:public
width	imp_isp.h	/^	uint16_t width;            \/**< 画窗宽度 *\/$/;"	m	struct:__anon62	access:public
width	imp_isp.h	/^	uint32_t width;     \/**< sensor输出宽度 *\/$/;"	m	struct:__anon12	access:public
width	imp_isp.h	/^	uint8_t  width;                \/**< 线宽 *\/$/;"	m	struct:__anon64	access:public
wind	imp_isp.h	/^		IMPISPDrawWindAttr wind;		\/**< 画框属性 *\/$/;"	m	union:__anon66::__anon67	access:public
work_done	imp_encoder.h	/^	uint32_t    work_done;              \/**< 通道程序运行状态，0：正在运行，1，未运行 *\/$/;"	m	struct:__anon130	access:public
x	imp_common.h	/^	int		x;			\/**<横坐标  *\/$/;"	m	struct:__anon171	access:public
x	imp_encoder.h	/^	uint32_t    x;          \/**< 裁剪的区域,左上角x坐标 *\/$/;"	m	struct:__anon115	access:public
x	imp_osd.h	/^	int x;					\/* 马赛克起始x坐标 (2对齐)*\/$/;"	m	struct:mosaicPointAttr	access:public
y	imp_common.h	/^	int		y;			\/**<纵坐标  *\/$/;"	m	struct:__anon171	access:public
y	imp_encoder.h	/^	uint32_t    y;          \/**< 裁剪的区域,左上角y坐标 *\/$/;"	m	struct:__anon115	access:public
y	imp_osd.h	/^	int y;					\/* 马赛克起始y坐标 (2对齐)*\/$/;"	m	struct:mosaicPointAttr	access:public
y_value	imp_isp.h	/^		unsigned char y_value;	\/**< Y 值 *\/$/;"	m	struct:color_value::__anon57	access:public
zoom_chx_en	imp_isp.h	/^	int32_t zoom_chx_en[3];     \/**< 数字自动对焦功能通道使能 *\/$/;"	m	struct:__anon54	access:public
zoom_height	imp_isp.h	/^	int32_t zoom_height[3];     \/**< 自动对焦区域的高度 *\/$/;"	m	struct:__anon54	access:public
zoom_left	imp_isp.h	/^	int32_t zoom_left[3];       \/**< 自动对焦区域横向起始点，需要小于原始图像的宽度 *\/$/;"	m	struct:__anon54	access:public
zoom_top	imp_isp.h	/^	int32_t zoom_top[3];        \/**< 自动对焦区域纵向起始点，需要小于原始图像的高度 *\/$/;"	m	struct:__anon54	access:public
zoom_width	imp_isp.h	/^	int32_t zoom_width[3];      \/**< 自动对焦区域的宽度 *\/$/;"	m	struct:__anon54	access:public
